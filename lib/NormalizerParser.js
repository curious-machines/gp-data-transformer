/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,12],$V2=[1,6],$V3=[1,7],$V4=[1,8],$V5=[1,10],$V6=[1,11],$V7=[1,21],$V8=[1,22],$V9=[1,25],$Va=[1,15],$Vb=[1,19],$Vc=[1,20],$Vd=[1,24],$Ve=[1,23],$Vf=[1,7,8,11,13,14,17,19,24,25,26,29,36,37,69,70],$Vg=[1,50],$Vh=[1,36],$Vi=[1,37],$Vj=[1,39],$Vk=[1,40],$Vl=[1,41],$Vm=[1,52],$Vn=[1,42],$Vo=[1,43],$Vp=[1,45],$Vq=[1,47],$Vr=[1,49],$Vs=[1,51],$Vt=[1,7,8,11,13,14,16,17,19,24,25,26,28,29,36,37,38,40,69,70],$Vu=[1,7,8,11,13,14,16,17,19,24,25,26,28,29,36,37,38,40,45,47,56,69,70],$Vv=[1,62],$Vw=[2,12],$Vx=[2,15],$Vy=[2,13],$Vz=[2,14],$VA=[1,7,8,11,13,14,17,19,24,25,26,28,29,36,37,38,40,69,70],$VB=[1,68],$VC=[1,7,8,11,13,14,17,19,24,25,26,28,29,36,37,38,40,56,69,70],$VD=[1,75],$VE=[1,80],$VF=[38,40],$VG=[28,40],$VH=[1,92],$VI=[1,95],$VJ=[1,93],$VK=[1,94],$VL=[1,117],$VM=[38,40,47],$VN=[38,40,45,47],$VO=[28,40,45],$VP=[40,47],$VQ=[1,141],$VR=[1,146],$VS=[1,147],$VT=[1,155],$VU=[1,156],$VV=[8,28,69];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"statements":4,"statement":5,"transform":6,"GENERATOR":7,"IDENTIFIER":8,"=":9,"generator":10,"PATTERN":11,"namedTypePattern":12,"TRANSFORM":13,"TYPE":14,"typeDefinition":15,";":16,"<=":17,"typePatterns":18,"ENUMERATION":19,"ANY_TYPE":20,"ARRAY_TYPE":21,"arrayTypeDefinition":22,"BOOLEAN_TYPE":23,"TRUE":24,"FALSE":25,"{":26,"identifiers":27,"}":28,"NULL_TYPE":29,"NUMBER_TYPE":30,"float":31,"OBJECT_TYPE":32,"objectTypeDefinition":33,"STRING_TYPE":34,"string":35,"UNDEFINED_TYPE":36,"[":37,"]":38,"transformElements":39,",":40,"transformProperties":41,"transformProperty":42,":":43,"namedGenerator":44,"AS":45,"(":46,")":47,"parameterList":48,"arrayExpression":49,"boolean":50,"objectExpression":51,"expressionElements":52,"expressionElement":53,"expressionProperties":54,"expressionProperty":55,"|":56,"typePattern":57,"arrayPattern":58,"objectPattern":59,"patternElements":60,"namedPatternElement":61,"patternElement":62,"range":63,"integer":64,"..":65,"patternProperties":66,"namedPatternProperty":67,"namedProperty":68,"STRING":69,"NUMBER":70,"stringOrIdentifier":71,"$accept":0,"$end":1},
terminals_: {2:"error",7:"GENERATOR",8:"IDENTIFIER",9:"=",11:"PATTERN",13:"TRANSFORM",14:"TYPE",16:";",17:"<=",19:"ENUMERATION",20:"ANY_TYPE",21:"ARRAY_TYPE",23:"BOOLEAN_TYPE",24:"TRUE",25:"FALSE",26:"{",28:"}",29:"NULL_TYPE",30:"NUMBER_TYPE",32:"OBJECT_TYPE",34:"STRING_TYPE",36:"UNDEFINED_TYPE",37:"[",38:"]",40:",",43:":",45:"AS",46:"(",47:")",56:"|",65:"..",69:"STRING",70:"NUMBER"},
productions_: [0,[3,1],[4,2],[4,1],[5,1],[5,4],[5,4],[5,4],[5,4],[6,2],[6,3],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,4],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[22,2],[22,3],[39,3],[39,1],[33,2],[33,3],[41,3],[41,1],[42,3],[42,1],[44,1],[44,3],[10,1],[10,3],[10,4],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[49,2],[49,3],[52,3],[52,1],[53,1],[51,2],[51,3],[54,3],[54,1],[55,3],[55,1],[48,3],[48,1],[18,3],[18,1],[12,1],[12,3],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[58,2],[58,3],[60,3],[60,1],[61,1],[61,3],[62,1],[62,3],[62,3],[62,5],[63,3],[63,2],[63,2],[63,1],[59,2],[59,3],[66,3],[66,1],[67,1],[67,3],[68,3],[68,1],[50,1],[50,1],[35,1],[64,1],[31,1],[71,1],[71,1],[27,2],[27,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0];
break;
case 2: case 115:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1]
break;
case 3: case 35: case 39: case 57: case 62: case 66: case 68: case 89: case 103: case 116:
this.$ = [ $$[$0] ];
break;
case 4: case 19: case 28: case 73: case 81:
this.$ = $$[$0];
break;
case 5:
this.$ = { type: 'generator-assignment', name: $$[$0-2], value: $$[$0] };
break;
case 6:
this.$ = { type: 'pattern-assignment', name: $$[$0-2], value: $$[$0] };
break;
case 7:
this.$ = { type: 'transform-assignment', name: $$[$0-2], value: $$[$0] };
break;
case 8:
this.$ = { type: 'type-assignment', name: $$[$0-2], value: $$[$0] };
break;
case 9:
this.$ = { type: 'transform', patterns: null, returnValue: $$[$0-1] };
break;
case 10:
this.$ = { type: 'transform', patterns: $$[$0], returnValue: $$[$0-2] };
break;
case 11:
this.$ = { type: 'transform', patterns: $$[$0], returnValue: null };
break;
case 12:
this.$ = { type: 'generator-reference', name: $$[$0] };
break;
case 13:
this.$ = { type: 'transform-reference', name: $$[$0] };
break;
case 14:
this.$ = { type: 'type-reference', name: $$[$0] };
break;
case 15:
this.$ = { type: 'pattern-reference', name: $$[$0] };
break;
case 16:
this.$ = { type: 'enumeration-reference', name: $$[$0] };
break;
case 17:
this.$ = { type: 'type-definition', definition: 'any', value: null };
break;
case 18:
this.$ = { type: 'type-definition', definition: 'array', value: null };
break;
case 20:
this.$ = { type: 'type-definition', definition: 'boolean', value: null };
break;
case 21:
this.$ = { type: 'type-definition', definition: 'boolean', value: true };
break;
case 22:
this.$ = { type: 'type-definition', definition: 'boolean', value: false };
break;
case 23:
this.$ = { type: 'type-definition', definition: 'enumeration', value: $$[$0-1] };
break;
case 24:
this.$ = { type: 'type-definition', definition: 'null', value: null };
break;
case 25:
this.$ = { type: 'type-definition', definition: 'number', value: null };
break;
case 26:
this.$ = { type: 'type-definition', definition: 'number', value: $$[$0] };
break;
case 27:
this.$ = { type: 'type-definition', definition: 'object', value: null };
break;
case 29:
this.$  = { type: 'type-definition', definition: 'string', value: null };
break;
case 30:
this.$ = { type: 'type-definition', definition: 'string', value: $$[$0] };
break;
case 31:
this.$ = { type: 'type-definition', definition: 'undefined', value: null };
break;
case 32:
this.$ = { type: 'type-definition', definition: 'array', value: [] };
break;
case 33:
this.$ = { type: 'type-definition', definition: 'array', value: $$[$0-1] };
break;
case 34: case 38: case 56: case 61: case 65: case 67: case 88: case 102:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 36:
this.$ = { type: 'type-definition', definition: 'object', value: [] };
break;
case 37:
this.$ = { type: 'type-definition', definition: 'object', value: $$[$0-1] };
break;
case 40:
this.$ = { type: 'type-property', name: $$[$0-2], value: $$[$0] };
break;
case 41:
this.$ = { type: 'type-property', name: $$[$0], value: null };
break;
case 42: case 69: case 90:
$$[$0].assignTo = null; this.$ = $$[$0];
break;
case 43: case 70: case 91: case 105:
$$[$0-2].assignTo = $$[$0]; this.$ = $$[$0-2];
break;
case 44:
this.$ = { type: 'generator', expression: { type: 'get-value', name: $$[$0] } };
break;
case 45:
this.$ = { type: 'generator', expression: { type: 'invoke', name: $$[$0-2], args: [] } };
break;
case 46:
this.$ = { type: 'generator', expression: { type: 'invoke', name: $$[$0-3], args: $$[$0-1] } };
break;
case 47: case 52:
this.$ = { type: 'generator', expression: $$[$0] };
break;
case 48:
this.$ = { type: 'generator', expression: { type: 'boolean', value: $$[$0] } };
break;
case 49:
this.$ = { type: 'generator', expression: { type: 'boolean', value: null } };
break;
case 50:
this.$ = { type: 'generator', expression: { type: 'number', value: $$[$0] } };
break;
case 51:
this.$ = { type: 'generator', expression: { type: 'string', value: $$[$0] } };
break;
case 53:
this.$ = { type: 'generator', expression: { type: 'string', value: undefined } };
break;
case 54:
this.$ = { type: 'array', value: [] };
break;
case 55:
this.$ = { type: 'array', value: $$[$0-1] };
break;
case 58: case 113:
this.$ = $$[$0]
break;
case 59:
this.$ = { type: 'object', value: [] };
break;
case 60:
this.$ = { type: 'object', value: $$[$0-1] };
break;
case 63:
$$[$0].name = $$[$0-2]; this.$ = $$[$0];
break;
case 64:
this.$ = { type: 'generator', name: $$[$0], expression: { type: 'get-value', name: $$[$0] } };
break;
case 71:
this.$ = { type: 'pattern', patternType: 'any', value: null };
break;
case 72:
this.$ = { type: 'pattern', patternType: 'array', value: null };
break;
case 74:
this.$ = { type: 'pattern', patternType: 'boolean', value: null };
break;
case 75:
this.$ = { type: 'pattern', patternType: 'boolean', value: true };
break;
case 76:
this.$ = { type: 'pattern', patternType: 'boolean', value: false };
break;
case 77:
this.$ = { type: 'pattern', patternType: 'null', value: null };
break;
case 78:
this.$ = { type: 'pattern', patternType: 'number', value: null };
break;
case 79:
this.$ = { type: 'pattern', patternType: 'number', value: $$[$0] };
break;
case 80: case 100:
this.$ = { type: 'pattern', patternType: 'object', value: null };
break;
case 82:
this.$ = { type: 'pattern', patternType: 'string', value: null };
break;
case 83:
this.$ = { type: 'pattern', patternType: 'string', value: $$[$0] };
break;
case 84:
this.$ = { type: 'pattern', patternType: 'undefined', value: null };
break;
case 85:
this.$ = { type: 'pattern', patternType: 'reference', value: $$[$0] };
break;
case 86:
this.$ = { type: 'pattern', patternType: 'array-pattern', value: [] };
break;
case 87:
this.$ = { type: 'pattern', patternType: 'array-pattern', value: $$[$0-1] };
break;
case 92:
this.$ = { type: 'element', pattern: $$[$0], range: { type: 'range', start: 1, stop: 1 } };
break;
case 93:
this.$ = { type: 'element', pattern: $$[$0-2], range: $$[$0] };
break;
case 94:
this.$ = { type: 'element-group', elements: $$[$0-1], range: { type: 'range', start: 1, stop: 1 } };
break;
case 95:
this.$ = { type: 'element-group', elements: $$[$0-3], range: $$[$0] };
break;
case 96:
this.$ = { type: 'range', start: $$[$0-2], stop: $$[$0] };
break;
case 97:
this.$ = { type: 'range', start: 0, stop: $$[$0] };
break;
case 98:
this.$ = { type: 'range', start: $$[$0-1], stop: Infinity };
break;
case 99:
this.$ = { type: 'range', start: $$[$0], stop: $$[$0] };
break;
case 101:
this.$ = { type: 'pattern', patternType: 'object-pattern', value: $$[$0-1] };
break;
case 104:
$$[$0].assignTo = $$[$0].name; this.$ = $$[$0];
break;
case 106:
this.$ = { type: 'property', name: $$[$0-2], pattern: $$[$0] };
break;
case 107:
this.$ = { type: 'property', name: $$[$0], pattern: { type: 'pattern', patternType: 'any', value: null } };
break;
case 108:
this.$ = true;
break;
case 109:
this.$ = false;
break;
case 110: case 114:
this.$ = $$[$0].substring(1,  $$[$0].length - 1);
break;
case 111:
this.$ = parseInt($$[$0]);
break;
case 112:
this.$ = parseFloat($$[$0]);
break;
}
},
table: [{3:1,4:2,5:3,6:4,7:$V0,8:$V1,10:9,11:$V2,13:$V3,14:$V4,17:$V5,19:$V6,24:$V7,25:$V8,26:$V9,29:$Va,31:16,35:17,36:$Vb,37:$Vc,49:13,50:14,51:18,69:$Vd,70:$Ve},{1:[3]},{1:[2,1],5:26,6:4,7:$V0,8:$V1,10:9,11:$V2,13:$V3,14:$V4,17:$V5,19:$V6,24:$V7,25:$V8,26:$V9,29:$Va,31:16,35:17,36:$Vb,37:$Vc,49:13,50:14,51:18,69:$Vd,70:$Ve},o($Vf,[2,3]),o($Vf,[2,4]),{8:[1,27]},{8:[1,28]},{8:[1,29]},{8:[1,30]},{16:[1,31],17:[1,32]},{8:$Vg,12:34,18:33,20:$Vh,21:$Vi,23:$Vj,24:$Vk,25:$Vl,26:$Vm,29:$Vn,30:$Vo,31:44,32:$Vp,34:$Vq,35:48,36:$Vr,37:$Vs,57:35,58:38,59:46,69:$Vd,70:$Ve},{8:[1,53]},o($Vt,[2,44],{46:[1,54]}),o($Vt,[2,47]),o($Vt,[2,48]),o($Vt,[2,49]),o($Vt,[2,50]),o($Vt,[2,51]),o($Vt,[2,52]),o($Vt,[2,53]),{8:$V1,10:58,24:$V7,25:$V8,26:$V9,29:$Va,31:16,35:17,36:$Vb,37:$Vc,38:[1,55],49:13,50:14,51:18,52:56,53:57,69:$Vd,70:$Ve},o($Vt,[2,108]),o($Vt,[2,109]),o($Vu,[2,112]),o($Vu,[2,110]),{8:$Vv,28:[1,59],54:60,55:61},o($Vf,[2,2]),o($Vf,$Vw,{9:[1,63]}),o($Vf,$Vx,{9:[1,64]}),o($Vf,$Vy,{9:[1,65]}),o($Vf,$Vz,{9:[1,66]}),o($VA,[2,9]),{8:$Vg,12:34,18:67,20:$Vh,21:$Vi,23:$Vj,24:$Vk,25:$Vl,26:$Vm,29:$Vn,30:$Vo,31:44,32:$Vp,34:$Vq,35:48,36:$Vr,37:$Vs,57:35,58:38,59:46,69:$Vd,70:$Ve},o($VA,[2,11],{56:$VB}),o($VC,[2,68]),o($VC,[2,69],{45:[1,69]}),o($Vu,[2,71]),o($Vu,[2,72]),o($Vu,[2,73]),o($Vu,[2,74]),o($Vu,[2,75]),o($Vu,[2,76]),o($Vu,[2,77]),o($Vu,[2,78]),o($Vu,[2,79]),o($Vu,[2,80]),o($Vu,[2,81]),o($Vu,[2,82]),o($Vu,[2,83]),o($Vu,[2,84]),o($Vu,[2,85]),{8:$Vg,20:$Vh,21:$Vi,23:$Vj,24:$Vk,25:$Vl,26:$Vm,29:$Vn,30:$Vo,31:44,32:$Vp,34:$Vq,35:48,36:$Vr,37:$Vs,38:[1,70],46:$VD,57:74,58:38,59:46,60:71,61:72,62:73,69:$Vd,70:$Ve},{8:$VE,28:[1,76],66:77,67:78,68:79},o($VA,[2,16]),{8:[1,83],47:[1,81],48:82},o($Vt,[2,54]),{38:[1,84],40:[1,85]},o($VF,[2,57]),o($VF,[2,58]),o($Vt,[2,59]),{28:[1,86],40:[1,87]},o($VG,[2,62]),o($VG,[2,64],{43:[1,88]}),{8:$V1,10:89,24:$V7,25:$V8,26:$V9,29:$Va,31:16,35:17,36:$Vb,37:$Vc,49:13,50:14,51:18,69:$Vd,70:$Ve},{8:$Vg,12:90,20:$Vh,21:$Vi,23:$Vj,24:$Vk,25:$Vl,26:$Vm,29:$Vn,30:$Vo,31:44,32:$Vp,34:$Vq,35:48,36:$Vr,37:$Vs,57:35,58:38,59:46,69:$Vd,70:$Ve},{6:91,7:$VH,8:$V1,10:9,11:$VI,13:$VJ,14:$VK,17:$V5,19:$V6,24:$V7,25:$V8,26:$V9,29:$Va,31:16,35:17,36:$Vb,37:$Vc,49:13,50:14,51:18,69:$Vd,70:$Ve},{15:96,19:[1,103],20:[1,97],21:[1,98],22:99,23:[1,100],24:[1,101],25:[1,102],26:[1,113],29:[1,104],30:[1,105],31:106,32:[1,107],33:108,34:[1,109],35:110,36:[1,111],37:[1,112],69:$Vd,70:$Ve},o($VA,[2,10],{56:$VB}),{8:$Vg,12:114,20:$Vh,21:$Vi,23:$Vj,24:$Vk,25:$Vl,26:$Vm,29:$Vn,30:$Vo,31:44,32:$Vp,34:$Vq,35:48,36:$Vr,37:$Vs,57:35,58:38,59:46,69:$Vd,70:$Ve},{8:[1,115]},o($Vu,[2,86]),{38:[1,116],40:$VL},o($VM,[2,89]),o($VM,[2,90],{45:[1,118]}),o($VN,[2,92],{16:[1,119]}),{8:$Vg,20:$Vh,21:$Vi,23:$Vj,24:$Vk,25:$Vl,26:$Vm,29:$Vn,30:$Vo,31:44,32:$Vp,34:$Vq,35:48,36:$Vr,37:$Vs,46:$VD,57:74,58:38,59:46,60:120,61:72,62:73,69:$Vd,70:$Ve},o($Vu,[2,100]),{28:[1,121],40:[1,122]},o($VG,[2,103]),o($VG,[2,104],{45:[1,123]}),o($VO,[2,107],{43:[1,124]}),o($Vt,[2,45]),{40:[1,126],47:[1,125]},o($VP,[2,66]),o($Vt,[2,55]),{8:$V1,10:58,24:$V7,25:$V8,26:$V9,29:$Va,31:16,35:17,36:$Vb,37:$Vc,49:13,50:14,51:18,53:127,69:$Vd,70:$Ve},o($Vt,[2,60]),{8:$Vv,55:128},{8:$V1,10:129,24:$V7,25:$V8,26:$V9,29:$Va,31:16,35:17,36:$Vb,37:$Vc,49:13,50:14,51:18,69:$Vd,70:$Ve},o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),{8:[1,130]},{8:[1,131]},{8:[1,132]},{8:[1,133]},o($Vf,[2,8]),o($Vf,[2,17]),o($Vf,[2,18]),o($Vf,[2,19]),o($Vf,[2,20]),o($Vf,[2,21]),o($Vf,[2,22]),{26:[1,134]},o($Vf,[2,24]),o($Vf,[2,25]),o($Vf,[2,26]),o($Vf,[2,27]),o($Vf,[2,28]),o($Vf,[2,29]),o($Vf,[2,30]),o($Vf,[2,31]),{6:137,7:$VH,8:$V1,10:9,11:$VI,13:$VJ,14:$VK,17:$V5,19:$V6,24:$V7,25:$V8,26:$V9,29:$Va,31:16,35:17,36:$Vb,37:$Vc,38:[1,135],39:136,49:13,50:14,51:18,69:$Vd,70:$Ve},{8:$VQ,28:[1,138],41:139,42:140},o($VC,[2,67]),o($VC,[2,70]),o($Vu,[2,87]),{8:$Vg,20:$Vh,21:$Vi,23:$Vj,24:$Vk,25:$Vl,26:$Vm,29:$Vn,30:$Vo,31:44,32:$Vp,34:$Vq,35:48,36:$Vr,37:$Vs,46:$VD,57:74,58:38,59:46,61:142,62:73,69:$Vd,70:$Ve},{8:[1,143]},{63:144,64:145,65:$VR,70:$VS},{40:$VL,47:[1,148]},o($Vu,[2,101]),{8:$VE,67:149,68:79},{8:[1,150]},{8:$Vg,20:$Vh,21:$Vi,23:$Vj,24:$Vk,25:$Vl,26:$Vm,29:$Vn,30:$Vo,31:44,32:$Vp,34:$Vq,35:48,36:$Vr,37:$Vs,57:151,58:38,59:46,69:$Vd,70:$Ve},o($Vt,[2,46]),{8:[1,152]},o($VF,[2,56]),o($VG,[2,61]),o($VG,[2,63]),o($VA,$Vw),o($VA,$Vy),o($VA,$Vz),o($VA,$Vx),{8:$VT,27:153,69:$VU,71:154},o($Vf,[2,32]),{38:[1,157],40:[1,158]},o($VF,[2,35]),o($Vf,[2,36]),{28:[1,159],40:[1,160]},o($VG,[2,39]),o($VG,[2,41],{43:[1,161]}),o($VM,[2,88]),o($VM,[2,91]),o($VN,[2,93]),o($VN,[2,99],{65:[1,162]}),{64:163,70:$VS},o([38,40,45,47,65],[2,111]),o($VN,[2,94],{16:[1,164]}),o($VG,[2,102]),o($VG,[2,105]),o($VO,[2,106]),o($VP,[2,65]),{8:$VT,28:[1,165],69:$VU,71:166},o($VV,[2,116]),o($VV,[2,113]),o($VV,[2,114]),o($Vf,[2,33]),{6:167,7:$VH,8:$V1,10:9,11:$VI,13:$VJ,14:$VK,17:$V5,19:$V6,24:$V7,25:$V8,26:$V9,29:$Va,31:16,35:17,36:$Vb,37:$Vc,49:13,50:14,51:18,69:$Vd,70:$Ve},o($Vf,[2,37]),{8:$VQ,42:168},{6:169,7:$VH,8:$V1,10:9,11:$VI,13:$VJ,14:$VK,17:$V5,19:$V6,24:$V7,25:$V8,26:$V9,29:$Va,31:16,35:17,36:$Vb,37:$Vc,49:13,50:14,51:18,69:$Vd,70:$Ve},o($VN,[2,98],{64:170,70:$VS}),o($VN,[2,97]),{63:171,64:145,65:$VR,70:$VS},o($Vf,[2,23]),o($VV,[2,115]),o($VF,[2,34]),o($VG,[2,38]),o($VG,[2,40]),o($VN,[2,96]),o($VN,[2,95])],
defaultActions: {},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comment */
break;
case 2:return 20
break;
case 3:return 21
break;
case 4:return 45
break;
case 5:return 23
break;
case 6:return 19
break;
case 7:return 25
break;
case 8:return 7
break;
case 9:return 29
break;
case 10:return 30
break;
case 11:return 32
break;
case 12:return 11
break;
case 13:return 34
break;
case 14:return 13
break;
case 15:return 24
break;
case 16:return 14
break;
case 17:return 36
break;
case 18:return 46
break;
case 19:return 47
break;
case 20:return 26
break;
case 21:return 28
break;
case 22:return 37
break;
case 23:return 38
break;
case 24:return 56
break;
case 25:return 40
break;
case 26:return 43
break;
case 27:return 16
break;
case 28:return 9
break;
case 29:return 17
break;
case 30:return 65
break;
case 31:return 8
break;
case 32:return 70
break;
case 33:return 69
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:any)/,/^(?:array)/,/^(?:as)/,/^(?:boolean)/,/^(?:enumeration)/,/^(?:false)/,/^(?:generator)/,/^(?:null)/,/^(?:number)/,/^(?:object)/,/^(?:pattern)/,/^(?:string)/,/^(?:transform)/,/^(?:true)/,/^(?:type)/,/^(?:undefined)/,/^(?:\()/,/^(?:\))/,/^(?:{)/,/^(?:})/,/^(?:\[)/,/^(?:\])/,/^(?:\|)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:=)/,/^(?:<=)/,/^(?:\.\.)/,/^(?:[a-zA-Z_-][a-zA-Z0-9_-]*)/,/^(?:[-+]?(0|[1-9]\d*)(\.\d+)?)/,/^(?:"[^"\r\n]*")/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();

export default parser;
