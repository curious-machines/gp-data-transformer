/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,11],$V2=[1,6],$V3=[1,7],$V4=[1,8],$V5=[1,10],$V6=[1,21],$V7=[1,22],$V8=[1,25],$V9=[1,14],$Va=[1,18],$Vb=[1,20],$Vc=[1,19],$Vd=[1,24],$Ve=[1,23],$Vf=[1,7,8,11,13,14,17,23,24,26,29,36,37,56,79,80],$Vg=[1,7,8,11,13,14,17,23,24,26,28,29,36,37,38,41,42,51,56,79,80],$Vh=[1,32],$Vi=[1,33],$Vj=[1,34],$Vk=[1,35],$Vl=[1,7,8,11,13,14,16,17,23,24,26,28,29,36,37,38,41,42,51,56,58,59,60,61,79,80],$Vm=[2,52],$Vn=[1,37],$Vo=[1,38],$Vp=[1,7,8,11,13,14,16,17,23,24,26,28,29,36,37,38,41,42,49,51,56,58,59,60,61,66,79,80],$Vq=[1,47],$Vr=[2,15],$Vs=[2,16],$Vt=[2,17],$Vu=[1,72],$Vv=[1,70],$Vw=[1,56],$Vx=[1,57],$Vy=[1,58],$Vz=[1,59],$VA=[1,60],$VB=[1,71],$VC=[1,74],$VD=[1,61],$VE=[1,62],$VF=[1,64],$VG=[1,65],$VH=[1,67],$VI=[1,73],$VJ=[38,42],$VK=[28,42],$VL=[1,94],$VM=[1,95],$VN=[1,96],$VO=[1,115],$VP=[1,7,8,11,13,14,17,23,24,26,28,29,36,37,38,41,42,51,56,66,79,80],$VQ=[1,7,8,11,13,14,17,23,24,26,28,29,36,37,38,41,42,49,51,56,66,79,80],$VR=[1,124],$VS=[1,129],$VT=[1,7,8,11,13,14,16,17,23,24,26,28,29,36,37,38,41,42,51,56,58,59,79,80],$VU=[42,51],$VV=[1,154],$VW=[38,42,51],$VX=[38,42,49,51],$VY=[28,42,49],$VZ=[1,166],$V_=[1,167],$V$=[1,169],$V01=[1,171],$V11=[41,42],$V21=[1,172],$V31=[1,174],$V41=[2,44],$V51=[1,176],$V61=[1,181],$V71=[1,182],$V81=[1,196],$V91=[28,41,42];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"statements":4,"statement":5,"transform":6,"GENERATOR":7,"IDENTIFIER":8,"=":9,"generator":10,"PATTERN":11,"namedTypePattern":12,"TRANSFORM":13,"TYPE":14,"typeDefinition":15,"<=":16,"_":17,"typePatterns":18,"ANY_TYPE":19,"ARRAY_TYPE":20,"arrayTypeDefinition":21,"BOOLEAN_TYPE":22,"TRUE":23,"FALSE":24,"ENUMERATION":25,"{":26,"identifiers":27,"}":28,"NULL_TYPE":29,"NUMBER_TYPE":30,"float":31,"OBJECT_TYPE":32,"objectTypeDefinition":33,"STRING_TYPE":34,"string":35,"UNDEFINED_TYPE":36,"[":37,"]":38,"transformElements":39,"assignments":40,";":41,",":42,"transformProperties":43,"transformProperty":44,":":45,"transforms":46,"assignment":47,"namedGenerator":48,"AS":49,"(":50,")":51,"parameterList":52,"arrayExpression":53,"boolean":54,"objectExpression":55,"MAP":56,".":57,"+":58,"-":59,"*":60,"/":61,"expressionElements":62,"expressionElement":63,"expressionProperties":64,"expressionProperty":65,"|":66,"typePattern":67,"arrayPattern":68,"objectPattern":69,"patternElements":70,"namedPatternElement":71,"patternElement":72,"range":73,"integer":74,"..":75,"patternProperties":76,"namedPatternProperty":77,"namedProperty":78,"STRING":79,"NUMBER":80,"stringOrIdentifier":81,"$accept":0,"$end":1},
terminals_: {2:"error",7:"GENERATOR",8:"IDENTIFIER",9:"=",11:"PATTERN",13:"TRANSFORM",14:"TYPE",16:"<=",17:"_",19:"ANY_TYPE",20:"ARRAY_TYPE",22:"BOOLEAN_TYPE",23:"TRUE",24:"FALSE",25:"ENUMERATION",26:"{",28:"}",29:"NULL_TYPE",30:"NUMBER_TYPE",32:"OBJECT_TYPE",34:"STRING_TYPE",36:"UNDEFINED_TYPE",37:"[",38:"]",41:";",42:",",45:":",49:"AS",50:"(",51:")",56:"MAP",57:".",58:"+",59:"-",60:"*",61:"/",66:"|",75:"..",79:"STRING",80:"NUMBER"},
productions_: [0,[3,1],[4,2],[4,1],[5,1],[5,4],[5,4],[5,4],[5,4],[6,1],[6,3],[6,3],[6,3],[6,3],[6,1],[6,2],[6,2],[6,2],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,4],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[21,2],[21,3],[21,5],[39,3],[39,1],[33,2],[33,3],[33,5],[43,3],[43,1],[44,3],[44,1],[40,3],[40,1],[47,3],[46,3],[46,1],[48,1],[48,3],[10,1],[10,3],[10,4],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,6],[10,3],[10,3],[10,3],[10,3],[10,3],[53,2],[53,3],[62,3],[62,1],[63,1],[55,2],[55,3],[64,3],[64,1],[65,3],[65,1],[52,3],[52,1],[18,3],[18,1],[12,1],[12,3],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,2],[67,2],[67,1],[68,2],[68,3],[70,3],[70,1],[71,1],[71,3],[72,1],[72,3],[72,3],[72,5],[73,3],[73,2],[73,2],[73,1],[69,2],[69,3],[76,3],[76,1],[77,1],[77,3],[78,3],[78,1],[54,1],[54,1],[35,1],[74,1],[31,1],[81,1],[81,1],[27,3],[27,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0];
break;
case 2:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1]
break;
case 3: case 37: case 42: case 46: case 49: case 71: case 76: case 80: case 82: case 105: case 119: case 132:
this.$ = [ $$[$0] ];
break;
case 4: case 20: case 29: case 97: case 98:
this.$ = $$[$0];
break;
case 5:
this.$ = { type: 'generator-assignment', name: $$[$0-2], value: $$[$0] };
break;
case 6:
this.$ = { type: 'pattern-assignment',   name: $$[$0-2], value: $$[$0] };
break;
case 7:
this.$ = { type: 'transform-assignment', name: $$[$0-2], value: $$[$0] };
break;
case 8:
this.$ = { type: 'type-assignment',      name: $$[$0-2], value: $$[$0] };
break;
case 9:
this.$ = { type: 'transform', patterns: [{ type: 'pattern', patternType: 'any', value: null }], returnValue: $$[$0] };
break;
case 10:
this.$ = { type: 'transform', patterns: null,            returnValue: $$[$0-2]   };
break;
case 11:
this.$ = { type: 'transform', patterns: $$[$0],              returnValue: $$[$0-2]   };
break;
case 12:
this.$ = { type: 'transform', patterns: $$[$0],              returnValue: null };
break;
case 13: case 14:
this.$ = { type: 'transform', patterns: null,            returnValue: null };
break;
case 15:
this.$ = { type: 'generator-reference', name: $$[$0] };
break;
case 16:
this.$ = { type: 'transform-reference', name: $$[$0] };
break;
case 17:
this.$ = { type: 'type-reference',      name: $$[$0] };
break;
case 18:
this.$ = { type: 'type-definition', definition: 'any', value: null };
break;
case 19:
this.$ = { type: 'type-definition', definition: 'array', value: null };
break;
case 21:
this.$ = { type: 'type-definition', definition: 'boolean', value: null };
break;
case 22:
this.$ = { type: 'type-definition', definition: 'boolean', value: true };
break;
case 23:
this.$ = { type: 'type-definition', definition: 'boolean', value: false };
break;
case 24:
this.$ = { type: 'type-definition', definition: 'enumeration', value: $$[$0-1] };
break;
case 25:
this.$ = { type: 'type-definition', definition: 'null', value: null };
break;
case 26:
this.$ = { type: 'type-definition', definition: 'number', value: null };
break;
case 27:
this.$ = { type: 'type-definition', definition: 'number', value: $$[$0] };
break;
case 28:
this.$ = { type: 'type-definition', definition: 'object', value: null };
break;
case 30:
this.$  = { type: 'type-definition', definition: 'string', value: null };
break;
case 31:
this.$ = { type: 'type-definition', definition: 'string', value: $$[$0] };
break;
case 32:
this.$ = { type: 'type-definition', definition: 'undefined', value: null };
break;
case 33:
this.$ = { type: 'type-definition', definition: 'array', value: [] };
break;
case 34:
this.$ = { type: 'type-definition', definition: 'array', value: $$[$0-1] };
break;
case 35:
this.$ = { type: 'type-definition', definition: 'array', value: $$[$0-3].concat($$[$0-1]) };
break;
case 36: case 41: case 45: case 48: case 70: case 75: case 79: case 81: case 104: case 118: case 131:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 38:
this.$ = { type: 'type-definition', definition: 'object', value: [] };
break;
case 39:
this.$ = { type: 'type-definition', definition: 'object', value: $$[$0-1] };
break;
case 40:
this.$ = { type: 'type-definition', definition: 'object', value: $$[$0-3].concat($$[$0-1]) };
break;
case 43:
this.$ = { type: 'type-property', name: $$[$0-2], value: $$[$0] };
break;
case 44:
this.$ = { type: 'type-property', name: $$[$0], value: null };
break;
case 47:
this.$ = { type: 'assignment', name: $$[$0-2], value: $$[$0] };
break;
case 50: case 83: case 106:
$$[$0].assignTo = null; this.$ = $$[$0];
break;
case 51: case 84: case 107: case 121:
$$[$0-2].assignTo = $$[$0]; this.$ = $$[$0-2];
break;
case 52:
this.$ = { type: 'generator', expression: { type: 'get-value', name: $$[$0] } };
break;
case 53:
this.$ = { type: 'generator', expression: { type: 'invoke', name: $$[$0-2], args: [] } };
break;
case 54:
this.$ = { type: 'generator', expression: { type: 'invoke', name: $$[$0-3], args: $$[$0-1] } };
break;
case 55: case 60:
this.$ = { type: 'generator', expression: $$[$0] };
break;
case 56:
this.$ = { type: 'generator', expression: { type: 'boolean', value: $$[$0] } };
break;
case 57:
this.$ = { type: 'generator', expression: { type: 'boolean', value: null } };
break;
case 58:
this.$ = { type: 'generator', expression: { type: 'number', value: $$[$0] } };
break;
case 59:
this.$ = { type: 'generator', expression: { type: 'string', value: $$[$0] } };
break;
case 61:
this.$ = { type: 'generator', expression: { type: 'string', value: undefined } };
break;
case 62:
this.$ = { type: 'generator', expression: { type: 'map', value: [ $$[$0-3], $$[$0-1] ] } };
break;
case 63:
this.$ = { type: 'generator', expression: { type: 'get-property', left: { type: 'get-value', name: $$[$0-2] }, right: $$[$0] } };
break;
case 64:
this.$ = { type: 'generator', expression: { type: 'add', left: $$[$0-2], right: $$[$0] } };
break;
case 65:
this.$ = { type: 'generator', expression: { type: 'subtract', left: $$[$0-2], right: $$[$0] } };
break;
case 66:
this.$ = { type: 'generator', expression: { type: 'multiply', left: $$[$0-2], right: $$[$0] } };
break;
case 67:
this.$ = { type: 'generator', expression: { type: 'divide', left: $$[$0-2], right: $$[$0] } };
break;
case 68:
this.$ = { type: 'array', value: [] };
break;
case 69:
this.$ = { type: 'array', value: $$[$0-1] };
break;
case 72: case 120: case 129:
this.$ = $$[$0]
break;
case 73:
this.$ = { type: 'object', value: [] };
break;
case 74:
this.$ = { type: 'object', value: $$[$0-1] };
break;
case 77:
$$[$0].name = $$[$0-2]; this.$ = $$[$0];
break;
case 78:
this.$ = { type: 'generator', name: $$[$0], expression: { type: 'get-value', name: $$[$0] } };
break;
case 85:
this.$ = { type: 'pattern', patternType: 'any', value: null };
break;
case 86:
this.$ = { type: 'pattern', patternType: 'array',     value: null  };
break;
case 87:
this.$ = { type: 'pattern', patternType: 'boolean',   value: null  };
break;
case 88:
this.$ = { type: 'pattern', patternType: 'boolean',   value: true  };
break;
case 89:
this.$ = { type: 'pattern', patternType: 'boolean',   value: false };
break;
case 90:
this.$ = { type: 'pattern', patternType: 'null',      value: null  };
break;
case 91:
this.$ = { type: 'pattern', patternType: 'number',    value: null  };
break;
case 92:
this.$ = { type: 'pattern', patternType: 'number',    value: $$[$0]    };
break;
case 93:
this.$ = { type: 'pattern', patternType: 'object',    value: null  };
break;
case 94:
this.$ = { type: 'pattern', patternType: 'string',    value: null  };
break;
case 95:
this.$ = { type: 'pattern', patternType: 'string',    value: $$[$0]    };
break;
case 96:
this.$ = { type: 'pattern', patternType: 'undefined', value: null  };
break;
case 99:
this.$ = { type: 'pattern-reference', name: $$[$0] };
break;
case 100:
this.$ = { type: 'enumeration-reference', name: $$[$0] };
break;
case 101:
this.$ = { type: 'pattern', patternType: 'reference', value: $$[$0] };
break;
case 102:
this.$ = { type: 'pattern', patternType: 'array-pattern', value: [] };
break;
case 103:
this.$ = { type: 'pattern', patternType: 'array-pattern', value: $$[$0-1] };
break;
case 108:
this.$ = { type: 'element', pattern: $$[$0], range: { type: 'range', start: 1, stop: 1 } };
break;
case 109:
this.$ = { type: 'element', pattern: $$[$0-2], range: $$[$0] };
break;
case 110:
this.$ = { type: 'element-group', elements: $$[$0-1], range: { type: 'range', start: 1, stop: 1 } };
break;
case 111:
this.$ = { type: 'element-group', elements: $$[$0-3], range: $$[$0] };
break;
case 112:
this.$ = { type: 'range', start: $$[$0-2], stop: $$[$0] };
break;
case 113:
this.$ = { type: 'range', start: 0, stop: $$[$0] };
break;
case 114:
this.$ = { type: 'range', start: $$[$0-1], stop: Infinity };
break;
case 115:
this.$ = { type: 'range', start: $$[$0], stop: $$[$0] };
break;
case 116:
this.$ = { type: 'pattern', patternType: 'object', value: null };
break;
case 117:
this.$ = { type: 'pattern', patternType: 'object-pattern', value: $$[$0-1] };
break;
case 122:
this.$ = { type: 'property', name: $$[$0-2], pattern: $$[$0] };
break;
case 123:
this.$ = { type: 'property', name: $$[$0], pattern: { type: 'pattern', patternType: 'any', value: null } };
break;
case 124:
this.$ = true;
break;
case 125:
this.$ = false;
break;
case 126: case 130:
this.$ = $$[$0].substring(1,  $$[$0].length - 1);
break;
case 127:
this.$ = parseInt($$[$0]);
break;
case 128:
this.$ = parseFloat($$[$0]);
break;
}
},
table: [{3:1,4:2,5:3,6:4,7:$V0,8:$V1,10:9,11:$V2,13:$V3,14:$V4,17:$V5,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,56:$Vc,79:$Vd,80:$Ve},{1:[3]},{1:[2,1],5:26,6:4,7:$V0,8:$V1,10:9,11:$V2,13:$V3,14:$V4,17:$V5,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,56:$Vc,79:$Vd,80:$Ve},o($Vf,[2,3]),o($Vf,[2,4]),{8:[1,27]},{8:[1,28]},{8:[1,29]},{8:[1,30]},o($Vg,[2,9],{16:[1,31],58:$Vh,59:$Vi,60:$Vj,61:$Vk}),o($Vg,[2,14],{16:[1,36]}),o($Vl,$Vm,{50:$Vn,57:$Vo}),o($Vl,[2,55]),o($Vl,[2,56]),o($Vl,[2,57]),o($Vl,[2,58]),o($Vl,[2,59]),o($Vl,[2,60]),o($Vl,[2,61]),{50:[1,39]},{8:$V1,10:43,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,38:[1,40],53:12,54:13,55:17,56:$Vc,62:41,63:42,79:$Vd,80:$Ve},o($Vl,[2,124]),o($Vl,[2,125]),o($Vp,[2,128]),o($Vp,[2,126]),{8:$Vq,28:[1,44],64:45,65:46},o($Vf,[2,2]),o($Vf,$Vr,{9:[1,48]}),{9:[1,49]},o($Vf,$Vs,{9:[1,50]}),o($Vf,$Vt,{9:[1,51]}),{8:$Vu,11:$Vv,12:54,17:[1,52],18:53,19:$Vw,20:$Vx,22:$Vy,23:$Vz,24:$VA,25:$VB,26:$VC,29:$VD,30:$VE,31:63,32:$VF,34:$VG,35:66,36:$VH,37:$VI,67:55,68:68,69:69,79:$Vd,80:$Ve},{8:$V1,10:75,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,56:$Vc,79:$Vd,80:$Ve},{8:$V1,10:76,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,56:$Vc,79:$Vd,80:$Ve},{8:$V1,10:77,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,56:$Vc,79:$Vd,80:$Ve},{8:$V1,10:78,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,56:$Vc,79:$Vd,80:$Ve},{8:$Vu,11:$Vv,12:54,17:[1,80],18:79,19:$Vw,20:$Vx,22:$Vy,23:$Vz,24:$VA,25:$VB,26:$VC,29:$VD,30:$VE,31:63,32:$VF,34:$VG,35:66,36:$VH,37:$VI,67:55,68:68,69:69,79:$Vd,80:$Ve},{8:$V1,10:83,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,51:[1,81],52:82,53:12,54:13,55:17,56:$Vc,79:$Vd,80:$Ve},{8:[1,84]},{8:$V1,10:85,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,56:$Vc,79:$Vd,80:$Ve},o($Vl,[2,68]),{38:[1,86],42:[1,87]},o($VJ,[2,71]),o($VJ,[2,72],{58:$Vh,59:$Vi,60:$Vj,61:$Vk}),o($Vl,[2,73]),{28:[1,88],42:[1,89]},o($VK,[2,76]),o($VK,[2,78],{45:[1,90]}),{8:$V1,10:91,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,56:$Vc,79:$Vd,80:$Ve},{8:$Vu,11:$Vv,12:92,19:$Vw,20:$Vx,22:$Vy,23:$Vz,24:$VA,25:$VB,26:$VC,29:$VD,30:$VE,31:63,32:$VF,34:$VG,35:66,36:$VH,37:$VI,67:55,68:68,69:69,79:$Vd,80:$Ve},{6:93,7:$VL,8:$V1,10:9,13:$VM,14:$VN,17:$V5,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,56:$Vc,79:$Vd,80:$Ve},{15:97,19:[1,98],20:[1,99],21:100,22:[1,101],23:[1,102],24:[1,103],25:[1,104],26:[1,114],29:[1,105],30:[1,106],31:107,32:[1,108],33:109,34:[1,110],35:111,36:[1,112],37:[1,113],79:$Vd,80:$Ve},o($Vg,[2,10]),o($Vg,[2,11],{66:$VO}),o($VP,[2,82]),o($VP,[2,83],{49:[1,116]}),o($VQ,[2,85]),o($VQ,[2,86]),o($VQ,[2,87]),o($VQ,[2,88]),o($VQ,[2,89]),o($VQ,[2,90]),o($VQ,[2,91]),o($VQ,[2,92]),o($VQ,[2,93]),o($VQ,[2,94]),o($VQ,[2,95]),o($VQ,[2,96]),o($VQ,[2,97]),o($VQ,[2,98]),{8:[1,117]},{8:[1,118]},o($VQ,[2,101]),{8:$Vu,11:$Vv,19:$Vw,20:$Vx,22:$Vy,23:$Vz,24:$VA,25:$VB,26:$VC,29:$VD,30:$VE,31:63,32:$VF,34:$VG,35:66,36:$VH,37:$VI,38:[1,119],50:$VR,67:123,68:68,69:69,70:120,71:121,72:122,79:$Vd,80:$Ve},{8:$VS,28:[1,125],76:126,77:127,78:128},o($VT,[2,64],{60:$Vj,61:$Vk}),o($VT,[2,65],{60:$Vj,61:$Vk}),o($Vl,[2,66]),o($Vl,[2,67]),o($Vg,[2,12],{66:$VO}),o($Vg,[2,13]),o($Vl,[2,53]),{42:[1,131],51:[1,130]},o($VU,[2,80],{58:$Vh,59:$Vi,60:$Vj,61:$Vk}),o($Vl,[2,63]),{42:[1,132],58:$Vh,59:$Vi,60:$Vj,61:$Vk},o($Vl,[2,69]),{8:$V1,10:43,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,56:$Vc,63:133,79:$Vd,80:$Ve},o($Vl,[2,74]),{8:$Vq,65:134},{8:$V1,10:135,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,56:$Vc,79:$Vd,80:$Ve},o($Vf,[2,5],{58:$Vh,59:$Vi,60:$Vj,61:$Vk}),o($Vf,[2,6]),o($Vf,[2,7]),{8:[1,136]},{8:[1,137]},{8:[1,138]},o($Vf,[2,8]),o($Vf,[2,18]),o($Vf,[2,19]),o($Vf,[2,20]),o($Vf,[2,21]),o($Vf,[2,22]),o($Vf,[2,23]),{26:[1,139]},o($Vf,[2,25]),o($Vf,[2,26]),o($Vf,[2,27]),o($Vf,[2,28]),o($Vf,[2,29]),o($Vf,[2,30]),o($Vf,[2,31]),o($Vf,[2,32]),{6:143,7:$VL,8:[1,145],10:9,13:$VM,14:$VN,17:$V5,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,38:[1,140],39:141,40:142,47:144,53:12,54:13,55:17,56:$Vc,79:$Vd,80:$Ve},{8:[1,150],28:[1,146],40:148,43:147,44:149,47:144},{8:$Vu,11:$Vv,12:151,19:$Vw,20:$Vx,22:$Vy,23:$Vz,24:$VA,25:$VB,26:$VC,29:$VD,30:$VE,31:63,32:$VF,34:$VG,35:66,36:$VH,37:$VI,67:55,68:68,69:69,79:$Vd,80:$Ve},{8:[1,152]},o($VQ,[2,99]),o($VQ,[2,100]),o($VQ,[2,102]),{38:[1,153],42:$VV},o($VW,[2,105]),o($VW,[2,106],{49:[1,155]}),o($VX,[2,108],{41:[1,156]}),{8:$Vu,11:$Vv,19:$Vw,20:$Vx,22:$Vy,23:$Vz,24:$VA,25:$VB,26:$VC,29:$VD,30:$VE,31:63,32:$VF,34:$VG,35:66,36:$VH,37:$VI,50:$VR,67:123,68:68,69:69,70:157,71:121,72:122,79:$Vd,80:$Ve},o($VQ,[2,116]),{28:[1,158],42:[1,159]},o($VK,[2,119]),o($VK,[2,120],{49:[1,160]}),o($VY,[2,123],{45:[1,161]}),o($Vl,[2,54]),{8:$V1,10:162,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,56:$Vc,79:$Vd,80:$Ve},{6:163,7:$VL,8:$V1,10:9,13:$VM,14:$VN,17:$V5,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,56:$Vc,79:$Vd,80:$Ve},o($VJ,[2,70]),o($VK,[2,75]),o($VK,[2,77],{58:$Vh,59:$Vi,60:$Vj,61:$Vk}),o($Vg,$Vr),o($Vg,$Vs),o($Vg,$Vt),{8:$VZ,27:164,79:$V_,81:165},o($Vf,[2,33]),{38:[1,168],42:$V$},{41:[1,170],42:$V01},o($VJ,[2,37]),o($V11,[2,46]),o([16,38,42,58,59,60,61],$Vm,{9:$V21,50:$Vn,57:$Vo}),o($Vf,[2,38]),{28:[1,173],42:$V31},{41:[1,175],42:$V01},o($VK,[2,42]),o($VK,$V41,{9:$V21,45:$V51}),o($VP,[2,81]),o($VP,[2,84]),o($VQ,[2,103]),{8:$Vu,11:$Vv,19:$Vw,20:$Vx,22:$Vy,23:$Vz,24:$VA,25:$VB,26:$VC,29:$VD,30:$VE,31:63,32:$VF,34:$VG,35:66,36:$VH,37:$VI,50:$VR,67:123,68:68,69:69,71:177,72:122,79:$Vd,80:$Ve},{8:[1,178]},{73:179,74:180,75:$V61,80:$V71},{42:$VV,51:[1,183]},o($VQ,[2,117]),{8:$VS,77:184,78:128},{8:[1,185]},{8:$Vu,11:$Vv,19:$Vw,20:$Vx,22:$Vy,23:$Vz,24:$VA,25:$VB,26:$VC,29:$VD,30:$VE,31:63,32:$VF,34:$VG,35:66,36:$VH,37:$VI,67:186,68:68,69:69,79:$Vd,80:$Ve},o($VU,[2,79],{58:$Vh,59:$Vi,60:$Vj,61:$Vk}),{51:[1,187]},{28:[1,188],42:[1,189]},o($VK,[2,132]),o($VK,[2,129]),o($VK,[2,130]),o($Vf,[2,34]),{6:190,7:$VL,8:$V1,10:9,13:$VM,14:$VN,17:$V5,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,56:$Vc,79:$Vd,80:$Ve},{6:143,7:$VL,8:$V1,10:9,13:$VM,14:$VN,17:$V5,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,39:191,53:12,54:13,55:17,56:$Vc,79:$Vd,80:$Ve},{8:[1,193],47:192},{6:194,7:$VL,8:$V1,10:9,13:$VM,14:$VN,17:$V5,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,56:$Vc,79:$Vd,80:$Ve},o($Vf,[2,39]),{8:$V81,44:195},{8:$V81,43:197,44:149},{6:199,7:$VL,8:$V1,10:9,13:$VM,14:$VN,17:$V5,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,46:198,53:12,54:13,55:17,56:$Vc,79:$Vd,80:$Ve},o($VW,[2,104]),o($VW,[2,107]),o($VX,[2,109]),o($VX,[2,115],{75:[1,200]}),{74:201,80:$V71},o([38,42,49,51,75],[2,127]),o($VX,[2,110],{41:[1,202]}),o($VK,[2,118]),o($VK,[2,121]),o($VY,[2,122]),o($Vl,[2,62]),o($Vf,[2,24]),{8:$VZ,79:$V_,81:203},o($VJ,[2,36]),{38:[1,204],42:$V$},o($V11,[2,45]),{9:$V21},o($V11,[2,47]),o($VK,[2,41]),o($VK,$V41,{45:$V51}),{28:[1,205],42:$V31},o($VK,[2,43],{41:[1,206]}),o($V91,[2,49]),o($VX,[2,114],{74:207,80:$V71}),o($VX,[2,113]),{73:208,74:180,75:$V61,80:$V71},o($VK,[2,131]),o($Vf,[2,35]),o($Vf,[2,40]),{6:209,7:$VL,8:$V1,10:9,13:$VM,14:$VN,17:$V5,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,56:$Vc,79:$Vd,80:$Ve},o($VX,[2,112]),o($VX,[2,111]),o($V91,[2,48])],
defaultActions: {},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comment */
break;
case 2:return 19
break;
case 3:return 20
break;
case 4:return 49
break;
case 5:return 22
break;
case 6:return 25
break;
case 7:return 24
break;
case 8:return 7
break;
case 9:return 56
break;
case 10:return 29
break;
case 11:return 30
break;
case 12:return 32
break;
case 13:return 11
break;
case 14:return 34
break;
case 15:return 13
break;
case 16:return 23
break;
case 17:return 14
break;
case 18:return 36
break;
case 19:return 50
break;
case 20:return 51
break;
case 21:return 26
break;
case 22:return 28
break;
case 23:return 37
break;
case 24:return 38
break;
case 25:return 66
break;
case 26:return 42
break;
case 27:return 45
break;
case 28:return 41
break;
case 29:return 9
break;
case 30:return 16
break;
case 31:return 75
break;
case 32:return 57
break;
case 33:return 17
break;
case 34:return 58
break;
case 35:return 59
break;
case 36:return 60
break;
case 37:return 61
break;
case 38:return 8
break;
case 39:return 80
break;
case 40:return 79
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:any)/,/^(?:array)/,/^(?:as)/,/^(?:boolean)/,/^(?:enum)/,/^(?:false)/,/^(?:generator)/,/^(?:map)/,/^(?:null)/,/^(?:number)/,/^(?:object)/,/^(?:pattern)/,/^(?:string)/,/^(?:transform)/,/^(?:true)/,/^(?:type)/,/^(?:undefined)/,/^(?:\()/,/^(?:\))/,/^(?:{)/,/^(?:})/,/^(?:\[)/,/^(?:\])/,/^(?:\|)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:=)/,/^(?:<=)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:_)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:[-+]?(0|[1-9]\d*)(\.\d+)?)/,/^(?:"[^"\r\n]*")/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();

export default parser;
