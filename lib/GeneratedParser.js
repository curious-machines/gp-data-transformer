/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,14],$V2=[1,9],$V3=[1,12],$V4=[1,18],$V5=[1,21],$V6=[1,22],$V7=[1,29],$V8=[1,30],$V9=[1,25],$Va=[1,26],$Vb=[1,28],$Vc=[1,27],$Vd=[1,5],$Ve=[1,5,13,21,22,42,46],$Vf=[1,51],$Vg=[1,40],$Vh=[1,46],$Vi=[1,52],$Vj=[1,53],$Vk=[1,35],$Vl=[1,36],$Vm=[1,37],$Vn=[1,38],$Vo=[1,39],$Vp=[1,41],$Vq=[1,43],$Vr=[1,44],$Vs=[1,49],$Vt=[1,50],$Vu=[1,5,13,21,22,24,25,26,27,42,46],$Vv=[1,5,13,21,22,24,25,26,27,31,42,46],$Vw=[1,5,13,21,22,24,25,26,27,31,42,46,55],$Vx=[1,69],$Vy=[1,5,13,21,22,42,46,55],$Vz=[1,81],$VA=[1,86],$VB=[1,96],$VC=[1,99],$VD=[21,42],$VE=[21,46],$VF=[1,107],$VG=[21,22,42],$VH=[21,22,42,55],$VI=[21,46,55],$VJ=[21,22],$VK=[1,127];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"statements":4,";":5,"statement":6,"assignment":7,"transformSequence":8,"LET":9,"IDENTIFIER":10,"=":11,"steps":12,"|>":13,"step":14,"=~":15,"pattern":16,"expression":17,"mathExpression":18,"MAP":19,"(":20,",":21,")":22,"callExpression":23,"+":24,"-":25,"*":26,"/":27,"argumentList":28,"memberExpression":29,"primaryExpression":30,".":31,"integer":32,"boolean":33,"NULL_TYPE":34,"float":35,"string":36,"UNDEFINED_TYPE":37,"$":38,"arrayExpression":39,"objectExpression":40,"[":41,"]":42,"expressionElements":43,"expressionElement":44,"{":45,"}":46,"expressionProperties":47,"expressionProperty":48,":":49,"argument":50,"...":51,"patterns":52,"|":53,"namedPattern":54,"AS":55,"ANY_TYPE":56,"ARRAY_TYPE":57,"BOOLEAN_TYPE":58,"TRUE":59,"FALSE":60,"NUMBER_TYPE":61,"OBJECT_TYPE":62,"STRING_TYPE":63,"arrayPattern":64,"objectPattern":65,"PATTERN":66,"ENUMERATION":67,"patternElements":68,"namedPatternElement":69,"patternElement":70,"range":71,"..":72,"patternProperties":73,"namedPatternProperty":74,"namedProperty":75,"STRING":76,"NUMBER":77,"stringOrIdentifier":78,"identifiers":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:";",9:"LET",10:"IDENTIFIER",11:"=",13:"|>",15:"=~",19:"MAP",20:"(",21:",",22:")",24:"+",25:"-",26:"*",27:"/",31:".",34:"NULL_TYPE",37:"UNDEFINED_TYPE",38:"$",41:"[",42:"]",45:"{",46:"}",49:":",51:"...",53:"|",55:"AS",56:"ANY_TYPE",57:"ARRAY_TYPE",58:"BOOLEAN_TYPE",59:"TRUE",60:"FALSE",61:"NUMBER_TYPE",62:"OBJECT_TYPE",63:"STRING_TYPE",66:"PATTERN",67:"ENUMERATION",72:"..",76:"STRING",77:"NUMBER"},
productions_: [0,[3,1],[4,3],[4,1],[6,1],[6,1],[7,4],[8,1],[12,3],[12,1],[14,2],[14,1],[17,1],[17,6],[18,1],[18,3],[18,3],[18,3],[18,3],[23,3],[23,4],[23,1],[29,1],[29,3],[29,3],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[39,2],[39,3],[43,3],[43,1],[44,1],[44,1],[40,2],[40,3],[47,3],[47,1],[48,3],[48,1],[48,1],[28,3],[28,1],[50,1],[50,2],[50,2],[52,3],[52,1],[54,1],[54,3],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,2],[16,2],[16,1],[64,2],[64,3],[68,3],[68,1],[69,1],[69,3],[70,1],[70,3],[70,3],[70,5],[71,3],[71,2],[71,2],[71,1],[65,2],[65,3],[73,3],[73,1],[74,1],[74,3],[75,3],[75,1],[33,1],[33,1],[36,1],[32,1],[35,1],[78,1],[78,1],[79,3],[79,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0];
break;
case 2: case 8: case 36: case 42: case 47: case 52: case 75: case 89: case 102:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 3: case 9: case 37: case 43: case 48: case 53: case 76: case 90: case 103:
this.$ = [ $$[$0] ];
break;
case 4: case 5: case 10: case 11: case 12: case 14: case 21: case 22: case 32: case 33: case 38: case 39: case 46: case 49: case 91: case 100:
this.$ = $$[$0]
break;
case 6:
this.$ = { type: 'assignment', name: $$[$0-2], value: $$[$0] };
break;
case 7:
this.$ = { type: 'sequence', steps: $$[$0] };
break;
case 13:
this.$ = { type: 'map', value: [ $$[$0-3], $$[$0-1] ] };
break;
case 15:
this.$ = { type: 'add',      left: $$[$0-2], right: $$[$0] };
break;
case 16:
this.$ = { type: 'subtract', left: $$[$0-2], right: $$[$0] };
break;
case 17:
this.$ = { type: 'multiply', left: $$[$0-2], right: $$[$0] };
break;
case 18:
this.$ = { type: 'divide',   left: $$[$0-2], right: $$[$0] };
break;
case 19:
this.$ = { type: 'invoke', name: $$[$0-2], args: [] };
break;
case 20:
this.$ = { type: 'invoke', name: $$[$0-3], args: $$[$0-1] };
break;
case 23:
this.$ = { type: 'get-property', left: $$[$0-2], right: $$[$0] };
break;
case 24:
this.$ = { type: 'get-index', left: $$[$0-2], right: $$[$0] };
break;
case 25:
this.$ = { type: 'boolean',   value: $$[$0] };
break;
case 26:
this.$ = { type: 'boolean',   value: null };
break;
case 27:
this.$ = { type: 'number',    value: $$[$0] };
break;
case 28:
this.$ = { type: 'string',    value: $$[$0] };
break;
case 29:
this.$ = { type: 'undefined', value: undefined };
break;
case 30:
this.$ = { type: 'get-value', name: $$[$0] };
break;
case 31:
this.$ = { type: 'get-structure' };
break;
case 34:
this.$ = { type: 'array', value: [] };
break;
case 35:
this.$ = { type: 'array', value: $$[$0-1] };
break;
case 40:
this.$ = { type: 'object', value: [] };
break;
case 41:
this.$ = { type: 'object', value: $$[$0-1] };
break;
case 44:
this.$ = { type: 'property', name: $$[$0-2], value: $$[$0] };
break;
case 45:
this.$ = { type: 'property', name: $$[$0], value: { type: 'get-value', name: $$[$0] } };
break;
case 50:
this.$ = { type: 'spread', name: $$[$0] };
break;
case 51:
this.$ = { type: 'spread', name: null };
break;
case 54: case 77:
$$[$0].assignTo = null; this.$ = $$[$0];
break;
case 55: case 78: case 92:
$$[$0-2].assignTo = $$[$0]; this.$ = $$[$0-2];
break;
case 56:
this.$ = { type: 'pattern', patternType: 'any', value: null };
break;
case 57:
this.$ = { type: 'pattern', patternType: 'array',     value: null  };
break;
case 58:
this.$ = { type: 'pattern', patternType: 'boolean',   value: null  };
break;
case 59:
this.$ = { type: 'pattern', patternType: 'boolean',   value: true  };
break;
case 60:
this.$ = { type: 'pattern', patternType: 'boolean',   value: false };
break;
case 61:
this.$ = { type: 'pattern', patternType: 'null',      value: null  };
break;
case 62:
this.$ = { type: 'pattern', patternType: 'number',    value: null  };
break;
case 63:
this.$ = { type: 'pattern', patternType: 'number',    value: $$[$0]    };
break;
case 64:
this.$ = { type: 'pattern', patternType: 'object',    value: null  };
break;
case 65:
this.$ = { type: 'pattern', patternType: 'string',    value: null  };
break;
case 66:
this.$ = { type: 'pattern', patternType: 'string',    value: $$[$0]    };
break;
case 67:
this.$ = { type: 'pattern', patternType: 'undefined', value: null  };
break;
case 68: case 69:
this.$ = $$[$0];
break;
case 70:
this.$ = { type: 'pattern-reference', name: $$[$0] };
break;
case 71:
this.$ = { type: 'enumeration-reference', name: $$[$0] };
break;
case 72:
this.$ = { type: 'pattern', patternType: 'reference', value: $$[$0] };
break;
case 73:
this.$ = { type: 'pattern', patternType: 'array-pattern', value: [] };
break;
case 74:
this.$ = { type: 'pattern', patternType: 'array-pattern', value: $$[$0-1] };
break;
case 79:
this.$ = { type: 'element', pattern: $$[$0], range: { type: 'range', start: 1, stop: 1 } };
break;
case 80:
this.$ = { type: 'element', pattern: $$[$0-2], range: $$[$0] };
break;
case 81:
this.$ = { type: 'element-group', elements: $$[$0-1], range: { type: 'range', start: 1, stop: 1 } };
break;
case 82:
this.$ = { type: 'element-group', elements: $$[$0-3], range: $$[$0] };
break;
case 83:
this.$ = { type: 'range', start: $$[$0-2], stop: $$[$0] };
break;
case 84:
this.$ = { type: 'range', start: 0, stop: $$[$0] };
break;
case 85:
this.$ = { type: 'range', start: $$[$0-1], stop: Infinity };
break;
case 86:
this.$ = { type: 'range', start: $$[$0], stop: $$[$0] };
break;
case 87:
this.$ = { type: 'pattern', patternType: 'object', value: null };
break;
case 88:
this.$ = { type: 'pattern', patternType: 'object-pattern', value: $$[$0-1] };
break;
case 93:
this.$ = { type: 'property', name: $$[$0-2], pattern: $$[$0] };
break;
case 94:
this.$ = { type: 'property', name: $$[$0], pattern: { type: 'pattern', patternType: 'any', value: null } };
break;
case 95:
this.$ = true;
break;
case 96:
this.$ = false;
break;
case 97: case 101:
this.$ = $$[$0].substring(1,  $$[$0].length - 1);
break;
case 98:
this.$ = parseInt($$[$0]);
break;
case 99:
this.$ = parseFloat($$[$0]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,10:$V1,12:7,14:8,15:$V2,17:10,18:11,19:$V3,23:13,29:15,30:16,33:17,34:$V4,35:19,36:20,37:$V5,38:$V6,39:23,40:24,41:$V7,45:$V8,59:$V9,60:$Va,76:$Vb,77:$Vc},{1:[3]},{1:[2,1],5:[1,31]},o($Vd,[2,3]),o($Vd,[2,4]),o($Vd,[2,5]),{10:[1,32]},o([1,5,21,22,42,46],[2,7],{13:[1,33]}),o($Ve,[2,9]),{10:$Vf,16:34,34:$Vg,35:42,36:45,37:$Vh,41:$Vi,45:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:47,65:48,66:$Vs,67:$Vt,76:$Vb,77:$Vc},o($Ve,[2,11]),o($Ve,[2,12],{24:[1,54],25:[1,55],26:[1,56],27:[1,57]}),{20:[1,58]},o($Vu,[2,14]),o($Vv,[2,30],{20:[1,59]}),o($Vu,[2,21],{31:[1,60]}),o($Vv,[2,22]),o($Vv,[2,25]),o($Vv,[2,26]),o($Vv,[2,27]),o($Vv,[2,28]),o($Vv,[2,29]),o($Vv,[2,31]),o($Vv,[2,32]),o($Vv,[2,33]),o($Vv,[2,95]),o($Vv,[2,96]),o($Vw,[2,99]),o($Vw,[2,97]),{7:65,9:$V0,10:$V1,17:64,18:11,19:$V3,23:13,29:15,30:16,33:17,34:$V4,35:19,36:20,37:$V5,38:$V6,39:23,40:24,41:$V7,42:[1,61],43:62,44:63,45:$V8,59:$V9,60:$Va,76:$Vb,77:$Vc},{7:70,9:$V0,10:$Vx,46:[1,66],47:67,48:68},{6:71,7:4,8:5,9:$V0,10:$V1,12:7,14:8,15:$V2,17:10,18:11,19:$V3,23:13,29:15,30:16,33:17,34:$V4,35:19,36:20,37:$V5,38:$V6,39:23,40:24,41:$V7,45:$V8,59:$V9,60:$Va,76:$Vb,77:$Vc},{11:[1,72]},{10:$V1,14:73,15:$V2,17:10,18:11,19:$V3,23:13,29:15,30:16,33:17,34:$V4,35:19,36:20,37:$V5,38:$V6,39:23,40:24,41:$V7,45:$V8,59:$V9,60:$Va,76:$Vb,77:$Vc},o($Ve,[2,10]),o($Vy,[2,56]),o($Vy,[2,57]),o($Vy,[2,58]),o($Vy,[2,59]),o($Vy,[2,60]),o($Vy,[2,61]),o($Vy,[2,62]),o($Vy,[2,63]),o($Vy,[2,64]),o($Vy,[2,65]),o($Vy,[2,66]),o($Vy,[2,67]),o($Vy,[2,68]),o($Vy,[2,69]),{10:[1,74]},{10:[1,75]},o($Vy,[2,72]),{10:$Vf,16:80,20:$Vz,34:$Vg,35:42,36:45,37:$Vh,41:$Vi,42:[1,76],45:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:47,65:48,66:$Vs,67:$Vt,68:77,69:78,70:79,76:$Vb,77:$Vc},{10:$VA,46:[1,82],73:83,74:84,75:85},{10:$V1,23:87,29:15,30:16,33:17,34:$V4,35:19,36:20,37:$V5,38:$V6,39:23,40:24,41:$V7,45:$V8,59:$V9,60:$Va,76:$Vb,77:$Vc},{10:$V1,23:88,29:15,30:16,33:17,34:$V4,35:19,36:20,37:$V5,38:$V6,39:23,40:24,41:$V7,45:$V8,59:$V9,60:$Va,76:$Vb,77:$Vc},{10:$V1,23:89,29:15,30:16,33:17,34:$V4,35:19,36:20,37:$V5,38:$V6,39:23,40:24,41:$V7,45:$V8,59:$V9,60:$Va,76:$Vb,77:$Vc},{10:$V1,23:90,29:15,30:16,33:17,34:$V4,35:19,36:20,37:$V5,38:$V6,39:23,40:24,41:$V7,45:$V8,59:$V9,60:$Va,76:$Vb,77:$Vc},{10:$V1,17:91,18:11,19:$V3,23:13,29:15,30:16,33:17,34:$V4,35:19,36:20,37:$V5,38:$V6,39:23,40:24,41:$V7,45:$V8,59:$V9,60:$Va,76:$Vb,77:$Vc},{10:$V1,17:95,18:11,19:$V3,22:[1,92],23:13,28:93,29:15,30:16,33:17,34:$V4,35:19,36:20,37:$V5,38:$V6,39:23,40:24,41:$V7,45:$V8,50:94,51:$VB,59:$V9,60:$Va,76:$Vb,77:$Vc},{10:[1,97],32:98,77:$VC},o($Vv,[2,34]),{21:[1,101],42:[1,100]},o($VD,[2,37]),o($VD,[2,38]),o($VD,[2,39]),o($Vv,[2,40]),{21:[1,103],46:[1,102]},o($VE,[2,43]),o($VE,[2,45],{49:[1,104]}),o($VE,[2,46]),o($Vd,[2,2]),{8:105,10:$V1,12:7,14:8,15:$V2,17:10,18:11,19:$V3,23:13,29:15,30:16,33:17,34:$V4,35:19,36:20,37:$V5,38:$V6,39:23,40:24,41:$V7,45:$V8,59:$V9,60:$Va,76:$Vb,77:$Vc},o($Ve,[2,8]),o($Vy,[2,70]),o($Vy,[2,71]),o($Vy,[2,73]),{21:$VF,42:[1,106]},o($VG,[2,76]),o($VG,[2,77],{55:[1,108]}),o($VH,[2,79],{5:[1,109]}),{10:$Vf,16:80,20:$Vz,34:$Vg,35:42,36:45,37:$Vh,41:$Vi,45:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:47,65:48,66:$Vs,67:$Vt,68:110,69:78,70:79,76:$Vb,77:$Vc},o($Vy,[2,87]),{21:[1,112],46:[1,111]},o($VE,[2,90]),o($VE,[2,91],{55:[1,113]}),o($VI,[2,94],{49:[1,114]}),o($Vu,[2,15]),o($Vu,[2,16]),o($Vu,[2,17]),o($Vu,[2,18]),{21:[1,115]},o($Vu,[2,19]),{21:[1,117],22:[1,116]},o($VJ,[2,48]),o($VJ,[2,49]),{10:[1,118],38:[1,119]},o($Vv,[2,23]),o($Vv,[2,24]),o([1,5,13,21,22,24,25,26,27,31,42,46,55,72],[2,98]),o($Vv,[2,35]),{7:65,9:$V0,10:$V1,17:64,18:11,19:$V3,23:13,29:15,30:16,33:17,34:$V4,35:19,36:20,37:$V5,38:$V6,39:23,40:24,41:$V7,44:120,45:$V8,59:$V9,60:$Va,76:$Vb,77:$Vc},o($Vv,[2,41]),{7:70,9:$V0,10:$Vx,48:121},{10:$V1,17:122,18:11,19:$V3,23:13,29:15,30:16,33:17,34:$V4,35:19,36:20,37:$V5,38:$V6,39:23,40:24,41:$V7,45:$V8,59:$V9,60:$Va,76:$Vb,77:$Vc},o([1,5,21,42,46],[2,6]),o($Vy,[2,74]),{10:$Vf,16:80,20:$Vz,34:$Vg,35:42,36:45,37:$Vh,41:$Vi,45:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:47,65:48,66:$Vs,67:$Vt,69:123,70:79,76:$Vb,77:$Vc},{10:[1,124]},{32:126,71:125,72:$VK,77:$VC},{21:$VF,22:[1,128]},o($Vy,[2,88]),{10:$VA,74:129,75:85},{10:[1,130]},{10:$Vf,16:131,34:$Vg,35:42,36:45,37:$Vh,41:$Vi,45:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:47,65:48,66:$Vs,67:$Vt,76:$Vb,77:$Vc},{8:132,10:$V1,12:7,14:8,15:$V2,17:10,18:11,19:$V3,23:13,29:15,30:16,33:17,34:$V4,35:19,36:20,37:$V5,38:$V6,39:23,40:24,41:$V7,45:$V8,59:$V9,60:$Va,76:$Vb,77:$Vc},o($Vu,[2,20]),{10:$V1,17:95,18:11,19:$V3,23:13,29:15,30:16,33:17,34:$V4,35:19,36:20,37:$V5,38:$V6,39:23,40:24,41:$V7,45:$V8,50:133,51:$VB,59:$V9,60:$Va,76:$Vb,77:$Vc},o($VJ,[2,50]),o($VJ,[2,51]),o($VD,[2,36]),o($VE,[2,42]),o($VE,[2,44]),o($VG,[2,75]),o($VG,[2,78]),o($VH,[2,80]),o($VH,[2,86],{72:[1,134]}),{32:135,77:$VC},o($VH,[2,81],{5:[1,136]}),o($VE,[2,89]),o($VE,[2,92]),o($VI,[2,93]),{22:[1,137]},o($VJ,[2,47]),o($VH,[2,85],{32:138,77:$VC}),o($VH,[2,84]),{32:126,71:139,72:$VK,77:$VC},o($Ve,[2,13]),o($VH,[2,83]),o($VH,[2,82])],
defaultActions: {},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comment */
break;
case 2:return 56
break;
case 3:return 57
break;
case 4:return 55
break;
case 5:return 58
break;
case 6:return 67
break;
case 7:return 60
break;
case 8:return 9
break;
case 9:return 19
break;
case 10:return 34
break;
case 11:return 61
break;
case 12:return 62
break;
case 13:return 63
break;
case 14:return 59
break;
case 15:return 37
break;
case 16:return 77
break;
case 17:return 76
break;
case 18:return 20
break;
case 19:return 22
break;
case 20:return 45
break;
case 21:return 46
break;
case 22:return 41
break;
case 23:return 42
break;
case 24:return 13
break;
case 25:return 53
break;
case 26:return 21
break;
case 27:return 49
break;
case 28:return 5
break;
case 29:return 15
break;
case 30:return 11
break;
case 31:return '<='
break;
case 32:return 51
break;
case 33:return 72
break;
case 34:return 31
break;
case 35:return '_'
break;
case 36:return 24
break;
case 37:return 25
break;
case 38:return 26
break;
case 39:return 27
break;
case 40:return 38
break;
case 41:return 10
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:any\b)/,/^(?:array\b)/,/^(?:as\b)/,/^(?:boolean\b)/,/^(?:enum\b)/,/^(?:false\b)/,/^(?:let\b)/,/^(?:map\b)/,/^(?:null\b)/,/^(?:number\b)/,/^(?:object\b)/,/^(?:string\b)/,/^(?:true\b)/,/^(?:undefined\b)/,/^(?:[-+]?(0|[1-9]\d*)(\.\d+)?)/,/^(?:"[^"\r\n]*")/,/^(?:\()/,/^(?:\))/,/^(?:{)/,/^(?:})/,/^(?:\[)/,/^(?:\])/,/^(?:\|>)/,/^(?:\|)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:=~)/,/^(?:=)/,/^(?:<=)/,/^(?:\.{3})/,/^(?:\.{2})/,/^(?:\.)/,/^(?:_)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\$)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();

export default parser;
