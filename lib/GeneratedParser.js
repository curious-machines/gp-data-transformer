/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,15],$V2=[1,9],$V3=[1,12],$V4=[1,26],$V5=[1,13],$V6=[1,31],$V7=[1,19],$V8=[1,22],$V9=[1,23],$Va=[1,32],$Vb=[1,27],$Vc=[1,28],$Vd=[1,30],$Ve=[1,29],$Vf=[1,5],$Vg=[1,5,13,21,22,36,48],$Vh=[1,53],$Vi=[1,54],$Vj=[1,42],$Vk=[1,48],$Vl=[1,55],$Vm=[1,37],$Vn=[1,38],$Vo=[1,39],$Vp=[1,40],$Vq=[1,41],$Vr=[1,43],$Vs=[1,45],$Vt=[1,46],$Vu=[1,51],$Vv=[1,52],$Vw=[1,5,13,21,22,36,48,51],$Vx=[1,5,13,21,22,26,27,28,29,36,48,51],$Vy=[1,5,13,21,22,26,27,28,29,33,35,36,48,51],$Vz=[1,5,13,21,22,26,27,28,29,33,35,36,48,51,55],$VA=[1,5,13,21,22,36,48,55],$VB=[1,86],$VC=[1,91],$VD=[1,104],$VE=[1,107],$VF=[21,36],$VG=[21,48],$VH=[1,117],$VI=[21,22,36],$VJ=[21,22,36,55],$VK=[21,48,55],$VL=[21,22],$VM=[1,140];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"statements":4,";":5,"statement":6,"assignment":7,"transformSequence":8,"LET":9,"IDENTIFIER":10,"=":11,"steps":12,"|>":13,"step":14,"=~":15,"pattern":16,"expression":17,"mathExpression":18,"MAP":19,"(":20,",":21,")":22,"MATCH":23,"patterns":24,"callExpression":25,"+":26,"-":27,"*":28,"/":29,"argumentList":30,"memberExpression":31,"primaryExpression":32,".":33,"integer":34,"[":35,"]":36,"boolean":37,"NULL_TYPE":38,"float":39,"string":40,"UNDEFINED_TYPE":41,"$":42,"arrayExpression":43,"objectExpression":44,"expressionElements":45,"expressionElement":46,"{":47,"}":48,"expressionProperties":49,"expressionProperty":50,":":51,"argument":52,"...":53,"namedPattern":54,"AS":55,"ANY_TYPE":56,"ARRAY_TYPE":57,"BOOLEAN_TYPE":58,"TRUE":59,"FALSE":60,"NUMBER_TYPE":61,"OBJECT_TYPE":62,"STRING_TYPE":63,"arrayPattern":64,"objectPattern":65,"PATTERN":66,"ENUMERATION":67,"patternElements":68,"namedPatternElement":69,"patternElement":70,"range":71,"..":72,"patternProperties":73,"namedPatternProperty":74,"namedProperty":75,"STRING":76,"NUMBER":77,"stringOrIdentifier":78,"identifiers":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:";",9:"LET",10:"IDENTIFIER",11:"=",13:"|>",15:"=~",19:"MAP",20:"(",21:",",22:")",23:"MATCH",26:"+",27:"-",28:"*",29:"/",33:".",35:"[",36:"]",38:"NULL_TYPE",41:"UNDEFINED_TYPE",42:"$",47:"{",48:"}",51:":",53:"...",55:"AS",56:"ANY_TYPE",57:"ARRAY_TYPE",58:"BOOLEAN_TYPE",59:"TRUE",60:"FALSE",61:"NUMBER_TYPE",62:"OBJECT_TYPE",63:"STRING_TYPE",66:"PATTERN",67:"ENUMERATION",72:"..",76:"STRING",77:"NUMBER"},
productions_: [0,[3,1],[4,3],[4,1],[6,1],[6,1],[7,4],[8,1],[12,3],[12,1],[14,2],[14,1],[17,1],[17,6],[17,4],[18,1],[18,3],[18,3],[18,3],[18,3],[25,3],[25,4],[25,1],[31,1],[31,3],[31,3],[31,4],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,3],[43,2],[43,3],[45,3],[45,1],[46,1],[46,1],[44,2],[44,3],[49,3],[49,1],[50,3],[50,1],[50,1],[30,3],[30,1],[52,1],[52,2],[24,3],[24,1],[54,1],[54,3],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,2],[16,2],[16,1],[64,2],[64,3],[68,3],[68,1],[69,1],[69,3],[70,1],[70,3],[70,3],[70,5],[71,3],[71,2],[71,2],[71,1],[65,2],[65,3],[73,3],[73,1],[74,1],[74,3],[75,3],[75,1],[37,1],[37,1],[40,1],[34,1],[39,1],[78,1],[78,1],[79,3],[79,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0];
break;
case 2: case 8: case 39: case 45: case 50: case 54: case 77: case 91: case 104:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 3: case 9: case 40: case 46: case 51: case 55: case 78: case 92: case 105:
this.$ = [ $$[$0] ];
break;
case 4: case 5: case 10: case 11: case 12: case 15: case 22: case 23: case 34: case 35: case 41: case 42: case 49: case 52: case 93: case 102:
this.$ = $$[$0]
break;
case 6:
this.$ = { type: 'assignment', name: $$[$0-2], value: $$[$0] };
break;
case 7:
this.$ = { type: 'sequence', steps: $$[$0] };
break;
case 13:
this.$ = { type: 'map', value: [ $$[$0-3], $$[$0-1] ] };
break;
case 14:
this.$ = { type: 'match', patterns: $$[$0-1] };
break;
case 16:
this.$ = { type: 'add',      left: $$[$0-2], right: $$[$0] };
break;
case 17:
this.$ = { type: 'subtract', left: $$[$0-2], right: $$[$0] };
break;
case 18:
this.$ = { type: 'multiply', left: $$[$0-2], right: $$[$0] };
break;
case 19:
this.$ = { type: 'divide',   left: $$[$0-2], right: $$[$0] };
break;
case 20:
this.$ = { type: 'invoke', name: $$[$0-2], args: [] };
break;
case 21:
this.$ = { type: 'invoke', name: $$[$0-3], args: $$[$0-1] };
break;
case 24:
this.$ = { type: 'get-property', left: $$[$0-2], right: $$[$0] };
break;
case 25:
this.$ = { type: 'get-index', left: $$[$0-2], right: $$[$0] };
break;
case 26:
this.$ = { type: 'get-index', left: $$[$0-3], right: $$[$0-1] };
break;
case 27:
this.$ = { type: 'boolean',   value: $$[$0] };
break;
case 28:
this.$ = { type: 'boolean',   value: null };
break;
case 29:
this.$ = { type: 'number',    value: $$[$0] };
break;
case 30:
this.$ = { type: 'string',    value: $$[$0] };
break;
case 31:
this.$ = { type: 'undefined', value: undefined };
break;
case 32:
this.$ = { type: 'get-value', name: $$[$0] };
break;
case 33:
this.$ = { type: 'get-structure' };
break;
case 36:
this.$ = $$[$0-1];
break;
case 37:
this.$ = { type: 'array', value: [] };
break;
case 38:
this.$ = { type: 'array', value: $$[$0-1] };
break;
case 43:
this.$ = { type: 'object', value: [] };
break;
case 44:
this.$ = { type: 'object', value: $$[$0-1] };
break;
case 47:
this.$ = { type: 'property', name: $$[$0-2], value: $$[$0] };
break;
case 48:
this.$ = { type: 'property', name: $$[$0], value: null };
break;
case 53:
this.$ = { type: 'spread', expression: $$[$0] };
break;
case 56: case 79:
$$[$0].assignTo = null; this.$ = $$[$0];
break;
case 57: case 80: case 94:
$$[$0-2].assignTo = $$[$0]; this.$ = $$[$0-2];
break;
case 58:
this.$ = { type: 'pattern', patternType: 'any', value: null };
break;
case 59:
this.$ = { type: 'pattern', patternType: 'array',     value: null  };
break;
case 60:
this.$ = { type: 'pattern', patternType: 'boolean',   value: null  };
break;
case 61:
this.$ = { type: 'pattern', patternType: 'boolean',   value: true  };
break;
case 62:
this.$ = { type: 'pattern', patternType: 'boolean',   value: false };
break;
case 63:
this.$ = { type: 'pattern', patternType: 'null',      value: null  };
break;
case 64:
this.$ = { type: 'pattern', patternType: 'number',    value: null  };
break;
case 65:
this.$ = { type: 'pattern', patternType: 'number',    value: $$[$0]    };
break;
case 66:
this.$ = { type: 'pattern', patternType: 'object',    value: null  };
break;
case 67:
this.$ = { type: 'pattern', patternType: 'string',    value: null  };
break;
case 68:
this.$ = { type: 'pattern', patternType: 'string',    value: $$[$0]    };
break;
case 69:
this.$ = { type: 'pattern', patternType: 'undefined', value: null  };
break;
case 70: case 71:
this.$ = $$[$0];
break;
case 72:
this.$ = { type: 'pattern-reference', name: $$[$0] };
break;
case 73:
this.$ = { type: 'enumeration-reference', name: $$[$0] };
break;
case 74:
this.$ = { type: 'pattern', patternType: 'reference', value: $$[$0] };
break;
case 75:
this.$ = { type: 'pattern', patternType: 'array-pattern', value: [] };
break;
case 76:
this.$ = { type: 'pattern', patternType: 'array-pattern', value: $$[$0-1] };
break;
case 81:
this.$ = { type: 'element', pattern: $$[$0], range: { type: 'range', start: 1, stop: 1 } };
break;
case 82:
this.$ = { type: 'element', pattern: $$[$0-2], range: $$[$0] };
break;
case 83:
this.$ = { type: 'element-group', elements: $$[$0-1], range: { type: 'range', start: 1, stop: 1 } };
break;
case 84:
this.$ = { type: 'element-group', elements: $$[$0-3], range: $$[$0] };
break;
case 85:
this.$ = { type: 'range', start: $$[$0-2], stop: $$[$0] };
break;
case 86:
this.$ = { type: 'range', start: 0, stop: $$[$0] };
break;
case 87:
this.$ = { type: 'range', start: $$[$0-1], stop: Infinity };
break;
case 88:
this.$ = { type: 'range', start: $$[$0], stop: $$[$0] };
break;
case 89:
this.$ = { type: 'pattern', patternType: 'object', value: null };
break;
case 90:
this.$ = { type: 'pattern', patternType: 'object-pattern', value: $$[$0-1] };
break;
case 95:
this.$ = { type: 'property', name: $$[$0-2], pattern: $$[$0] };
break;
case 96:
this.$ = { type: 'property', name: $$[$0], pattern: { type: 'pattern', patternType: 'any', value: null } };
break;
case 97:
this.$ = true;
break;
case 98:
this.$ = false;
break;
case 99: case 103:
this.$ = $$[$0].substring(1,  $$[$0].length - 1);
break;
case 100:
this.$ = parseInt($$[$0]);
break;
case 101:
this.$ = parseFloat($$[$0]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,10:$V1,12:7,14:8,15:$V2,17:10,18:11,19:$V3,20:$V4,23:$V5,25:14,31:16,32:17,35:$V6,37:18,38:$V7,39:20,40:21,41:$V8,42:$V9,43:24,44:25,47:$Va,59:$Vb,60:$Vc,76:$Vd,77:$Ve},{1:[3]},{1:[2,1],5:[1,33]},o($Vf,[2,3]),o($Vf,[2,4]),o($Vf,[2,5]),{10:[1,34]},o([1,5,21,22,36,48],[2,7],{13:[1,35]}),o($Vg,[2,9]),{10:$Vh,16:36,35:$Vi,38:$Vj,39:44,40:47,41:$Vk,47:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:49,65:50,66:$Vu,67:$Vv,76:$Vd,77:$Ve},o($Vg,[2,11]),o($Vw,[2,12],{26:[1,56],27:[1,57],28:[1,58],29:[1,59]}),{20:[1,60]},{20:[1,61]},o($Vx,[2,15]),o($Vy,[2,32],{20:[1,62]}),o($Vx,[2,22],{33:[1,63],35:[1,64]}),o($Vy,[2,23]),o($Vy,[2,27]),o($Vy,[2,28]),o($Vy,[2,29]),o($Vy,[2,30]),o($Vy,[2,31]),o($Vy,[2,33]),o($Vy,[2,34]),o($Vy,[2,35]),{10:$V1,17:65,18:11,19:$V3,20:$V4,23:$V5,25:14,31:16,32:17,35:$V6,37:18,38:$V7,39:20,40:21,41:$V8,42:$V9,43:24,44:25,47:$Va,59:$Vb,60:$Vc,76:$Vd,77:$Ve},o($Vy,[2,97]),o($Vy,[2,98]),o($Vz,[2,101]),o($Vz,[2,99]),{7:70,9:$V0,10:$V1,17:69,18:11,19:$V3,20:$V4,23:$V5,25:14,31:16,32:17,35:$V6,36:[1,66],37:18,38:$V7,39:20,40:21,41:$V8,42:$V9,43:24,44:25,45:67,46:68,47:$Va,59:$Vb,60:$Vc,76:$Vd,77:$Ve},{7:75,9:$V0,10:$V1,17:74,18:11,19:$V3,20:$V4,23:$V5,25:14,31:16,32:17,35:$V6,37:18,38:$V7,39:20,40:21,41:$V8,42:$V9,43:24,44:25,47:$Va,48:[1,71],49:72,50:73,59:$Vb,60:$Vc,76:$Vd,77:$Ve},{6:76,7:4,8:5,9:$V0,10:$V1,12:7,14:8,15:$V2,17:10,18:11,19:$V3,20:$V4,23:$V5,25:14,31:16,32:17,35:$V6,37:18,38:$V7,39:20,40:21,41:$V8,42:$V9,43:24,44:25,47:$Va,59:$Vb,60:$Vc,76:$Vd,77:$Ve},{11:[1,77]},{10:$V1,14:78,15:$V2,17:10,18:11,19:$V3,20:$V4,23:$V5,25:14,31:16,32:17,35:$V6,37:18,38:$V7,39:20,40:21,41:$V8,42:$V9,43:24,44:25,47:$Va,59:$Vb,60:$Vc,76:$Vd,77:$Ve},o($Vg,[2,10]),o($VA,[2,58]),o($VA,[2,59]),o($VA,[2,60]),o($VA,[2,61]),o($VA,[2,62]),o($VA,[2,63]),o($VA,[2,64]),o($VA,[2,65]),o($VA,[2,66]),o($VA,[2,67]),o($VA,[2,68]),o($VA,[2,69]),o($VA,[2,70]),o($VA,[2,71]),{10:[1,79]},{10:[1,80]},o($VA,[2,74]),{10:$Vh,16:85,20:$VB,35:$Vi,36:[1,81],38:$Vj,39:44,40:47,41:$Vk,47:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:49,65:50,66:$Vu,67:$Vv,68:82,69:83,70:84,76:$Vd,77:$Ve},{10:$VC,48:[1,87],73:88,74:89,75:90},{10:$V1,20:$V4,25:92,31:16,32:17,35:$V6,37:18,38:$V7,39:20,40:21,41:$V8,42:$V9,43:24,44:25,47:$Va,59:$Vb,60:$Vc,76:$Vd,77:$Ve},{10:$V1,20:$V4,25:93,31:16,32:17,35:$V6,37:18,38:$V7,39:20,40:21,41:$V8,42:$V9,43:24,44:25,47:$Va,59:$Vb,60:$Vc,76:$Vd,77:$Ve},{10:$V1,20:$V4,25:94,31:16,32:17,35:$V6,37:18,38:$V7,39:20,40:21,41:$V8,42:$V9,43:24,44:25,47:$Va,59:$Vb,60:$Vc,76:$Vd,77:$Ve},{10:$V1,20:$V4,25:95,31:16,32:17,35:$V6,37:18,38:$V7,39:20,40:21,41:$V8,42:$V9,43:24,44:25,47:$Va,59:$Vb,60:$Vc,76:$Vd,77:$Ve},{10:$V1,17:96,18:11,19:$V3,20:$V4,23:$V5,25:14,31:16,32:17,35:$V6,37:18,38:$V7,39:20,40:21,41:$V8,42:$V9,43:24,44:25,47:$Va,59:$Vb,60:$Vc,76:$Vd,77:$Ve},{10:$Vh,16:99,24:97,35:$Vi,38:$Vj,39:44,40:47,41:$Vk,47:$Vl,54:98,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:49,65:50,66:$Vu,67:$Vv,76:$Vd,77:$Ve},{10:$V1,17:103,18:11,19:$V3,20:$V4,22:[1,100],23:$V5,25:14,30:101,31:16,32:17,35:$V6,37:18,38:$V7,39:20,40:21,41:$V8,42:$V9,43:24,44:25,47:$Va,52:102,53:$VD,59:$Vb,60:$Vc,76:$Vd,77:$Ve},{10:[1,105],34:106,77:$VE},{34:108,77:$VE},{22:[1,109]},o($Vy,[2,37]),{21:[1,111],36:[1,110]},o($VF,[2,40]),o($VF,[2,41]),o($VF,[2,42]),o($Vy,[2,43]),{21:[1,113],48:[1,112]},o($VG,[2,46]),o($VG,[2,48],{51:[1,114]}),o($VG,[2,49]),o($Vf,[2,2]),{8:115,10:$V1,12:7,14:8,15:$V2,17:10,18:11,19:$V3,20:$V4,23:$V5,25:14,31:16,32:17,35:$V6,37:18,38:$V7,39:20,40:21,41:$V8,42:$V9,43:24,44:25,47:$Va,59:$Vb,60:$Vc,76:$Vd,77:$Ve},o($Vg,[2,8]),o($VA,[2,72]),o($VA,[2,73]),o($VA,[2,75]),{21:$VH,36:[1,116]},o($VI,[2,78]),o($VI,[2,79],{55:[1,118]}),o($VJ,[2,81],{5:[1,119]}),{10:$Vh,16:85,20:$VB,35:$Vi,38:$Vj,39:44,40:47,41:$Vk,47:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:49,65:50,66:$Vu,67:$Vv,68:120,69:83,70:84,76:$Vd,77:$Ve},o($VA,[2,89]),{21:[1,122],48:[1,121]},o($VG,[2,92]),o($VG,[2,93],{55:[1,123]}),o($VK,[2,96],{51:[1,124]}),o($Vx,[2,16]),o($Vx,[2,17]),o($Vx,[2,18]),o($Vx,[2,19]),{21:[1,125]},{21:[1,127],22:[1,126]},o($VL,[2,55]),o($VL,[2,56],{55:[1,128]}),o($Vx,[2,20]),{21:[1,130],22:[1,129]},o($VL,[2,51]),o($VL,[2,52]),{10:$V1,17:131,18:11,19:$V3,20:$V4,23:$V5,25:14,31:16,32:17,35:$V6,37:18,38:$V7,39:20,40:21,41:$V8,42:$V9,43:24,44:25,47:$Va,59:$Vb,60:$Vc,76:$Vd,77:$Ve},o($Vy,[2,24]),o($Vy,[2,25]),o([1,5,13,21,22,26,27,28,29,33,35,36,48,51,55,72],[2,100]),{36:[1,132]},o($Vy,[2,36]),o($Vy,[2,38]),{7:70,9:$V0,10:$V1,17:69,18:11,19:$V3,20:$V4,23:$V5,25:14,31:16,32:17,35:$V6,37:18,38:$V7,39:20,40:21,41:$V8,42:$V9,43:24,44:25,46:133,47:$Va,59:$Vb,60:$Vc,76:$Vd,77:$Ve},o($Vy,[2,44]),{7:75,9:$V0,10:$V1,17:74,18:11,19:$V3,20:$V4,23:$V5,25:14,31:16,32:17,35:$V6,37:18,38:$V7,39:20,40:21,41:$V8,42:$V9,43:24,44:25,47:$Va,50:134,59:$Vb,60:$Vc,76:$Vd,77:$Ve},{8:135,10:$V1,12:7,14:8,15:$V2,17:10,18:11,19:$V3,20:$V4,23:$V5,25:14,31:16,32:17,35:$V6,37:18,38:$V7,39:20,40:21,41:$V8,42:$V9,43:24,44:25,47:$Va,59:$Vb,60:$Vc,76:$Vd,77:$Ve},o([1,5,21,36,48],[2,6]),o($VA,[2,76]),{10:$Vh,16:85,20:$VB,35:$Vi,38:$Vj,39:44,40:47,41:$Vk,47:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:49,65:50,66:$Vu,67:$Vv,69:136,70:84,76:$Vd,77:$Ve},{10:[1,137]},{34:139,71:138,72:$VM,77:$VE},{21:$VH,22:[1,141]},o($VA,[2,90]),{10:$VC,74:142,75:90},{10:[1,143]},{10:$Vh,16:144,35:$Vi,38:$Vj,39:44,40:47,41:$Vk,47:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:49,65:50,66:$Vu,67:$Vv,76:$Vd,77:$Ve},{8:145,10:$V1,12:7,14:8,15:$V2,17:10,18:11,19:$V3,20:$V4,23:$V5,25:14,31:16,32:17,35:$V6,37:18,38:$V7,39:20,40:21,41:$V8,42:$V9,43:24,44:25,47:$Va,59:$Vb,60:$Vc,76:$Vd,77:$Ve},o($Vw,[2,14]),{10:$Vh,16:99,35:$Vi,38:$Vj,39:44,40:47,41:$Vk,47:$Vl,54:146,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:49,65:50,66:$Vu,67:$Vv,76:$Vd,77:$Ve},{10:[1,147]},o($Vx,[2,21]),{10:$V1,17:103,18:11,19:$V3,20:$V4,23:$V5,25:14,31:16,32:17,35:$V6,37:18,38:$V7,39:20,40:21,41:$V8,42:$V9,43:24,44:25,47:$Va,52:148,53:$VD,59:$Vb,60:$Vc,76:$Vd,77:$Ve},o($VL,[2,53]),o($Vy,[2,26]),o($VF,[2,39]),o($VG,[2,45]),o($VG,[2,47]),o($VI,[2,77]),o($VI,[2,80]),o($VJ,[2,82]),o($VJ,[2,88],{72:[1,149]}),{34:150,77:$VE},o($VJ,[2,83],{5:[1,151]}),o($VG,[2,91]),o($VG,[2,94]),o($VK,[2,95]),{22:[1,152]},o($VL,[2,54]),o($VL,[2,57]),o($VL,[2,50]),o($VJ,[2,87],{34:153,77:$VE}),o($VJ,[2,86]),{34:139,71:154,72:$VM,77:$VE},o($Vw,[2,13]),o($VJ,[2,85]),o($VJ,[2,84])],
defaultActions: {},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comment */
break;
case 2:return 56
break;
case 3:return 57
break;
case 4:return 55
break;
case 5:return 58
break;
case 6:return 67
break;
case 7:return 60
break;
case 8:return 9
break;
case 9:return 19
break;
case 10:return 23
break;
case 11:return 38
break;
case 12:return 61
break;
case 13:return 62
break;
case 14:return 63
break;
case 15:return 59
break;
case 16:return 41
break;
case 17:return 77
break;
case 18:return 76
break;
case 19:return 20
break;
case 20:return 22
break;
case 21:return 47
break;
case 22:return 48
break;
case 23:return 35
break;
case 24:return 36
break;
case 25:return 13
break;
case 26:return '|'
break;
case 27:return 21
break;
case 28:return 51
break;
case 29:return 5
break;
case 30:return 15
break;
case 31:return 11
break;
case 32:return '<='
break;
case 33:return 53
break;
case 34:return 72
break;
case 35:return 33
break;
case 36:return '_'
break;
case 37:return 26
break;
case 38:return 27
break;
case 39:return 28
break;
case 40:return 29
break;
case 41:return 42
break;
case 42:return 10
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:any\b)/,/^(?:array\b)/,/^(?:as\b)/,/^(?:boolean\b)/,/^(?:enum\b)/,/^(?:false\b)/,/^(?:let\b)/,/^(?:map\b)/,/^(?:match\b)/,/^(?:null\b)/,/^(?:number\b)/,/^(?:object\b)/,/^(?:string\b)/,/^(?:true\b)/,/^(?:undefined\b)/,/^(?:[-+]?(0|[1-9]\d*)(\.\d+)?)/,/^(?:"[^"\r\n]*")/,/^(?:\()/,/^(?:\))/,/^(?:{)/,/^(?:})/,/^(?:\[)/,/^(?:\])/,/^(?:\|>)/,/^(?:\|)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:=~)/,/^(?:=)/,/^(?:<=)/,/^(?:\.{3})/,/^(?:\.{2})/,/^(?:\.)/,/^(?:_)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\$)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();

export default parser;
