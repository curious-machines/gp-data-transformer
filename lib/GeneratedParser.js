/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,19],$V2=[1,7],$V3=[1,10],$V4=[1,13],$V5=[1,32],$V6=[1,14],$V7=[1,38],$V8=[1,15],$V9=[1,22],$Va=[1,37],$Vb=[1,25],$Vc=[1,28],$Vd=[1,29],$Ve=[1,33],$Vf=[1,34],$Vg=[1,36],$Vh=[1,35],$Vi=[1,5],$Vj=[1,5,14,16,24,28,53],$Vk=[1,61],$Vl=[1,63],$Vm=[1,62],$Vn=[1,50],$Vo=[1,56],$Vp=[1,45],$Vq=[1,46],$Vr=[1,47],$Vs=[1,48],$Vt=[1,49],$Vu=[1,51],$Vv=[1,53],$Vw=[1,54],$Vx=[1,59],$Vy=[1,60],$Vz=[1,5,14,16,24,28,53,66],$VA=[1,69],$VB=[1,70],$VC=[1,71],$VD=[1,72],$VE=[1,73],$VF=[1,74],$VG=[1,5,14,16,24,28,31,32,34,35,36,37,38,39,53,66],$VH=[1,75],$VI=[1,76],$VJ=[1,77],$VK=[1,78],$VL=[1,5,14,16,24,28,31,32,34,35,36,37,38,39,41,42,43,44,53,66],$VM=[1,5,14,16,24,28,31,32,34,35,36,37,38,39,41,42,43,44,50,52,53,66],$VN=[2,49],$VO=[1,5,14,16,24,28,31,32,34,35,36,37,38,39,41,42,43,44,50,52,53,66,70],$VP=[1,5,14,16,24,28,53,70],$VQ=[1,107],$VR=[1,112],$VS=[1,134],$VT=[1,137],$VU=[14,53],$VV=[14,28],$VW=[1,149],$VX=[14,24,53],$VY=[14,24,53,70],$VZ=[14,28,70],$V_=[14,24],$V$=[1,5,14,28,53],$V01=[1,173];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"statements":4,";":5,"statement":6,"assignment":7,"sequence":8,"LET":9,"IDENTIFIER":10,"=":11,"DEF":12,"sequences":13,",":14,"steps":15,"|>":16,"step":17,"=~":18,"namedPattern":19,"expression":20,"booleanExpression":21,"MAP":22,"(":23,")":24,"PATTERNS":25,"{":26,"patterns":27,"}":28,"SEQUENCES":29,"relationalExpression":30,"AND":31,"OR":32,"mathExpression":33,"<":34,"<=":35,"==":36,"!=":37,">=":38,">":39,"callExpression":40,"+":41,"-":42,"*":43,"/":44,"argumentList":45,"unaryExpression":46,"memberExpression":47,"NOT":48,"primaryExpression":49,".":50,"integer":51,"[":52,"]":53,"boolean":54,"NULL_TYPE":55,"float":56,"string":57,"UNDEFINED_TYPE":58,"$":59,"arrayExpression":60,"objectExpression":61,"expressionElements":62,"expressionElement":63,"expressionProperties":64,"expressionProperty":65,":":66,"argument":67,"...":68,"pattern":69,"AS":70,"ANY_TYPE":71,"ARRAY_TYPE":72,"BOOLEAN_TYPE":73,"TRUE":74,"FALSE":75,"NUMBER_TYPE":76,"OBJECT_TYPE":77,"STRING_TYPE":78,"arrayPattern":79,"objectPattern":80,"PATTERN":81,"ENUMERATION":82,"patternElements":83,"namedPatternElement":84,"patternElement":85,"range":86,"..":87,"patternProperties":88,"namedPatternProperty":89,"namedProperty":90,"STRING":91,"NUMBER":92,"stringOrIdentifier":93,"identifiers":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:";",9:"LET",10:"IDENTIFIER",11:"=",12:"DEF",14:",",16:"|>",18:"=~",22:"MAP",23:"(",24:")",25:"PATTERNS",26:"{",28:"}",29:"SEQUENCES",31:"AND",32:"OR",34:"<",35:"<=",36:"==",37:"!=",38:">=",39:">",41:"+",42:"-",43:"*",44:"/",48:"NOT",50:".",52:"[",53:"]",55:"NULL_TYPE",58:"UNDEFINED_TYPE",59:"$",66:":",68:"...",70:"AS",71:"ANY_TYPE",72:"ARRAY_TYPE",73:"BOOLEAN_TYPE",74:"TRUE",75:"FALSE",76:"NUMBER_TYPE",77:"OBJECT_TYPE",78:"STRING_TYPE",81:"PATTERN",82:"ENUMERATION",87:"..",91:"STRING",92:"NUMBER"},
productions_: [0,[3,1],[3,2],[4,3],[4,1],[6,1],[6,1],[7,4],[7,4],[13,3],[13,1],[8,1],[15,3],[15,1],[17,2],[17,1],[20,1],[20,6],[20,4],[20,4],[21,1],[21,3],[21,3],[30,1],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[33,1],[33,3],[33,3],[33,3],[33,3],[40,3],[40,4],[40,1],[46,1],[46,2],[47,1],[47,3],[47,3],[47,4],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,3],[60,2],[60,3],[62,3],[62,1],[63,1],[63,1],[61,2],[61,3],[64,3],[64,1],[65,3],[65,1],[65,1],[45,3],[45,1],[67,1],[67,2],[27,3],[27,1],[19,1],[19,3],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,2],[69,2],[69,1],[79,2],[79,3],[83,3],[83,1],[84,1],[84,3],[85,1],[85,3],[85,3],[85,5],[86,3],[86,2],[86,2],[86,1],[80,2],[80,3],[88,3],[88,1],[89,1],[89,3],[90,3],[90,1],[54,1],[54,1],[57,1],[51,1],[56,1],[93,1],[93,1],[94,3],[94,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0];
break;
case 2:
return $$[$0-1];
break;
case 3: case 9: case 12: case 56: case 62: case 67: case 71: case 94: case 108: case 121:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 4: case 10: case 13: case 57: case 63: case 68: case 72: case 95: case 109: case 122:
this.$ = [ $$[$0] ];
break;
case 5: case 6: case 14: case 15: case 16: case 20: case 23: case 30: case 37: case 38: case 40: case 51: case 52: case 58: case 59: case 66: case 69: case 110: case 119:
this.$ = $$[$0]
break;
case 7:
this.$ = { type: 'assignment', name: $$[$0-2], value: $$[$0] };
break;
case 8:
this.$ = { type: 'def', name: $$[$0-2], value: $$[$0] };
break;
case 11:
this.$ = { type: 'sequence', steps: $$[$0] };
break;
case 17:
this.$ = { type: 'map', value: [ $$[$0-3], $$[$0-1] ] };
break;
case 18:
this.$ = { type: 'patterns', patterns: $$[$0-1] };
break;
case 19:
this.$ = { type: 'sequences', sequences: $$[$0-1] };
break;
case 21:
this.$ = { type: 'and', left: $$[$0-2], right: $$[$0] };
break;
case 22:
this.$ = { type: 'or',  left: $$[$0-2], right: $$[$0] };
break;
case 24:
this.$ = { type: 'less_than',     left: $$[$0-2], right: $$[$0] };
break;
case 25:
this.$ = { type: 'less_equal',    left: $$[$0-2], right: $$[$0] };
break;
case 26:
this.$ = { type: 'equal',         left: $$[$0-2], right: $$[$0] };
break;
case 27:
this.$ = { type: 'not_equal',     left: $$[$0-2], right: $$[$0] };
break;
case 28:
this.$ = { type: 'greater_equal', left: $$[$0-2], right: $$[$0] };
break;
case 29:
this.$ = { type: 'greater_than',  left: $$[$0-2], right: $$[$0] };
break;
case 31:
this.$ = { type: 'add',      left: $$[$0-2], right: $$[$0] };
break;
case 32:
this.$ = { type: 'subtract', left: $$[$0-2], right: $$[$0] };
break;
case 33:
this.$ = { type: 'multiply', left: $$[$0-2], right: $$[$0] };
break;
case 34:
this.$ = { type: 'divide',   left: $$[$0-2], right: $$[$0] };
break;
case 35:
this.$ = { type: 'invoke', name: $$[$0-2], args: [] };
break;
case 36:
this.$ = { type: 'invoke', name: $$[$0-3], args: $$[$0-1] };
break;
case 39:
this.$ = { type: 'not', value: $$[$0] };
break;
case 41:
this.$ = { type: 'get-property', left: $$[$0-2], right: $$[$0] };
break;
case 42:
this.$ = { type: 'get-index', left: $$[$0-2], right: $$[$0] };
break;
case 43:
this.$ = { type: 'get-index', left: $$[$0-3], right: $$[$0-1] };
break;
case 44:
this.$ = { type: 'boolean',   value: $$[$0] };
break;
case 45:
this.$ = { type: 'boolean',   value: null };
break;
case 46:
this.$ = { type: 'number',    value: $$[$0] };
break;
case 47:
this.$ = { type: 'string',    value: $$[$0] };
break;
case 48:
this.$ = { type: 'undefined', value: undefined };
break;
case 49:
this.$ = { type: 'get-value', name: $$[$0] };
break;
case 50:
this.$ = { type: 'get-structure' };
break;
case 53:
this.$ = $$[$0-1];
break;
case 54:
this.$ = { type: 'array', value: [] };
break;
case 55:
this.$ = { type: 'array', value: $$[$0-1] };
break;
case 60:
this.$ = { type: 'object', value: [] };
break;
case 61:
this.$ = { type: 'object', value: $$[$0-1] };
break;
case 64:
this.$ = { type: 'property', name: $$[$0-2], value: $$[$0] };
break;
case 65:
this.$ = { type: 'property', name: $$[$0], value: null };
break;
case 70:
this.$ = { type: 'spread', expression: $$[$0] };
break;
case 73: case 96:
$$[$0].assignTo = null; this.$ = $$[$0];
break;
case 74: case 97: case 111:
$$[$0-2].assignTo = $$[$0]; this.$ = $$[$0-2];
break;
case 75:
this.$ = { type: 'pattern', patternType: 'any', value: null };
break;
case 76:
this.$ = { type: 'pattern', patternType: 'array',     value: null  };
break;
case 77:
this.$ = { type: 'pattern', patternType: 'boolean',   value: null  };
break;
case 78:
this.$ = { type: 'pattern', patternType: 'boolean',   value: true  };
break;
case 79:
this.$ = { type: 'pattern', patternType: 'boolean',   value: false };
break;
case 80:
this.$ = { type: 'pattern', patternType: 'null',      value: null  };
break;
case 81:
this.$ = { type: 'pattern', patternType: 'number',    value: null  };
break;
case 82:
this.$ = { type: 'pattern', patternType: 'number',    value: $$[$0]    };
break;
case 83:
this.$ = { type: 'pattern', patternType: 'object',    value: null  };
break;
case 84:
this.$ = { type: 'pattern', patternType: 'string',    value: null  };
break;
case 85:
this.$ = { type: 'pattern', patternType: 'string',    value: $$[$0]    };
break;
case 86:
this.$ = { type: 'pattern', patternType: 'undefined', value: null  };
break;
case 87: case 88:
this.$ = $$[$0];
break;
case 89:
this.$ = { type: 'pattern-reference', name: $$[$0] };
break;
case 90:
this.$ = { type: 'enumeration-reference', name: $$[$0] };
break;
case 91:
this.$ = { type: 'pattern', patternType: 'reference', value: $$[$0] };
break;
case 92:
this.$ = { type: 'pattern', patternType: 'array-pattern', value: [] };
break;
case 93:
this.$ = { type: 'pattern', patternType: 'array-pattern', value: $$[$0-1] };
break;
case 98:
this.$ = { type: 'element', pattern: $$[$0], range: { type: 'range', start: 1, stop: 1 } };
break;
case 99:
this.$ = { type: 'element', pattern: $$[$0-2], range: $$[$0] };
break;
case 100:
this.$ = { type: 'element-group', elements: $$[$0-1], range: { type: 'range', start: 1, stop: 1 } };
break;
case 101:
this.$ = { type: 'element-group', elements: $$[$0-3], range: $$[$0] };
break;
case 102:
this.$ = { type: 'range', start: $$[$0-2], stop: $$[$0] };
break;
case 103:
this.$ = { type: 'range', start: 0, stop: $$[$0] };
break;
case 104:
this.$ = { type: 'range', start: $$[$0-1], stop: Infinity };
break;
case 105:
this.$ = { type: 'range', start: $$[$0], stop: $$[$0] };
break;
case 106:
this.$ = { type: 'pattern', patternType: 'object', value: null };
break;
case 107:
this.$ = { type: 'pattern', patternType: 'object-pattern', value: $$[$0-1] };
break;
case 112:
this.$ = { type: 'property', name: $$[$0-2], pattern: $$[$0] };
break;
case 113:
this.$ = { type: 'property', name: $$[$0], pattern: { type: 'pattern', patternType: 'any', value: null } };
break;
case 114:
this.$ = true;
break;
case 115:
this.$ = false;
break;
case 116: case 120:
this.$ = $$[$0].substring(1,  $$[$0].length - 1);
break;
case 117:
this.$ = parseInt($$[$0]);
break;
case 118:
this.$ = parseFloat($$[$0]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,10:$V1,12:$V2,15:8,17:9,18:$V3,20:11,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},{1:[3]},{1:[2,1],5:[1,39]},o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),{10:[1,40]},{10:[1,41]},o([1,5,14,24,28,53],[2,11],{16:[1,42]}),o($Vj,[2,13]),{10:$Vk,19:43,26:$Vl,52:$Vm,55:$Vn,56:52,57:55,58:$Vo,69:44,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:57,80:58,81:$Vx,82:$Vy,91:$Vg,92:$Vh},o($Vj,[2,15]),o($Vz,[2,16]),{23:[1,64]},{26:[1,65]},{26:[1,66]},o($Vz,[2,20],{31:[1,67],32:[1,68],34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,39:$VF}),o($VG,[2,23],{41:$VH,42:$VI,43:$VJ,44:$VK}),o($VL,[2,30]),o($VM,$VN,{23:[1,79]}),o($VL,[2,37]),o($VL,[2,38],{50:[1,80],52:[1,81]}),{10:[1,83],23:$V5,26:$V7,46:82,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},o($VM,[2,40]),o($VM,[2,44]),o($VM,[2,45]),o($VM,[2,46]),o($VM,[2,47]),o($VM,[2,48]),o($VM,[2,50]),o($VM,[2,51]),o($VM,[2,52]),{10:$V1,20:84,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},o($VM,[2,114]),o($VM,[2,115]),o($VO,[2,118]),o($VO,[2,116]),{7:89,9:$V0,10:$V1,12:$V2,20:88,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,46:20,47:21,48:$V9,49:23,52:$Va,53:[1,85],54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,62:86,63:87,74:$Ve,75:$Vf,91:$Vg,92:$Vh},{7:94,9:$V0,10:$V1,12:$V2,20:93,21:12,22:$V4,23:$V5,25:$V6,26:$V7,28:[1,90],29:$V8,30:16,33:17,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,64:91,65:92,74:$Ve,75:$Vf,91:$Vg,92:$Vh},{1:[2,2],6:95,7:4,8:5,9:$V0,10:$V1,12:$V2,15:8,17:9,18:$V3,20:11,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},{11:[1,96]},{11:[1,97]},{10:$V1,17:98,18:$V3,20:11,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},o($Vj,[2,14]),o($Vj,[2,73],{70:[1,99]}),o($VP,[2,75]),o($VP,[2,76]),o($VP,[2,77]),o($VP,[2,78]),o($VP,[2,79]),o($VP,[2,80]),o($VP,[2,81]),o($VP,[2,82]),o($VP,[2,83]),o($VP,[2,84]),o($VP,[2,85]),o($VP,[2,86]),o($VP,[2,87]),o($VP,[2,88]),{10:[1,100]},{10:[1,101]},o($VP,[2,91]),{10:$Vk,23:$VQ,26:$Vl,52:$Vm,53:[1,102],55:$Vn,56:52,57:55,58:$Vo,69:106,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:57,80:58,81:$Vx,82:$Vy,83:103,84:104,85:105,91:$Vg,92:$Vh},{10:$VR,28:[1,108],88:109,89:110,90:111},{10:$V1,20:113,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},{10:$Vk,19:115,26:$Vl,27:114,52:$Vm,55:$Vn,56:52,57:55,58:$Vo,69:44,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:57,80:58,81:$Vx,82:$Vy,91:$Vg,92:$Vh},{8:117,10:$V1,13:116,15:8,17:9,18:$V3,20:11,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},{10:$V1,23:$V5,26:$V7,30:118,33:17,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},{10:$V1,23:$V5,26:$V7,30:119,33:17,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},{10:$V1,23:$V5,26:$V7,33:120,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},{10:$V1,23:$V5,26:$V7,33:121,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},{10:$V1,23:$V5,26:$V7,33:122,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},{10:$V1,23:$V5,26:$V7,33:123,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},{10:$V1,23:$V5,26:$V7,33:124,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},{10:$V1,23:$V5,26:$V7,33:125,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},{10:$V1,23:$V5,26:$V7,40:126,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},{10:$V1,23:$V5,26:$V7,40:127,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},{10:$V1,23:$V5,26:$V7,40:128,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},{10:$V1,23:$V5,26:$V7,40:129,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},{10:$V1,20:133,21:12,22:$V4,23:$V5,24:[1,130],25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,45:131,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,67:132,68:$VS,74:$Ve,75:$Vf,91:$Vg,92:$Vh},{10:[1,135],51:136,92:$VT},{51:138,92:$VT},o($VL,[2,39]),o($VM,$VN),{24:[1,139]},o($VM,[2,54]),{14:[1,141],53:[1,140]},o($VU,[2,57]),o($VU,[2,58]),o($VU,[2,59]),o($VM,[2,60]),{14:[1,143],28:[1,142]},o($VV,[2,63]),o($VV,[2,65],{66:[1,144]}),o($VV,[2,66]),o($Vi,[2,3]),{8:145,10:$V1,15:8,17:9,18:$V3,20:11,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},{8:146,10:$V1,15:8,17:9,18:$V3,20:11,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},o($Vj,[2,12]),{10:[1,147]},o($VP,[2,89]),o($VP,[2,90]),o($VP,[2,92]),{14:$VW,53:[1,148]},o($VX,[2,95]),o($VX,[2,96],{70:[1,150]}),o($VY,[2,98],{5:[1,151]}),{10:$Vk,23:$VQ,26:$Vl,52:$Vm,55:$Vn,56:52,57:55,58:$Vo,69:106,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:57,80:58,81:$Vx,82:$Vy,83:152,84:104,85:105,91:$Vg,92:$Vh},o($VP,[2,106]),{14:[1,154],28:[1,153]},o($VV,[2,109]),o($VV,[2,110],{70:[1,155]}),o($VZ,[2,113],{66:[1,156]}),{14:[1,157]},{14:[1,159],28:[1,158]},o($VV,[2,72]),{14:[1,161],28:[1,160]},o($VV,[2,10]),o($Vz,[2,21],{34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,39:$VF}),o($Vz,[2,22],{34:$VA,35:$VB,36:$VC,37:$VD,38:$VE,39:$VF}),o($VG,[2,24],{41:$VH,42:$VI,43:$VJ,44:$VK}),o($VG,[2,25],{41:$VH,42:$VI,43:$VJ,44:$VK}),o($VG,[2,26],{41:$VH,42:$VI,43:$VJ,44:$VK}),o($VG,[2,27],{41:$VH,42:$VI,43:$VJ,44:$VK}),o($VG,[2,28],{41:$VH,42:$VI,43:$VJ,44:$VK}),o($VG,[2,29],{41:$VH,42:$VI,43:$VJ,44:$VK}),o($VL,[2,31]),o($VL,[2,32]),o($VL,[2,33]),o($VL,[2,34]),o($VL,[2,35]),{14:[1,163],24:[1,162]},o($V_,[2,68]),o($V_,[2,69]),{10:$V1,20:164,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},o($VM,[2,41]),o($VM,[2,42]),o([1,5,14,16,24,28,31,32,34,35,36,37,38,39,41,42,43,44,50,52,53,66,70,87],[2,117]),{53:[1,165]},o($VM,[2,53]),o($VM,[2,55]),{7:89,9:$V0,10:$V1,12:$V2,20:88,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,63:166,74:$Ve,75:$Vf,91:$Vg,92:$Vh},o($VM,[2,61]),{7:94,9:$V0,10:$V1,12:$V2,20:93,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,65:167,74:$Ve,75:$Vf,91:$Vg,92:$Vh},{8:168,10:$V1,15:8,17:9,18:$V3,20:11,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},o($V$,[2,7]),o($V$,[2,8]),o($Vj,[2,74]),o($VP,[2,93]),{10:$Vk,23:$VQ,26:$Vl,52:$Vm,55:$Vn,56:52,57:55,58:$Vo,69:106,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:57,80:58,81:$Vx,82:$Vy,84:169,85:105,91:$Vg,92:$Vh},{10:[1,170]},{51:172,86:171,87:$V01,92:$VT},{14:$VW,24:[1,174]},o($VP,[2,107]),{10:$VR,89:175,90:111},{10:[1,176]},{10:$Vk,26:$Vl,52:$Vm,55:$Vn,56:52,57:55,58:$Vo,69:177,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:57,80:58,81:$Vx,82:$Vy,91:$Vg,92:$Vh},{8:178,10:$V1,15:8,17:9,18:$V3,20:11,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},o($Vz,[2,18]),{10:$Vk,19:179,26:$Vl,52:$Vm,55:$Vn,56:52,57:55,58:$Vo,69:44,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:57,80:58,81:$Vx,82:$Vy,91:$Vg,92:$Vh},o($Vz,[2,19]),{8:180,10:$V1,15:8,17:9,18:$V3,20:11,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,74:$Ve,75:$Vf,91:$Vg,92:$Vh},o($VL,[2,36]),{10:$V1,20:133,21:12,22:$V4,23:$V5,25:$V6,26:$V7,29:$V8,30:16,33:17,40:18,46:20,47:21,48:$V9,49:23,52:$Va,54:24,55:$Vb,56:26,57:27,58:$Vc,59:$Vd,60:30,61:31,67:181,68:$VS,74:$Ve,75:$Vf,91:$Vg,92:$Vh},o($V_,[2,70]),o($VM,[2,43]),o($VU,[2,56]),o($VV,[2,62]),o($VV,[2,64]),o($VX,[2,94]),o($VX,[2,97]),o($VY,[2,99]),o($VY,[2,105],{87:[1,182]}),{51:183,92:$VT},o($VY,[2,100],{5:[1,184]}),o($VV,[2,108]),o($VV,[2,111]),o($VZ,[2,112]),{24:[1,185]},o($VV,[2,71]),o($VV,[2,9]),o($V_,[2,67]),o($VY,[2,104],{51:186,92:$VT}),o($VY,[2,103]),{51:172,86:187,87:$V01,92:$VT},o($Vz,[2,17]),o($VY,[2,102]),o($VY,[2,101])],
defaultActions: {},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comment */
break;
case 2:return 31
break;
case 3:return 71
break;
case 4:return 72
break;
case 5:return 70
break;
case 6:return 73
break;
case 7:return 12
break;
case 8:return 82
break;
case 9:return 75
break;
case 10:return 9
break;
case 11:return 22
break;
case 12:return 48
break;
case 13:return 32
break;
case 14:return 25
break;
case 15:return 55
break;
case 16:return 76
break;
case 17:return 77
break;
case 18:return 29
break;
case 19:return 78
break;
case 20:return 74
break;
case 21:return 58
break;
case 22:return 92
break;
case 23:return 91
break;
case 24:return 23
break;
case 25:return 24
break;
case 26:return 26
break;
case 27:return 28
break;
case 28:return 52
break;
case 29:return 53
break;
case 30:return 16
break;
case 31:return '|'
break;
case 32:return 14
break;
case 33:return 66
break;
case 34:return 5
break;
case 35:return 35
break;
case 36:return 38
break;
case 37:return 18
break;
case 38:return 36
break;
case 39:return 37
break;
case 40:return 34
break;
case 41:return 39
break;
case 42:return 11
break;
case 43:return 68
break;
case 44:return 87
break;
case 45:return 50
break;
case 46:return '_'
break;
case 47:return 41
break;
case 48:return 42
break;
case 49:return 43
break;
case 50:return 44
break;
case 51:return 59
break;
case 52:return 10
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:and\b)/,/^(?:any\b)/,/^(?:array\b)/,/^(?:as\b)/,/^(?:boolean\b)/,/^(?:def\b)/,/^(?:enum\b)/,/^(?:false\b)/,/^(?:let\b)/,/^(?:map\b)/,/^(?:not\b)/,/^(?:or\b)/,/^(?:patterns\b)/,/^(?:null\b)/,/^(?:number\b)/,/^(?:object\b)/,/^(?:sequences\b)/,/^(?:string\b)/,/^(?:true\b)/,/^(?:undefined\b)/,/^(?:[-+]?(0|[1-9]\d*)(\.\d+)?)/,/^(?:"[^"\r\n]*")/,/^(?:\()/,/^(?:\))/,/^(?:{)/,/^(?:})/,/^(?:\[)/,/^(?:\])/,/^(?:\|>)/,/^(?:\|)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:<=)/,/^(?:>=)/,/^(?:=~)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\.{3})/,/^(?:\.{2})/,/^(?:\.)/,/^(?:_)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\$)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();

export default parser;
