function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

/* parser generated by jison 0.4.18 */

/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = function () {
  var o = function o(k, v, _o, l) {
    for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {
    }

    return _o;
  },
      $V0 = [1, 5],
      $V1 = [1, 11],
      $V2 = [1, 6],
      $V3 = [1, 7],
      $V4 = [1, 8],
      $V5 = [1, 10],
      $V6 = [1, 20],
      $V7 = [1, 21],
      $V8 = [1, 24],
      $V9 = [1, 14],
      $Va = [1, 18],
      $Vb = [1, 19],
      $Vc = [1, 23],
      $Vd = [1, 22],
      $Ve = [1, 7, 8, 11, 13, 14, 17, 23, 24, 26, 29, 36, 37, 78, 79],
      $Vf = [1, 7, 8, 11, 13, 14, 17, 23, 24, 26, 28, 29, 36, 37, 38, 41, 42, 78, 79],
      $Vg = [1, 31],
      $Vh = [1, 32],
      $Vi = [1, 33],
      $Vj = [1, 34],
      $Vk = [1, 7, 8, 11, 13, 14, 16, 17, 23, 24, 26, 28, 29, 36, 37, 38, 41, 42, 51, 57, 58, 59, 60, 78, 79],
      $Vl = [2, 52],
      $Vm = [1, 36],
      $Vn = [1, 37],
      $Vo = [1, 7, 8, 11, 13, 14, 16, 17, 23, 24, 26, 28, 29, 36, 37, 38, 41, 42, 49, 51, 57, 58, 59, 60, 65, 78, 79],
      $Vp = [1, 45],
      $Vq = [2, 15],
      $Vr = [2, 16],
      $Vs = [2, 17],
      $Vt = [1, 70],
      $Vu = [1, 68],
      $Vv = [1, 54],
      $Vw = [1, 55],
      $Vx = [1, 56],
      $Vy = [1, 57],
      $Vz = [1, 58],
      $VA = [1, 69],
      $VB = [1, 72],
      $VC = [1, 59],
      $VD = [1, 60],
      $VE = [1, 62],
      $VF = [1, 63],
      $VG = [1, 65],
      $VH = [1, 71],
      $VI = [38, 42],
      $VJ = [28, 42],
      $VK = [1, 91],
      $VL = [1, 92],
      $VM = [1, 93],
      $VN = [1, 112],
      $VO = [1, 7, 8, 11, 13, 14, 17, 23, 24, 26, 28, 29, 36, 37, 38, 41, 42, 65, 78, 79],
      $VP = [1, 7, 8, 11, 13, 14, 17, 23, 24, 26, 28, 29, 36, 37, 38, 41, 42, 49, 51, 65, 78, 79],
      $VQ = [1, 121],
      $VR = [1, 126],
      $VS = [1, 7, 8, 11, 13, 14, 16, 17, 23, 24, 26, 28, 29, 36, 37, 38, 41, 42, 51, 57, 58, 78, 79],
      $VT = [42, 51],
      $VU = [1, 150],
      $VV = [38, 42, 51],
      $VW = [38, 42, 49, 51],
      $VX = [28, 42, 49],
      $VY = [1, 161],
      $VZ = [1, 162],
      $V_ = [1, 164],
      $V$ = [1, 166],
      $V01 = [41, 42],
      $V11 = [1, 167],
      $V21 = [1, 169],
      $V31 = [2, 44],
      $V41 = [1, 171],
      $V51 = [1, 176],
      $V61 = [1, 177],
      $V71 = [1, 190],
      $V81 = [28, 41, 42];

  var parser = {
    trace: function trace() {},
    yy: {},
    symbols_: {
      "error": 2,
      "program": 3,
      "statements": 4,
      "statement": 5,
      "transform": 6,
      "GENERATOR": 7,
      "IDENTIFIER": 8,
      "=": 9,
      "generator": 10,
      "PATTERN": 11,
      "namedTypePattern": 12,
      "TRANSFORM": 13,
      "TYPE": 14,
      "typeDefinition": 15,
      "<=": 16,
      "_": 17,
      "typePatterns": 18,
      "ANY_TYPE": 19,
      "ARRAY_TYPE": 20,
      "arrayTypeDefinition": 21,
      "BOOLEAN_TYPE": 22,
      "TRUE": 23,
      "FALSE": 24,
      "ENUMERATION": 25,
      "{": 26,
      "identifiers": 27,
      "}": 28,
      "NULL_TYPE": 29,
      "NUMBER_TYPE": 30,
      "float": 31,
      "OBJECT_TYPE": 32,
      "objectTypeDefinition": 33,
      "STRING_TYPE": 34,
      "string": 35,
      "UNDEFINED_TYPE": 36,
      "[": 37,
      "]": 38,
      "transformElements": 39,
      "assignments": 40,
      ";": 41,
      ",": 42,
      "transformProperties": 43,
      "transformProperty": 44,
      ":": 45,
      "transforms": 46,
      "assignment": 47,
      "namedGenerator": 48,
      "AS": 49,
      "(": 50,
      ")": 51,
      "parameterList": 52,
      "arrayExpression": 53,
      "boolean": 54,
      "objectExpression": 55,
      ".": 56,
      "+": 57,
      "-": 58,
      "*": 59,
      "/": 60,
      "expressionElements": 61,
      "expressionElement": 62,
      "expressionProperties": 63,
      "expressionProperty": 64,
      "|": 65,
      "typePattern": 66,
      "arrayPattern": 67,
      "objectPattern": 68,
      "patternElements": 69,
      "namedPatternElement": 70,
      "patternElement": 71,
      "range": 72,
      "integer": 73,
      "..": 74,
      "patternProperties": 75,
      "namedPatternProperty": 76,
      "namedProperty": 77,
      "STRING": 78,
      "NUMBER": 79,
      "stringOrIdentifier": 80,
      "$accept": 0,
      "$end": 1
    },
    terminals_: {
      2: "error",
      7: "GENERATOR",
      8: "IDENTIFIER",
      9: "=",
      11: "PATTERN",
      13: "TRANSFORM",
      14: "TYPE",
      16: "<=",
      17: "_",
      19: "ANY_TYPE",
      20: "ARRAY_TYPE",
      22: "BOOLEAN_TYPE",
      23: "TRUE",
      24: "FALSE",
      25: "ENUMERATION",
      26: "{",
      28: "}",
      29: "NULL_TYPE",
      30: "NUMBER_TYPE",
      32: "OBJECT_TYPE",
      34: "STRING_TYPE",
      36: "UNDEFINED_TYPE",
      37: "[",
      38: "]",
      41: ";",
      42: ",",
      45: ":",
      49: "AS",
      50: "(",
      51: ")",
      56: ".",
      57: "+",
      58: "-",
      59: "*",
      60: "/",
      65: "|",
      74: "..",
      78: "STRING",
      79: "NUMBER"
    },
    productions_: [0, [3, 1], [4, 2], [4, 1], [5, 1], [5, 4], [5, 4], [5, 4], [5, 4], [6, 1], [6, 3], [6, 3], [6, 3], [6, 3], [6, 1], [6, 2], [6, 2], [6, 2], [15, 1], [15, 1], [15, 1], [15, 1], [15, 1], [15, 1], [15, 4], [15, 1], [15, 1], [15, 1], [15, 1], [15, 1], [15, 1], [15, 1], [15, 1], [21, 2], [21, 3], [21, 5], [39, 3], [39, 1], [33, 2], [33, 3], [33, 5], [43, 3], [43, 1], [44, 3], [44, 1], [40, 3], [40, 1], [47, 3], [46, 3], [46, 1], [48, 1], [48, 3], [10, 1], [10, 3], [10, 4], [10, 1], [10, 1], [10, 1], [10, 1], [10, 1], [10, 1], [10, 1], [10, 3], [10, 3], [10, 3], [10, 3], [10, 3], [53, 2], [53, 3], [61, 3], [61, 1], [62, 1], [55, 2], [55, 3], [63, 3], [63, 1], [64, 3], [64, 1], [52, 3], [52, 1], [18, 3], [18, 1], [12, 1], [12, 3], [66, 1], [66, 1], [66, 1], [66, 1], [66, 1], [66, 1], [66, 1], [66, 1], [66, 1], [66, 1], [66, 1], [66, 1], [66, 1], [66, 1], [66, 2], [66, 2], [66, 1], [67, 2], [67, 3], [69, 3], [69, 1], [70, 1], [70, 3], [71, 1], [71, 3], [71, 3], [71, 5], [72, 3], [72, 2], [72, 2], [72, 1], [68, 2], [68, 3], [75, 3], [75, 1], [76, 1], [76, 3], [77, 3], [77, 1], [54, 1], [54, 1], [35, 1], [73, 1], [31, 1], [80, 1], [80, 1], [27, 3], [27, 1]],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate
    /* action[1] */
    , $$
    /* vstack */
    , _$
    /* lstack */
    ) {
      /* this == yyval */
      var $0 = $$.length - 1;

      switch (yystate) {
        case 1:
          return $$[$0];
          break;

        case 2:
          $$[$0 - 1].push($$[$0]);
          this.$ = $$[$0 - 1];
          break;

        case 3:
        case 37:
        case 42:
        case 46:
        case 49:
        case 70:
        case 75:
        case 79:
        case 81:
        case 104:
        case 118:
        case 131:
          this.$ = [$$[$0]];
          break;

        case 4:
        case 20:
        case 29:
        case 96:
        case 97:
          this.$ = $$[$0];
          break;

        case 5:
          this.$ = {
            type: 'generator-assignment',
            name: $$[$0 - 2],
            value: $$[$0]
          };
          break;

        case 6:
          this.$ = {
            type: 'pattern-assignment',
            name: $$[$0 - 2],
            value: $$[$0]
          };
          break;

        case 7:
          this.$ = {
            type: 'transform-assignment',
            name: $$[$0 - 2],
            value: $$[$0]
          };
          break;

        case 8:
          this.$ = {
            type: 'type-assignment',
            name: $$[$0 - 2],
            value: $$[$0]
          };
          break;

        case 9:
          this.$ = {
            type: 'transform',
            patterns: [{
              type: 'pattern',
              patternType: 'any',
              value: null
            }],
            returnValue: $$[$0]
          };
          break;

        case 10:
          this.$ = {
            type: 'transform',
            patterns: null,
            returnValue: $$[$0 - 2]
          };
          break;

        case 11:
          this.$ = {
            type: 'transform',
            patterns: $$[$0],
            returnValue: $$[$0 - 2]
          };
          break;

        case 12:
          this.$ = {
            type: 'transform',
            patterns: $$[$0],
            returnValue: null
          };
          break;

        case 13:
        case 14:
          this.$ = {
            type: 'transform',
            patterns: null,
            returnValue: null
          };
          break;

        case 15:
          this.$ = {
            type: 'generator-reference',
            name: $$[$0]
          };
          break;

        case 16:
          this.$ = {
            type: 'transform-reference',
            name: $$[$0]
          };
          break;

        case 17:
          this.$ = {
            type: 'type-reference',
            name: $$[$0]
          };
          break;

        case 18:
          this.$ = {
            type: 'type-definition',
            definition: 'any',
            value: null
          };
          break;

        case 19:
          this.$ = {
            type: 'type-definition',
            definition: 'array',
            value: null
          };
          break;

        case 21:
          this.$ = {
            type: 'type-definition',
            definition: 'boolean',
            value: null
          };
          break;

        case 22:
          this.$ = {
            type: 'type-definition',
            definition: 'boolean',
            value: true
          };
          break;

        case 23:
          this.$ = {
            type: 'type-definition',
            definition: 'boolean',
            value: false
          };
          break;

        case 24:
          this.$ = {
            type: 'type-definition',
            definition: 'enumeration',
            value: $$[$0 - 1]
          };
          break;

        case 25:
          this.$ = {
            type: 'type-definition',
            definition: 'null',
            value: null
          };
          break;

        case 26:
          this.$ = {
            type: 'type-definition',
            definition: 'number',
            value: null
          };
          break;

        case 27:
          this.$ = {
            type: 'type-definition',
            definition: 'number',
            value: $$[$0]
          };
          break;

        case 28:
          this.$ = {
            type: 'type-definition',
            definition: 'object',
            value: null
          };
          break;

        case 30:
          this.$ = {
            type: 'type-definition',
            definition: 'string',
            value: null
          };
          break;

        case 31:
          this.$ = {
            type: 'type-definition',
            definition: 'string',
            value: $$[$0]
          };
          break;

        case 32:
          this.$ = {
            type: 'type-definition',
            definition: 'undefined',
            value: null
          };
          break;

        case 33:
          this.$ = {
            type: 'type-definition',
            definition: 'array',
            value: []
          };
          break;

        case 34:
          this.$ = {
            type: 'type-definition',
            definition: 'array',
            value: $$[$0 - 1]
          };
          break;

        case 35:
          this.$ = {
            type: 'type-definition',
            definition: 'array',
            value: $$[$0 - 3].concat($$[$0 - 1])
          };
          break;

        case 36:
        case 41:
        case 45:
        case 48:
        case 69:
        case 74:
        case 78:
        case 80:
        case 103:
        case 117:
        case 130:
          $$[$0 - 2].push($$[$0]);
          this.$ = $$[$0 - 2];
          break;

        case 38:
          this.$ = {
            type: 'type-definition',
            definition: 'object',
            value: []
          };
          break;

        case 39:
          this.$ = {
            type: 'type-definition',
            definition: 'object',
            value: $$[$0 - 1]
          };
          break;

        case 40:
          this.$ = {
            type: 'type-definition',
            definition: 'object',
            value: $$[$0 - 3].concat($$[$0 - 1])
          };
          break;

        case 43:
          this.$ = {
            type: 'type-property',
            name: $$[$0 - 2],
            value: $$[$0]
          };
          break;

        case 44:
          this.$ = {
            type: 'type-property',
            name: $$[$0],
            value: null
          };
          break;

        case 47:
          this.$ = {
            type: 'assignment',
            name: $$[$0 - 2],
            value: $$[$0]
          };
          break;

        case 50:
        case 82:
        case 105:
          $$[$0].assignTo = null;
          this.$ = $$[$0];
          break;

        case 51:
        case 83:
        case 106:
        case 120:
          $$[$0 - 2].assignTo = $$[$0];
          this.$ = $$[$0 - 2];
          break;

        case 52:
          this.$ = {
            type: 'generator',
            expression: {
              type: 'get-value',
              name: $$[$0]
            }
          };
          break;

        case 53:
          this.$ = {
            type: 'generator',
            expression: {
              type: 'invoke',
              name: $$[$0 - 2],
              args: []
            }
          };
          break;

        case 54:
          this.$ = {
            type: 'generator',
            expression: {
              type: 'invoke',
              name: $$[$0 - 3],
              args: $$[$0 - 1]
            }
          };
          break;

        case 55:
        case 60:
          this.$ = {
            type: 'generator',
            expression: $$[$0]
          };
          break;

        case 56:
          this.$ = {
            type: 'generator',
            expression: {
              type: 'boolean',
              value: $$[$0]
            }
          };
          break;

        case 57:
          this.$ = {
            type: 'generator',
            expression: {
              type: 'boolean',
              value: null
            }
          };
          break;

        case 58:
          this.$ = {
            type: 'generator',
            expression: {
              type: 'number',
              value: $$[$0]
            }
          };
          break;

        case 59:
          this.$ = {
            type: 'generator',
            expression: {
              type: 'string',
              value: $$[$0]
            }
          };
          break;

        case 61:
          this.$ = {
            type: 'generator',
            expression: {
              type: 'string',
              value: undefined
            }
          };
          break;

        case 62:
          this.$ = {
            type: 'generator',
            expression: {
              type: 'get-property',
              left: {
                type: 'get-value',
                name: $$[$0 - 2]
              },
              right: $$[$0]
            }
          };
          break;

        case 63:
          this.$ = {
            type: 'generator',
            expression: {
              type: 'add',
              left: $$[$0 - 2],
              right: $$[$0]
            }
          };
          break;

        case 64:
          this.$ = {
            type: 'generator',
            expression: {
              type: 'subtract',
              left: $$[$0 - 2],
              right: $$[$0]
            }
          };
          break;

        case 65:
          this.$ = {
            type: 'generator',
            expression: {
              type: 'multiply',
              left: $$[$0 - 2],
              right: $$[$0]
            }
          };
          break;

        case 66:
          this.$ = {
            type: 'generator',
            expression: {
              type: 'divide',
              left: $$[$0 - 2],
              right: $$[$0]
            }
          };
          break;

        case 67:
          this.$ = {
            type: 'array',
            value: []
          };
          break;

        case 68:
          this.$ = {
            type: 'array',
            value: $$[$0 - 1]
          };
          break;

        case 71:
        case 119:
        case 128:
          this.$ = $$[$0];
          break;

        case 72:
          this.$ = {
            type: 'object',
            value: []
          };
          break;

        case 73:
          this.$ = {
            type: 'object',
            value: $$[$0 - 1]
          };
          break;

        case 76:
          $$[$0].name = $$[$0 - 2];
          this.$ = $$[$0];
          break;

        case 77:
          this.$ = {
            type: 'generator',
            name: $$[$0],
            expression: {
              type: 'get-value',
              name: $$[$0]
            }
          };
          break;

        case 84:
          this.$ = {
            type: 'pattern',
            patternType: 'any',
            value: null
          };
          break;

        case 85:
          this.$ = {
            type: 'pattern',
            patternType: 'array',
            value: null
          };
          break;

        case 86:
          this.$ = {
            type: 'pattern',
            patternType: 'boolean',
            value: null
          };
          break;

        case 87:
          this.$ = {
            type: 'pattern',
            patternType: 'boolean',
            value: true
          };
          break;

        case 88:
          this.$ = {
            type: 'pattern',
            patternType: 'boolean',
            value: false
          };
          break;

        case 89:
          this.$ = {
            type: 'pattern',
            patternType: 'null',
            value: null
          };
          break;

        case 90:
          this.$ = {
            type: 'pattern',
            patternType: 'number',
            value: null
          };
          break;

        case 91:
          this.$ = {
            type: 'pattern',
            patternType: 'number',
            value: $$[$0]
          };
          break;

        case 92:
          this.$ = {
            type: 'pattern',
            patternType: 'object',
            value: null
          };
          break;

        case 93:
          this.$ = {
            type: 'pattern',
            patternType: 'string',
            value: null
          };
          break;

        case 94:
          this.$ = {
            type: 'pattern',
            patternType: 'string',
            value: $$[$0]
          };
          break;

        case 95:
          this.$ = {
            type: 'pattern',
            patternType: 'undefined',
            value: null
          };
          break;

        case 98:
          this.$ = {
            type: 'pattern-reference',
            name: $$[$0]
          };
          break;

        case 99:
          this.$ = {
            type: 'enumeration-reference',
            name: $$[$0]
          };
          break;

        case 100:
          this.$ = {
            type: 'pattern',
            patternType: 'reference',
            value: $$[$0]
          };
          break;

        case 101:
          this.$ = {
            type: 'pattern',
            patternType: 'array-pattern',
            value: []
          };
          break;

        case 102:
          this.$ = {
            type: 'pattern',
            patternType: 'array-pattern',
            value: $$[$0 - 1]
          };
          break;

        case 107:
          this.$ = {
            type: 'element',
            pattern: $$[$0],
            range: {
              type: 'range',
              start: 1,
              stop: 1
            }
          };
          break;

        case 108:
          this.$ = {
            type: 'element',
            pattern: $$[$0 - 2],
            range: $$[$0]
          };
          break;

        case 109:
          this.$ = {
            type: 'element-group',
            elements: $$[$0 - 1],
            range: {
              type: 'range',
              start: 1,
              stop: 1
            }
          };
          break;

        case 110:
          this.$ = {
            type: 'element-group',
            elements: $$[$0 - 3],
            range: $$[$0]
          };
          break;

        case 111:
          this.$ = {
            type: 'range',
            start: $$[$0 - 2],
            stop: $$[$0]
          };
          break;

        case 112:
          this.$ = {
            type: 'range',
            start: 0,
            stop: $$[$0]
          };
          break;

        case 113:
          this.$ = {
            type: 'range',
            start: $$[$0 - 1],
            stop: Infinity
          };
          break;

        case 114:
          this.$ = {
            type: 'range',
            start: $$[$0],
            stop: $$[$0]
          };
          break;

        case 115:
          this.$ = {
            type: 'pattern',
            patternType: 'object',
            value: null
          };
          break;

        case 116:
          this.$ = {
            type: 'pattern',
            patternType: 'object-pattern',
            value: $$[$0 - 1]
          };
          break;

        case 121:
          this.$ = {
            type: 'property',
            name: $$[$0 - 2],
            pattern: $$[$0]
          };
          break;

        case 122:
          this.$ = {
            type: 'property',
            name: $$[$0],
            pattern: {
              type: 'pattern',
              patternType: 'any',
              value: null
            }
          };
          break;

        case 123:
          this.$ = true;
          break;

        case 124:
          this.$ = false;
          break;

        case 125:
        case 129:
          this.$ = $$[$0].substring(1, $$[$0].length - 1);
          break;

        case 126:
          this.$ = parseInt($$[$0]);
          break;

        case 127:
          this.$ = parseFloat($$[$0]);
          break;
      }
    },
    table: [{
      3: 1,
      4: 2,
      5: 3,
      6: 4,
      7: $V0,
      8: $V1,
      10: 9,
      11: $V2,
      13: $V3,
      14: $V4,
      17: $V5,
      23: $V6,
      24: $V7,
      26: $V8,
      29: $V9,
      31: 15,
      35: 16,
      36: $Va,
      37: $Vb,
      53: 12,
      54: 13,
      55: 17,
      78: $Vc,
      79: $Vd
    }, {
      1: [3]
    }, {
      1: [2, 1],
      5: 25,
      6: 4,
      7: $V0,
      8: $V1,
      10: 9,
      11: $V2,
      13: $V3,
      14: $V4,
      17: $V5,
      23: $V6,
      24: $V7,
      26: $V8,
      29: $V9,
      31: 15,
      35: 16,
      36: $Va,
      37: $Vb,
      53: 12,
      54: 13,
      55: 17,
      78: $Vc,
      79: $Vd
    }, o($Ve, [2, 3]), o($Ve, [2, 4]), {
      8: [1, 26]
    }, {
      8: [1, 27]
    }, {
      8: [1, 28]
    }, {
      8: [1, 29]
    }, o($Vf, [2, 9], {
      16: [1, 30],
      57: $Vg,
      58: $Vh,
      59: $Vi,
      60: $Vj
    }), o($Vf, [2, 14], {
      16: [1, 35]
    }), o($Vk, $Vl, {
      50: $Vm,
      56: $Vn
    }), o($Vk, [2, 55]), o($Vk, [2, 56]), o($Vk, [2, 57]), o($Vk, [2, 58]), o($Vk, [2, 59]), o($Vk, [2, 60]), o($Vk, [2, 61]), {
      8: $V1,
      10: 41,
      23: $V6,
      24: $V7,
      26: $V8,
      29: $V9,
      31: 15,
      35: 16,
      36: $Va,
      37: $Vb,
      38: [1, 38],
      53: 12,
      54: 13,
      55: 17,
      61: 39,
      62: 40,
      78: $Vc,
      79: $Vd
    }, o($Vk, [2, 123]), o($Vk, [2, 124]), o($Vo, [2, 127]), o($Vo, [2, 125]), {
      8: $Vp,
      28: [1, 42],
      63: 43,
      64: 44
    }, o($Ve, [2, 2]), o($Ve, $Vq, {
      9: [1, 46]
    }), {
      9: [1, 47]
    }, o($Ve, $Vr, {
      9: [1, 48]
    }), o($Ve, $Vs, {
      9: [1, 49]
    }), {
      8: $Vt,
      11: $Vu,
      12: 52,
      17: [1, 50],
      18: 51,
      19: $Vv,
      20: $Vw,
      22: $Vx,
      23: $Vy,
      24: $Vz,
      25: $VA,
      26: $VB,
      29: $VC,
      30: $VD,
      31: 61,
      32: $VE,
      34: $VF,
      35: 64,
      36: $VG,
      37: $VH,
      66: 53,
      67: 66,
      68: 67,
      78: $Vc,
      79: $Vd
    }, {
      8: $V1,
      10: 73,
      23: $V6,
      24: $V7,
      26: $V8,
      29: $V9,
      31: 15,
      35: 16,
      36: $Va,
      37: $Vb,
      53: 12,
      54: 13,
      55: 17,
      78: $Vc,
      79: $Vd
    }, {
      8: $V1,
      10: 74,
      23: $V6,
      24: $V7,
      26: $V8,
      29: $V9,
      31: 15,
      35: 16,
      36: $Va,
      37: $Vb,
      53: 12,
      54: 13,
      55: 17,
      78: $Vc,
      79: $Vd
    }, {
      8: $V1,
      10: 75,
      23: $V6,
      24: $V7,
      26: $V8,
      29: $V9,
      31: 15,
      35: 16,
      36: $Va,
      37: $Vb,
      53: 12,
      54: 13,
      55: 17,
      78: $Vc,
      79: $Vd
    }, {
      8: $V1,
      10: 76,
      23: $V6,
      24: $V7,
      26: $V8,
      29: $V9,
      31: 15,
      35: 16,
      36: $Va,
      37: $Vb,
      53: 12,
      54: 13,
      55: 17,
      78: $Vc,
      79: $Vd
    }, {
      8: $Vt,
      11: $Vu,
      12: 52,
      17: [1, 78],
      18: 77,
      19: $Vv,
      20: $Vw,
      22: $Vx,
      23: $Vy,
      24: $Vz,
      25: $VA,
      26: $VB,
      29: $VC,
      30: $VD,
      31: 61,
      32: $VE,
      34: $VF,
      35: 64,
      36: $VG,
      37: $VH,
      66: 53,
      67: 66,
      68: 67,
      78: $Vc,
      79: $Vd
    }, {
      8: $V1,
      10: 81,
      23: $V6,
      24: $V7,
      26: $V8,
      29: $V9,
      31: 15,
      35: 16,
      36: $Va,
      37: $Vb,
      51: [1, 79],
      52: 80,
      53: 12,
      54: 13,
      55: 17,
      78: $Vc,
      79: $Vd
    }, {
      8: [1, 82]
    }, o($Vk, [2, 67]), {
      38: [1, 83],
      42: [1, 84]
    }, o($VI, [2, 70]), o($VI, [2, 71], {
      57: $Vg,
      58: $Vh,
      59: $Vi,
      60: $Vj
    }), o($Vk, [2, 72]), {
      28: [1, 85],
      42: [1, 86]
    }, o($VJ, [2, 75]), o($VJ, [2, 77], {
      45: [1, 87]
    }), {
      8: $V1,
      10: 88,
      23: $V6,
      24: $V7,
      26: $V8,
      29: $V9,
      31: 15,
      35: 16,
      36: $Va,
      37: $Vb,
      53: 12,
      54: 13,
      55: 17,
      78: $Vc,
      79: $Vd
    }, {
      8: $Vt,
      11: $Vu,
      12: 89,
      19: $Vv,
      20: $Vw,
      22: $Vx,
      23: $Vy,
      24: $Vz,
      25: $VA,
      26: $VB,
      29: $VC,
      30: $VD,
      31: 61,
      32: $VE,
      34: $VF,
      35: 64,
      36: $VG,
      37: $VH,
      66: 53,
      67: 66,
      68: 67,
      78: $Vc,
      79: $Vd
    }, {
      6: 90,
      7: $VK,
      8: $V1,
      10: 9,
      13: $VL,
      14: $VM,
      17: $V5,
      23: $V6,
      24: $V7,
      26: $V8,
      29: $V9,
      31: 15,
      35: 16,
      36: $Va,
      37: $Vb,
      53: 12,
      54: 13,
      55: 17,
      78: $Vc,
      79: $Vd
    }, {
      15: 94,
      19: [1, 95],
      20: [1, 96],
      21: 97,
      22: [1, 98],
      23: [1, 99],
      24: [1, 100],
      25: [1, 101],
      26: [1, 111],
      29: [1, 102],
      30: [1, 103],
      31: 104,
      32: [1, 105],
      33: 106,
      34: [1, 107],
      35: 108,
      36: [1, 109],
      37: [1, 110],
      78: $Vc,
      79: $Vd
    }, o($Vf, [2, 10]), o($Vf, [2, 11], {
      65: $VN
    }), o($VO, [2, 81]), o($VO, [2, 82], {
      49: [1, 113]
    }), o($VP, [2, 84]), o($VP, [2, 85]), o($VP, [2, 86]), o($VP, [2, 87]), o($VP, [2, 88]), o($VP, [2, 89]), o($VP, [2, 90]), o($VP, [2, 91]), o($VP, [2, 92]), o($VP, [2, 93]), o($VP, [2, 94]), o($VP, [2, 95]), o($VP, [2, 96]), o($VP, [2, 97]), {
      8: [1, 114]
    }, {
      8: [1, 115]
    }, o($VP, [2, 100]), {
      8: $Vt,
      11: $Vu,
      19: $Vv,
      20: $Vw,
      22: $Vx,
      23: $Vy,
      24: $Vz,
      25: $VA,
      26: $VB,
      29: $VC,
      30: $VD,
      31: 61,
      32: $VE,
      34: $VF,
      35: 64,
      36: $VG,
      37: $VH,
      38: [1, 116],
      50: $VQ,
      66: 120,
      67: 66,
      68: 67,
      69: 117,
      70: 118,
      71: 119,
      78: $Vc,
      79: $Vd
    }, {
      8: $VR,
      28: [1, 122],
      75: 123,
      76: 124,
      77: 125
    }, o($VS, [2, 63], {
      59: $Vi,
      60: $Vj
    }), o($VS, [2, 64], {
      59: $Vi,
      60: $Vj
    }), o($Vk, [2, 65]), o($Vk, [2, 66]), o($Vf, [2, 12], {
      65: $VN
    }), o($Vf, [2, 13]), o($Vk, [2, 53]), {
      42: [1, 128],
      51: [1, 127]
    }, o($VT, [2, 79], {
      57: $Vg,
      58: $Vh,
      59: $Vi,
      60: $Vj
    }), o($Vk, [2, 62]), o($Vk, [2, 68]), {
      8: $V1,
      10: 41,
      23: $V6,
      24: $V7,
      26: $V8,
      29: $V9,
      31: 15,
      35: 16,
      36: $Va,
      37: $Vb,
      53: 12,
      54: 13,
      55: 17,
      62: 129,
      78: $Vc,
      79: $Vd
    }, o($Vk, [2, 73]), {
      8: $Vp,
      64: 130
    }, {
      8: $V1,
      10: 131,
      23: $V6,
      24: $V7,
      26: $V8,
      29: $V9,
      31: 15,
      35: 16,
      36: $Va,
      37: $Vb,
      53: 12,
      54: 13,
      55: 17,
      78: $Vc,
      79: $Vd
    }, o($Ve, [2, 5], {
      57: $Vg,
      58: $Vh,
      59: $Vi,
      60: $Vj
    }), o($Ve, [2, 6]), o($Ve, [2, 7]), {
      8: [1, 132]
    }, {
      8: [1, 133]
    }, {
      8: [1, 134]
    }, o($Ve, [2, 8]), o($Ve, [2, 18]), o($Ve, [2, 19]), o($Ve, [2, 20]), o($Ve, [2, 21]), o($Ve, [2, 22]), o($Ve, [2, 23]), {
      26: [1, 135]
    }, o($Ve, [2, 25]), o($Ve, [2, 26]), o($Ve, [2, 27]), o($Ve, [2, 28]), o($Ve, [2, 29]), o($Ve, [2, 30]), o($Ve, [2, 31]), o($Ve, [2, 32]), {
      6: 139,
      7: $VK,
      8: [1, 141],
      10: 9,
      13: $VL,
      14: $VM,
      17: $V5,
      23: $V6,
      24: $V7,
      26: $V8,
      29: $V9,
      31: 15,
      35: 16,
      36: $Va,
      37: $Vb,
      38: [1, 136],
      39: 137,
      40: 138,
      47: 140,
      53: 12,
      54: 13,
      55: 17,
      78: $Vc,
      79: $Vd
    }, {
      8: [1, 146],
      28: [1, 142],
      40: 144,
      43: 143,
      44: 145,
      47: 140
    }, {
      8: $Vt,
      11: $Vu,
      12: 147,
      19: $Vv,
      20: $Vw,
      22: $Vx,
      23: $Vy,
      24: $Vz,
      25: $VA,
      26: $VB,
      29: $VC,
      30: $VD,
      31: 61,
      32: $VE,
      34: $VF,
      35: 64,
      36: $VG,
      37: $VH,
      66: 53,
      67: 66,
      68: 67,
      78: $Vc,
      79: $Vd
    }, {
      8: [1, 148]
    }, o($VP, [2, 98]), o($VP, [2, 99]), o($VP, [2, 101]), {
      38: [1, 149],
      42: $VU
    }, o($VV, [2, 104]), o($VV, [2, 105], {
      49: [1, 151]
    }), o($VW, [2, 107], {
      41: [1, 152]
    }), {
      8: $Vt,
      11: $Vu,
      19: $Vv,
      20: $Vw,
      22: $Vx,
      23: $Vy,
      24: $Vz,
      25: $VA,
      26: $VB,
      29: $VC,
      30: $VD,
      31: 61,
      32: $VE,
      34: $VF,
      35: 64,
      36: $VG,
      37: $VH,
      50: $VQ,
      66: 120,
      67: 66,
      68: 67,
      69: 153,
      70: 118,
      71: 119,
      78: $Vc,
      79: $Vd
    }, o($VP, [2, 115]), {
      28: [1, 154],
      42: [1, 155]
    }, o($VJ, [2, 118]), o($VJ, [2, 119], {
      49: [1, 156]
    }), o($VX, [2, 122], {
      45: [1, 157]
    }), o($Vk, [2, 54]), {
      8: $V1,
      10: 158,
      23: $V6,
      24: $V7,
      26: $V8,
      29: $V9,
      31: 15,
      35: 16,
      36: $Va,
      37: $Vb,
      53: 12,
      54: 13,
      55: 17,
      78: $Vc,
      79: $Vd
    }, o($VI, [2, 69]), o($VJ, [2, 74]), o($VJ, [2, 76], {
      57: $Vg,
      58: $Vh,
      59: $Vi,
      60: $Vj
    }), o($Vf, $Vq), o($Vf, $Vr), o($Vf, $Vs), {
      8: $VY,
      27: 159,
      78: $VZ,
      80: 160
    }, o($Ve, [2, 33]), {
      38: [1, 163],
      42: $V_
    }, {
      41: [1, 165],
      42: $V$
    }, o($VI, [2, 37]), o($V01, [2, 46]), o([16, 38, 42, 57, 58, 59, 60], $Vl, {
      9: $V11,
      50: $Vm,
      56: $Vn
    }), o($Ve, [2, 38]), {
      28: [1, 168],
      42: $V21
    }, {
      41: [1, 170],
      42: $V$
    }, o($VJ, [2, 42]), o($VJ, $V31, {
      9: $V11,
      45: $V41
    }), o($VO, [2, 80]), o($VO, [2, 83]), o($VP, [2, 102]), {
      8: $Vt,
      11: $Vu,
      19: $Vv,
      20: $Vw,
      22: $Vx,
      23: $Vy,
      24: $Vz,
      25: $VA,
      26: $VB,
      29: $VC,
      30: $VD,
      31: 61,
      32: $VE,
      34: $VF,
      35: 64,
      36: $VG,
      37: $VH,
      50: $VQ,
      66: 120,
      67: 66,
      68: 67,
      70: 172,
      71: 119,
      78: $Vc,
      79: $Vd
    }, {
      8: [1, 173]
    }, {
      72: 174,
      73: 175,
      74: $V51,
      79: $V61
    }, {
      42: $VU,
      51: [1, 178]
    }, o($VP, [2, 116]), {
      8: $VR,
      76: 179,
      77: 125
    }, {
      8: [1, 180]
    }, {
      8: $Vt,
      11: $Vu,
      19: $Vv,
      20: $Vw,
      22: $Vx,
      23: $Vy,
      24: $Vz,
      25: $VA,
      26: $VB,
      29: $VC,
      30: $VD,
      31: 61,
      32: $VE,
      34: $VF,
      35: 64,
      36: $VG,
      37: $VH,
      66: 181,
      67: 66,
      68: 67,
      78: $Vc,
      79: $Vd
    }, o($VT, [2, 78], {
      57: $Vg,
      58: $Vh,
      59: $Vi,
      60: $Vj
    }), {
      28: [1, 182],
      42: [1, 183]
    }, o($VJ, [2, 131]), o($VJ, [2, 128]), o($VJ, [2, 129]), o($Ve, [2, 34]), {
      6: 184,
      7: $VK,
      8: $V1,
      10: 9,
      13: $VL,
      14: $VM,
      17: $V5,
      23: $V6,
      24: $V7,
      26: $V8,
      29: $V9,
      31: 15,
      35: 16,
      36: $Va,
      37: $Vb,
      53: 12,
      54: 13,
      55: 17,
      78: $Vc,
      79: $Vd
    }, {
      6: 139,
      7: $VK,
      8: $V1,
      10: 9,
      13: $VL,
      14: $VM,
      17: $V5,
      23: $V6,
      24: $V7,
      26: $V8,
      29: $V9,
      31: 15,
      35: 16,
      36: $Va,
      37: $Vb,
      39: 185,
      53: 12,
      54: 13,
      55: 17,
      78: $Vc,
      79: $Vd
    }, {
      8: [1, 187],
      47: 186
    }, {
      6: 188,
      7: $VK,
      8: $V1,
      10: 9,
      13: $VL,
      14: $VM,
      17: $V5,
      23: $V6,
      24: $V7,
      26: $V8,
      29: $V9,
      31: 15,
      35: 16,
      36: $Va,
      37: $Vb,
      53: 12,
      54: 13,
      55: 17,
      78: $Vc,
      79: $Vd
    }, o($Ve, [2, 39]), {
      8: $V71,
      44: 189
    }, {
      8: $V71,
      43: 191,
      44: 145
    }, {
      6: 193,
      7: $VK,
      8: $V1,
      10: 9,
      13: $VL,
      14: $VM,
      17: $V5,
      23: $V6,
      24: $V7,
      26: $V8,
      29: $V9,
      31: 15,
      35: 16,
      36: $Va,
      37: $Vb,
      46: 192,
      53: 12,
      54: 13,
      55: 17,
      78: $Vc,
      79: $Vd
    }, o($VV, [2, 103]), o($VV, [2, 106]), o($VW, [2, 108]), o($VW, [2, 114], {
      74: [1, 194]
    }), {
      73: 195,
      79: $V61
    }, o([38, 42, 49, 51, 74], [2, 126]), o($VW, [2, 109], {
      41: [1, 196]
    }), o($VJ, [2, 117]), o($VJ, [2, 120]), o($VX, [2, 121]), o($Ve, [2, 24]), {
      8: $VY,
      78: $VZ,
      80: 197
    }, o($VI, [2, 36]), {
      38: [1, 198],
      42: $V_
    }, o($V01, [2, 45]), {
      9: $V11
    }, o($V01, [2, 47]), o($VJ, [2, 41]), o($VJ, $V31, {
      45: $V41
    }), {
      28: [1, 199],
      42: $V21
    }, o($VJ, [2, 43], {
      41: [1, 200]
    }), o($V81, [2, 49]), o($VW, [2, 113], {
      73: 201,
      79: $V61
    }), o($VW, [2, 112]), {
      72: 202,
      73: 175,
      74: $V51,
      79: $V61
    }, o($VJ, [2, 130]), o($Ve, [2, 35]), o($Ve, [2, 40]), {
      6: 203,
      7: $VK,
      8: $V1,
      10: 9,
      13: $VL,
      14: $VM,
      17: $V5,
      23: $V6,
      24: $V7,
      26: $V8,
      29: $V9,
      31: 15,
      35: 16,
      36: $Va,
      37: $Vb,
      53: 12,
      54: 13,
      55: 17,
      78: $Vc,
      79: $Vd
    }, o($VW, [2, 111]), o($VW, [2, 110]), o($V81, [2, 48])],
    defaultActions: {},
    parseError: function parseError(str, hash) {
      if (hash.recoverable) {
        this.trace(str);
      } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
      }
    },
    parse: function parse(input) {
      var self = this,
          stack = [0],
          vstack = [null],
          lstack = [],
          table = this.table,
          yytext = '',
          yylineno = 0,
          yyleng = 0,
          TERROR = 2,
          EOF = 1;
      var args = lstack.slice.call(arguments, 1);
      var lexer = Object.create(this.lexer);
      var sharedState = {
        yy: {}
      };

      for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
          sharedState.yy[k] = this.yy[k];
        }
      }

      lexer.setInput(input, sharedState.yy);
      sharedState.yy.lexer = lexer;
      sharedState.yy.parser = this;

      if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
      }

      var yyloc = lexer.yylloc;
      lstack.push(yyloc);
      var ranges = lexer.options && lexer.options.ranges;

      if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
      } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
      }

      _token_stack: var lex = function lex() {
        var token;
        token = lexer.lex() || EOF;

        if (typeof token !== 'number') {
          token = self.symbols_[token] || token;
        }

        return token;
      };

      var symbol,
          preErrorSymbol,
          state,
          action,
          r,
          yyval = {},
          p,
          len,
          newState,
          expected;

      while (true) {
        state = stack[stack.length - 1];

        if (this.defaultActions[state]) {
          action = this.defaultActions[state];
        } else {
          if (symbol === null || typeof symbol == 'undefined') {
            symbol = lex();
          }

          action = table[state] && table[state][symbol];
        }

        if (typeof action === 'undefined' || !action.length || !action[0]) {
          var errStr = '';
          expected = [];

          for (p in table[state]) {
            if (this.terminals_[p] && p > TERROR) {
              expected.push('\'' + this.terminals_[p] + '\'');
            }
          }

          if (lexer.showPosition) {
            errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
          } else {
            errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
          }

          this.parseError(errStr, {
            text: lexer.match,
            token: this.terminals_[symbol] || symbol,
            line: lexer.yylineno,
            loc: yyloc,
            expected: expected
          });
        }

        if (action[0] instanceof Array && action.length > 1) {
          throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }

        switch (action[0]) {
          case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;

            if (!preErrorSymbol) {
              yyleng = lexer.yyleng;
              yytext = lexer.yytext;
              yylineno = lexer.yylineno;
              yyloc = lexer.yylloc;
            } else {
              symbol = preErrorSymbol;
              preErrorSymbol = null;
            }

            break;

          case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
              first_line: lstack[lstack.length - (len || 1)].first_line,
              last_line: lstack[lstack.length - 1].last_line,
              first_column: lstack[lstack.length - (len || 1)].first_column,
              last_column: lstack[lstack.length - 1].last_column
            };

            if (ranges) {
              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }

            r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

            if (typeof r !== 'undefined') {
              return r;
            }

            if (len) {
              stack = stack.slice(0, -1 * len * 2);
              vstack = vstack.slice(0, -1 * len);
              lstack = lstack.slice(0, -1 * len);
            }

            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;

          case 3:
            return true;
        }
      }

      return true;
    }
  };
  /* generated by jison-lex 0.3.4 */

  var lexer = function () {
    var lexer = {
      EOF: 1,
      parseError: function parseError(str, hash) {
        if (this.yy.parser) {
          this.yy.parser.parseError(str, hash);
        } else {
          throw new Error(str);
        }
      },
      // resets the lexer, sets new input
      setInput: function setInput(input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
          first_line: 1,
          first_column: 0,
          last_line: 1,
          last_column: 0
        };

        if (this.options.ranges) {
          this.yylloc.range = [0, 0];
        }

        this.offset = 0;
        return this;
      },
      // consumes and returns one char from the input
      input: function input() {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);

        if (lines) {
          this.yylineno++;
          this.yylloc.last_line++;
        } else {
          this.yylloc.last_column++;
        }

        if (this.options.ranges) {
          this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
      },
      // unshifts one char (or a string) into the input
      unput: function unput(ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);
        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;

        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
          this.yylineno -= lines.length - 1;
        }

        var r = this.yylloc.range;
        this.yylloc = {
          first_line: this.yylloc.first_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.first_column,
          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
        };

        if (this.options.ranges) {
          this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }

        this.yyleng = this.yytext.length;
        return this;
      },
      // When called from action, caches matched text and appends it on next action
      more: function more() {
        this._more = true;
        return this;
      },
      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
      reject: function reject() {
        if (this.options.backtrack_lexer) {
          this._backtrack = true;
        } else {
          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
            text: "",
            token: null,
            line: this.yylineno
          });
        }

        return this;
      },
      // retain first n characters of the match
      less: function less(n) {
        this.unput(this.match.slice(n));
      },
      // displays already matched input, i.e. for error messages
      pastInput: function pastInput() {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
      },
      // displays upcoming input, i.e. for error messages
      upcomingInput: function upcomingInput() {
        var next = this.match;

        if (next.length < 20) {
          next += this._input.substr(0, 20 - next.length);
        }

        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
      },
      // displays the character position where the lexing error occurred, i.e. for error messages
      showPosition: function showPosition() {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
      },
      // test the lexed token: return FALSE when not a match, otherwise return token
      test_match: function test_match(match, indexed_rule) {
        var token, lines, backup;

        if (this.options.backtrack_lexer) {
          // save context
          backup = {
            yylineno: this.yylineno,
            yylloc: {
              first_line: this.yylloc.first_line,
              last_line: this.last_line,
              first_column: this.yylloc.first_column,
              last_column: this.yylloc.last_column
            },
            yytext: this.yytext,
            match: this.match,
            matches: this.matches,
            matched: this.matched,
            yyleng: this.yyleng,
            offset: this.offset,
            _more: this._more,
            _input: this._input,
            yy: this.yy,
            conditionStack: this.conditionStack.slice(0),
            done: this.done
          };

          if (this.options.ranges) {
            backup.yylloc.range = this.yylloc.range.slice(0);
          }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);

        if (lines) {
          this.yylineno += lines.length;
        }

        this.yylloc = {
          first_line: this.yylloc.last_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.last_column,
          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;

        if (this.options.ranges) {
          this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }

        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);

        if (this.done && this._input) {
          this.done = false;
        }

        if (token) {
          return token;
        } else if (this._backtrack) {
          // recover context
          for (var k in backup) {
            this[k] = backup[k];
          }

          return false; // rule action called reject() implying the next rule should be tested instead.
        }

        return false;
      },
      // return next match in input
      next: function next() {
        if (this.done) {
          return this.EOF;
        }

        if (!this._input) {
          this.done = true;
        }

        var token, match, tempMatch, index;

        if (!this._more) {
          this.yytext = '';
          this.match = '';
        }

        var rules = this._currentRules();

        for (var i = 0; i < rules.length; i++) {
          tempMatch = this._input.match(this.rules[rules[i]]);

          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
            match = tempMatch;
            index = i;

            if (this.options.backtrack_lexer) {
              token = this.test_match(tempMatch, rules[i]);

              if (token !== false) {
                return token;
              } else if (this._backtrack) {
                match = false;
                continue; // rule action called reject() implying a rule MISmatch.
              } else {
                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                return false;
              }
            } else if (!this.options.flex) {
              break;
            }
          }
        }

        if (match) {
          token = this.test_match(match, rules[index]);

          if (token !== false) {
            return token;
          } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)


          return false;
        }

        if (this._input === "") {
          return this.EOF;
        } else {
          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
            text: "",
            token: null,
            line: this.yylineno
          });
        }
      },
      // return next match that has a token
      lex: function lex() {
        var r = this.next();

        if (r) {
          return r;
        } else {
          return this.lex();
        }
      },
      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
      begin: function begin(condition) {
        this.conditionStack.push(condition);
      },
      // pop the previously active lexer condition state off the condition stack
      popState: function popState() {
        var n = this.conditionStack.length - 1;

        if (n > 0) {
          return this.conditionStack.pop();
        } else {
          return this.conditionStack[0];
        }
      },
      // produce the lexer rule set which is active for the currently active lexer condition state
      _currentRules: function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
          return this.conditions["INITIAL"].rules;
        }
      },
      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
      topState: function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);

        if (n >= 0) {
          return this.conditionStack[n];
        } else {
          return "INITIAL";
        }
      },
      // alias for begin(condition)
      pushState: function pushState(condition) {
        this.begin(condition);
      },
      // return the number of states currently on the stack
      stateStackSize: function stateStackSize() {
        return this.conditionStack.length;
      },
      options: {},
      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {

        switch ($avoiding_name_collisions) {
          case 0:
            /* skip whitespace */
            break;

          case 1:
            /* skip comment */
            break;

          case 2:
            return 19;
            break;

          case 3:
            return 20;
            break;

          case 4:
            return 49;
            break;

          case 5:
            return 22;
            break;

          case 6:
            return 25;
            break;

          case 7:
            return 24;
            break;

          case 8:
            return 7;
            break;

          case 9:
            return 29;
            break;

          case 10:
            return 30;
            break;

          case 11:
            return 32;
            break;

          case 12:
            return 11;
            break;

          case 13:
            return 34;
            break;

          case 14:
            return 13;
            break;

          case 15:
            return 23;
            break;

          case 16:
            return 14;
            break;

          case 17:
            return 36;
            break;

          case 18:
            return 50;
            break;

          case 19:
            return 51;
            break;

          case 20:
            return 26;
            break;

          case 21:
            return 28;
            break;

          case 22:
            return 37;
            break;

          case 23:
            return 38;
            break;

          case 24:
            return 65;
            break;

          case 25:
            return 42;
            break;

          case 26:
            return 45;
            break;

          case 27:
            return 41;
            break;

          case 28:
            return 9;
            break;

          case 29:
            return 16;
            break;

          case 30:
            return 74;
            break;

          case 31:
            return 56;
            break;

          case 32:
            return 17;
            break;

          case 33:
            return 57;
            break;

          case 34:
            return 58;
            break;

          case 35:
            return 59;
            break;

          case 36:
            return 60;
            break;

          case 37:
            return 8;
            break;

          case 38:
            return 79;
            break;

          case 39:
            return 78;
            break;
        }
      },
      rules: [/^(?:\s+)/, /^(?:\/\/.*)/, /^(?:any)/, /^(?:array)/, /^(?:as)/, /^(?:boolean)/, /^(?:enum)/, /^(?:false)/, /^(?:generator)/, /^(?:null)/, /^(?:number)/, /^(?:object)/, /^(?:pattern)/, /^(?:string)/, /^(?:transform)/, /^(?:true)/, /^(?:type)/, /^(?:undefined)/, /^(?:\()/, /^(?:\))/, /^(?:{)/, /^(?:})/, /^(?:\[)/, /^(?:\])/, /^(?:\|)/, /^(?:,)/, /^(?::)/, /^(?:;)/, /^(?:=)/, /^(?:<=)/, /^(?:\.\.)/, /^(?:\.)/, /^(?:_)/, /^(?:\+)/, /^(?:-)/, /^(?:\*)/, /^(?:\/)/, /^(?:[a-zA-Z_][a-zA-Z0-9_]*)/, /^(?:[-+]?(0|[1-9]\d*)(\.\d+)?)/, /^(?:"[^"\r\n]*")/],
      conditions: {
        "INITIAL": {
          "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
          "inclusive": true
        }
      }
    };
    return lexer;
  }();

  parser.lexer = lexer;

  function Parser() {
    this.yy = {};
  }

  Parser.prototype = parser;
  parser.Parser = Parser;
  return new Parser();
}();

var FAILURE_VALUE = {};
/**
 * Determine if object is something that can have properties
 *
 * @param {*} obj
 * @returns {boolean}
 */

function isObject(obj) {
  return obj !== null && _typeof(obj) === "object";
}
/**
 * Transformer
 */


var Transformer =
/*#__PURE__*/
function () {
  /**
   * Create a new empty Transformer. Normalizers can be used to validate and transform data. However, when a new
   * Transformer has been created, it needs to be populated with one or more type descriptions. The easiest way to do
   * this is with the static method fromSource.
   */
  function Transformer() {
    _classCallCheck(this, Transformer);

    this.types = {};
    this.transforms = {};
    this.patterns = {};
    this.generators = {}; // this.typeCheckers = {};

    this.typeCreators = {};
    this.messages = [];
    this.verbose = false;
  }
  /**
   * Create a new instance of a Transformer with its type table initially populated from the specified normalizer
   * source code.
   *
   * @param {string} source
   * @returns {Transformer}
   */


  _createClass(Transformer, [{
    key: "addDefinitionsFromSource",

    /**
     * Add all type definitions from the specified normalization source code to this Transformer instance. This will
     * amend the current types with those specified in the code. Note that any type that has been redefined in the
     * source code will replace any pre-existing version of that type.
     *
     * @param {string} source
     */
    value: function addDefinitionsFromSource(source) {
      var table = parser.parse(source);
      this.addDefinitionsFromTable(table);
    }
    /**
     * Add all type definitions from the specified serialization table to this Transformer instance. This will amend the
     * current types with those specified in the table. Note that any type that has been redefined in the table will
     * replace any pre-existing version of that type.
     *
     * @param {Array} table
     */

  }, {
    key: "addDefinitionsFromTable",
    value: function addDefinitionsFromTable(table) {
      var _this = this;

      table.forEach(function (description) {
        switch (description.type) {
          case "type-assignment":
            _this.types[description.name] = description.value;
            break;

          case "transform-assignment":
            _this.transforms[description.name] = description.value;
            break;

          case "generator-assignment":
            _this.generators[description.name] = description.value;
            break;

          case "pattern-assignment":
            _this.patterns[description.name] = description.value;
            break;

          default: // ignore all other top-level statements

        }
      });
    }
    /**
     * Add information
     *
     * @param {string} message
     */

  }, {
    key: "addInfo",
    value: function addInfo(message) {
      if (this.verbose) {
        this.messages.push({
          type: "message",
          level: "info",
          message: message
        });
      }
    }
    /**
     * Add a warning
     *
     * @param {string} message
     */

  }, {
    key: "addWarning",
    value: function addWarning(message) {
      this.messages.push({
        type: "message",
        level: "warning",
        message: message
      });
    }
    /**
     * Add an error
     *
     * @param {string} message
     */

  }, {
    key: "addError",
    value: function addError(message) {
      this.messages.push({
        type: "message",
        level: "error",
        message: message
      });
    }
    /**
     * Compile and execute the source against the specfied structure
     *
     * @param {string} source
     * @param {*} structure
     * @returns {*}
     */

  }, {
    key: "execute",
    value: function execute(source, structure) {
      var result = this._execute(source, structure);

      return result !== FAILURE_VALUE ? result : undefined;
    }
    /*
     *
     */

  }, {
    key: "_execute",
    value: function _execute(source, structure) {
      var statements = parser.parse(source);
      var result;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = statements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var statement = _step.value;

          switch (statement.type) {
            case "transform":
              result = this.executeTransform(statement, structure);

              if (result === FAILURE_VALUE) {
                break;
              }

              break;

            case "type-reference":
              if (statement.name in this.types) {
                var type = this.types[statement.name];
                var value = this.executeType(type, structure);

                if (value === FAILURE_VALUE) {
                  this.addError("type ".concat(statement.name, " was unable to transform successfully"));
                  return FAILURE_VALUE;
                }

                return value;
              }

              this.addError("type is not defined: ".concat(statement.name));
              return FAILURE_VALUE;

            case "generator-assignment":
              this.generators[statement.name] = statement.value;
              break;

            case "pattern-assignment":
              this.patterns[statement.name] = statement.value;
              break;

            case "transform-assignment":
              this.transforms[statement.name] = statement.value;
              break;

            case "type-assignment":
              this.types[statement.name] = statement.value;
              break;

            default:
              this.addError("unknown statement type: ".concat(statement.type));
              return FAILURE_VALUE;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return result;
    }
    /*
     * Execute a list of transforms, until the first one succeeds
     *
     * @param {Array} transforms
     * @param {*} structure
     * @param {Object} symbolTable
     * @returns {*}
     */

  }, {
    key: "executeTransforms",
    value: function executeTransforms(transforms, structure, symbolTable) {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = transforms[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var transform = _step2.value;
          var result = this.executeTransform(transform, structure, symbolTable);

          if (result !== FAILURE_VALUE) {
            return result;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return FAILURE_VALUE;
    }
    /*
     * Execute a single transform
     *
     * @param {Object} transform
     * @param {*} structure
     * @param {Object} symbolTable
     * @returns {*}
     */

  }, {
    key: "executeTransform",
    value: function executeTransform(transform, structure) {
      var symbolTable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var currentObject = structure;

      if (transform.type === "transform-reference") {
        if (transform.name in this.transforms) {
          transform = this.transforms[transform.name];
        } else {
          this.addError("undefined transform reference: '".concat(transform.name, "'"));
          return FAILURE_VALUE;
        }
      }

      if (transform.patterns !== null) {
        // try all patterns until one succeeds, else report as failure
        var result = FAILURE_VALUE;
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = transform.patterns[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var pattern = _step3.value;
            var patternSymbolTable = Object.create(symbolTable);
            result = this.executePattern(pattern, currentObject, patternSymbolTable);

            if (result !== FAILURE_VALUE) {
              // pattern matched, so we can stop
              if (transform.returnValue !== null) {
                currentObject = this.executeGenerator(transform.returnValue.expression, patternSymbolTable);
              } else {
                // if we're not massaging the result, then return all captured values (the symbol table)s
                currentObject = patternSymbolTable;
              }

              break;
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
              _iterator3["return"]();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        if (result === FAILURE_VALUE) {
          this.addError("Unable to match any type patterns");
          return FAILURE_VALUE;
        }
      } else if (transform.returnValue !== null) {
        // if currentObject is not an object, then it can't be used as a symbol table
        if (isObject(currentObject)) {
          symbolTable = Object.create(Object.assign(symbolTable, currentObject));
        } // NOTE: assumes we have to have a generator if we don't have a pattern. This is currently
        // enforced in the parser


        var value = this.executeGenerator(transform.returnValue.expression, symbolTable);

        if (value === FAILURE_VALUE) {
          this.addError("Unable to apply generator to current object");
          return FAILURE_VALUE;
        }

        currentObject = value;
      } else {
        // we have the identity transform. Return the structure untouched
        currentObject = structure;
      }

      return currentObject;
    }
  }, {
    key: "executeType",
    value: function executeType(type, structure) {
      switch (type.definition) {
        case "any":
          return structure;

        case "array":
          return this.executeArrayType(type, structure);

        case "boolean":
          if (typeof structure === "boolean") {
            if (type.value === null || type.value === structure) {
              return structure;
            }
          }

          return FAILURE_VALUE;

        case "enumeration":
          if (typeof structure === "string") {
            if (type.value.includes(structure)) {
              return structure;
            }
          }

          return FAILURE_VALUE;

        case "null":
          if (structure === null) {
            return structure;
          }

          return FAILURE_VALUE;

        case "number":
          if (typeof structure === "number") {
            if (type.value === null || type.value === structure) {
              return structure;
            }
          }

          return FAILURE_VALUE;

        case "object":
          return this.executeObjectType(type, structure);

        case "string":
          if (typeof structure === "string") {
            if (type.value === null || type.value === structure) {
              return structure;
            }
          }

          return FAILURE_VALUE;

        case "undefined":
          if (structure === undefined) {
            return structure;
          }

          return FAILURE_VALUE;

        default:
          this.addError("Unrecognized type definition value: '".concat(type.definition, "'"));
          return FAILURE_VALUE;
      }
    }
    /*
     * Execute an array type definition
     *
     * @param {object} type
     * @param {*} structure
     * @returns {*}
     */

  }, {
    key: "executeArrayType",
    value: function executeArrayType(type, structure) {
      if (type.value === null) {
        if (Array.isArray(structure)) {
          return structure;
        }

        return FAILURE_VALUE;
      }

      var result = [];
      var symbolTable = {};
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = type.value[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var element = _step4.value;

          switch (element.type) {
            case "transform":
              {
                var elementValue = this.executeTransform(element, structure, symbolTable);

                if (elementValue === FAILURE_VALUE) {
                  return FAILURE_VALUE;
                }

                result.push(elementValue);
                break;
              }

            case "assignment":
              if (this.executeAssignment(element, structure, symbolTable) === FAILURE_VALUE) {
                return FAILURE_VALUE;
              }

              break;

            default:
              this.addError("Unknown element of array type: '".concat(element.type, "'"));
              return FAILURE_VALUE;
          }
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
            _iterator4["return"]();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      return result;
    }
    /*
     * Execute an object type definition
     *
     * @param {object} type
     * @param {*} structure
     * @returns {*}
     */

  }, {
    key: "executeObjectType",
    value: function executeObjectType(type, structure) {
      if (type.value === null) {
        if (isObject(structure)) {
          return structure;
        }

        return FAILURE_VALUE;
      }

      var result = {};
      var symbolTable = {};
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = type.value[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var property = _step5.value;

          switch (property.type) {
            case "type-property":
              {
                var propertyValue = FAILURE_VALUE;

                if (property.value === null) {
                  if (isObject(structure) && property.name in structure) {
                    propertyValue = structure[property.name];
                  }
                } else {
                  propertyValue = this.executeTransforms(property.value, structure, symbolTable);
                }

                if (propertyValue === FAILURE_VALUE) {
                  return FAILURE_VALUE;
                }

                result[property.name] = propertyValue;
                break;
              }

            case "assignment":
              if (this.executeAssignment(property, structure, symbolTable) === FAILURE_VALUE) {
                return FAILURE_VALUE;
              }

              break;

            default:
              this.addError("Unknown element of object type: '".concat(property.type, "'"));
              return FAILURE_VALUE;
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
            _iterator5["return"]();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      return result;
    }
    /*
     * execute an assignment
     *
     * @param {object} assignment
     * @param {*} structure
     * @param {object} symbolTable
     * @returns {*}
     */

  }, {
    key: "executeAssignment",
    value: function executeAssignment(assignment, structure, symbolTable) {
      var value = this.executeTransform(assignment.value, structure, symbolTable);

      if (value === FAILURE_VALUE) {
        return FAILURE_VALUE;
      }

      assign(symbolTable, assignment.name, value);
      return value;
    }
    /*
     * Acquire the value of a type pattern from the specified structure. Any named entities will be populated in the
     * specified symbolTable
     *
     * @param {object} pattern
     * @param {*} structure
     * @param {object} symbolTable
     * @returns {*}
     */

  }, {
    key: "executePattern",
    value: function executePattern(pattern, structure, symbolTable) {
      switch (pattern.patternType) {
        case "any":
          assign(symbolTable, pattern.assignTo, structure);
          return structure;

        case "array":
          if (Array.isArray(structure)) {
            assign(symbolTable, pattern.assignTo, structure);
            return structure;
          }

          return FAILURE_VALUE;

        case "array-pattern":
          return this.executeArrayPattern(pattern, structure, symbolTable);

        case "boolean":
          if (typeof structure === "boolean") {
            if (pattern.value === null || pattern.value === structure) {
              assign(symbolTable, pattern.assignTo, structure);
              return structure;
            }
          }

          return FAILURE_VALUE;

        case "null":
          if (structure === null) {
            assign(symbolTable, pattern.assignTo, structure);
            return structure;
          }

          return FAILURE_VALUE;

        case "number":
          if (typeof structure === "number") {
            if (pattern.value === null || pattern.value === structure) {
              assign(symbolTable, pattern.assignTo, structure);
              return structure;
            }
          }

          return FAILURE_VALUE;

        case "object":
          if (isObject(structure)) {
            assign(symbolTable, pattern.assignTo, structure);
            return structure;
          }

          return FAILURE_VALUE;

        case "object-pattern":
          {
            if (isObject(structure) === false) {
              return FAILURE_VALUE;
            }

            var result = {};
            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
              for (var _iterator6 = pattern.value[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                var property = _step6.value;
                var name = property.name,
                    propertyPattern = property.pattern,
                    assignTo = property.assignTo;

                if (name in structure) {
                  var value = this.executePattern(propertyPattern, structure[name], symbolTable);

                  if (value === FAILURE_VALUE) {
                    return FAILURE_VALUE;
                  }

                  assign(symbolTable, property.assignTo, structure[name]);
                  result[assignTo] = value;
                } else {
                  return FAILURE_VALUE;
                }
              }
            } catch (err) {
              _didIteratorError6 = true;
              _iteratorError6 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                  _iterator6["return"]();
                }
              } finally {
                if (_didIteratorError6) {
                  throw _iteratorError6;
                }
              }
            }

            assign(symbolTable, pattern.assignTo, structure);
            return result;
          }

        case "reference":
          if (pattern.value in this.patterns) {
            var referencedPattern = this.patterns[pattern.value];

            var _result = this.executePattern(referencedPattern, structure, symbolTable);

            if (_result !== FAILURE_VALUE) {
              assign(symbolTable, pattern.assignTo, _result);
            }

            return _result;
          }

          return FAILURE_VALUE;

        case "string":
          if (typeof structure === "string") {
            if (pattern.value === null || pattern.value === structure) {
              assign(symbolTable, pattern.assignTo, structure);
              return structure;
            }
          }

          return FAILURE_VALUE;

        case "undefined":
          // NOTE: Our current failure value is undefined, so this will be treated as an error. I can change
          // FAILURE_VALUE to be a sigil. I'll just have to be careful to return undefined at the top-most level.
          // I'm leaving this for now as this is probably not going to be used much
          if (structure === undefined) {
            assign(symbolTable, pattern.assignTo, structure);
            return structure;
          }

          return FAILURE_VALUE;

        default:
          throw new TypeError("unrecognized pattern type: '".concat(pattern.type, "'"));
      }
    }
    /*
     * Execute an array pattern
     *
     * @param {Object} pattern
     * @param {*} structure
     * @param {Object} symbolTable
     * @returns {*}
     */

  }, {
    key: "executeArrayPattern",
    value: function executeArrayPattern(pattern, structure, symbolTable) {
      if (Array.isArray(structure) === false) {
        return FAILURE_VALUE;
      }

      var result = [];
      var index = 0;
      var _iteratorNormalCompletion7 = true;
      var _didIteratorError7 = false;
      var _iteratorError7 = undefined;

      try {
        for (var _iterator7 = pattern.value[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
          var element = _step7.value;
          var results = this.executeArrayPatternElement(element, index, structure, symbolTable);

          if (results === FAILURE_VALUE) {
            return FAILURE_VALUE;
          }

          result = result.concat(results);
          index += results.length;
        }
      } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
            _iterator7["return"]();
          }
        } finally {
          if (_didIteratorError7) {
            throw _iteratorError7;
          }
        }
      }

      if (index === structure.length) {
        assign(symbolTable, pattern.assignTo, structure);
        return result;
      }

      return FAILURE_VALUE;
    }
    /*
     * Execute an element from an array pattern
     *
     * @param {Object} element
     * @param {number} index
     * @param {*} structure
     * @param {Object} symbolTable
     * @returns {Array|undefined}
     */

  }, {
    key: "executeArrayPatternElement",
    value: function executeArrayPatternElement(element, index, structure, symbolTable) {
      var result = [];

      switch (element.type) {
        case "element":
          {
            var results = this.executeArrayElementPattern(element, index, structure, symbolTable);

            if (results === FAILURE_VALUE) {
              return FAILURE_VALUE;
            }

            result = result.concat(results);
            index += results.length;
            break;
          }

        case "element-group":
          {
            var _results = this.executeArrayElementGroupPattern(element, index, structure, symbolTable);

            if (_results === FAILURE_VALUE) {
              return FAILURE_VALUE;
            }

            result = result.concat(_results);
            index += _results.length;
            break;
          }

        default:
          this.addError("Unrecognized array pattern element type: '".concat(element.type, "'"));
          return FAILURE_VALUE;
      }

      return result;
    }
    /*
     * Execute array element pattern
     *
     * @param {Object} element
     * @param {number} index
     * @param {*} structure
     * @param {Object} symbolTable
     * @returns {Array|undefined}
     */

  }, {
    key: "executeArrayElementPattern",
    value: function executeArrayElementPattern(element, index, structure, symbolTable) {
      var pattern = element.pattern,
          _element$range = element.range,
          start = _element$range.start,
          stop = _element$range.stop;
      var result = [];

      for (var i = 0; i < stop; i++) {
        var actualIndex = index + i; // treat out-of-bounds like a failure

        var value = actualIndex < structure.length ? this.executePattern(pattern, structure[actualIndex], symbolTable) : FAILURE_VALUE; // if we processed enough, continue, else failure

        if (value === FAILURE_VALUE) {
          if (i >= start) {
            break;
          }

          return FAILURE_VALUE;
        } // save result


        assign(symbolTable, element.assignTo, value);
        result.push(value);
      }

      return result;
    }
    /*
     * Execute array element group pattern
     *
     * @param {Object} element
     * @param {number} index
     * @param {*} structure
     * @param {Object} symbolTable
     * @returns {Array|undefined}
     */

  }, {
    key: "executeArrayElementGroupPattern",
    value: function executeArrayElementGroupPattern(group, index, structure, symbolTable) {
      var elements = group.elements,
          _group$range = group.range,
          start = _group$range.start,
          stop = _group$range.stop;
      var result = [];
      var _iteratorNormalCompletion8 = true;
      var _didIteratorError8 = false;
      var _iteratorError8 = undefined;

      try {
        for (var _iterator8 = elements[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
          var element = _step8.value;

          for (var i = 0; i < stop; i++) {
            var results = this.executeArrayPatternElement(element, index, structure, symbolTable);

            if (results === FAILURE_VALUE) {
              if (i >= start) {
                return result;
              }

              return FAILURE_VALUE;
            }

            result = result.concat(results);
            index += results.length;
          }
        }
      } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
            _iterator8["return"]();
          }
        } finally {
          if (_didIteratorError8) {
            throw _iteratorError8;
          }
        }
      }

      return result;
    }
    /*
     * Execute a method and return its value
     *
     * @param {object} expression
     * @param {object} symbolTable
     * @returns {*}
     */

  }, {
    key: "executeGenerator",
    value: function executeGenerator(expression, symbolTable) {
      var _this2 = this;

      var getNumbers = function getNumbers(operation) {
        var left = _this2.executeGenerator(expression.left.expression, symbolTable);

        if (left !== FAILURE_VALUE && typeof left === "number") {
          var right = _this2.executeGenerator(expression.right.expression, symbolTable);

          if (right !== FAILURE_VALUE && typeof right === "number") {
            return operation(left, right);
          }
        }

        return FAILURE_VALUE;
      };

      switch (expression.type) {
        case "get-value":
          return symbolTable[expression.name];

        case "get-property":
          {
            var object = this.executeGenerator(expression.left, symbolTable);
            return isObject(object) ? object[expression.right] : FAILURE_VALUE;
          }

        case "add":
          {
            return getNumbers(function (a, b) {
              return a + b;
            });
          }

        case "subtract":
          {
            return getNumbers(function (a, b) {
              return a - b;
            });
          }

        case "multiply":
          {
            return getNumbers(function (a, b) {
              return a * b;
            });
          }

        case "divide":
          {
            return getNumbers(function (a, b) {
              return a / b;
            });
          }

        case "invoke":
          {
            var args = expression.args.map(function (arg) {
              return _this2.executeGenerator(arg.expression, symbolTable);
            });
            return this.createType(expression.name, args);
          }

        case "array":
          return expression.value.map(function (elementExpression) {
            return _this2.executeGenerator(elementExpression.expression, symbolTable);
          });

        case "boolean":
        case "null":
        case "number":
        case "string":
        case "undefined":
          return expression.value;

        case "object":
          {
            var result = {};
            var _iteratorNormalCompletion9 = true;
            var _didIteratorError9 = false;
            var _iteratorError9 = undefined;

            try {
              for (var _iterator9 = expression.value[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                var propertyExpression = _step9.value;
                result[propertyExpression.name] = this.executeGenerator(propertyExpression.expression, symbolTable);
              }
            } catch (err) {
              _didIteratorError9 = true;
              _iteratorError9 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                  _iterator9["return"]();
                }
              } finally {
                if (_didIteratorError9) {
                  throw _iteratorError9;
                }
              }
            }

            return result;
          }

        default:
          this.addError("Unrecognized generator expression type: '".concat(expression.type, "'"));
          return FAILURE_VALUE;
      }
    }
    /*
     * Invoke a user-defined method and return its value
     *
     * @param {string} type
     * @param {Array} args
     * @returns {*}
     */

  }, {
    key: "createType",
    value: function createType(type, args) {
      if (type in this.typeCreators) {
        var _this$typeCreators;

        return (_this$typeCreators = this.typeCreators)[type].apply(_this$typeCreators, _toConsumableArray(args));
      } else if ("*" in this.typeCreators) {
        return this.typeCreators["*"](type, args);
      }

      return FAILURE_VALUE;
    }
  }], [{
    key: "fromSource",
    value: function fromSource(source) {
      var result = new Transformer();
      result.addDefinitionsFromSource(source);
      return result;
    }
    /**
     * Create a new instance of a Transformer with its type table initially populated from the specified serialization
     * table. This table can be used to cache a parse normalized file and is the output of Parser.parse()
     *
     * @param {Array} table
     * @returns {Transformer}
     */

  }, {
    key: "fromTable",
    value: function fromTable(table) {
      var result = new Transformer();
      result.addDefinitionsFromTable(table);
      return result;
    }
  }]);

  return Transformer;
}();

function assign(symbolTable, name, value) {
  if (name !== null && name !== undefined) {
    if (name in symbolTable) {
      /* eslint-disable-next-line no-console */
      console.log("warning: overwriting ".concat(name, " in symbol table"));
    }

    symbolTable[name] = value;
  }
}

/**
 * @module kld-data-transformer
 */

export { parser as Parser, Transformer };
