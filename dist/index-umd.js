(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.KldDataTransformer = {}));
}(this, function (exports) { 'use strict';

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  /* parser generated by jison 0.4.18 */

  /*
    Returns a Parser object of the following structure:

    Parser: {
      yy: {}
    }

    Parser.prototype: {
      yy: {},
      trace: function(),
      symbols_: {associative list: name ==> number},
      terminals_: {associative list: number ==> name},
      productions_: [...],
      performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
      table: [...],
      defaultActions: {...},
      parseError: function(str, hash),
      parse: function(input),

      lexer: {
          EOF: 1,
          parseError: function(str, hash),
          setInput: function(input),
          input: function(),
          unput: function(str),
          more: function(),
          less: function(n),
          pastInput: function(),
          upcomingInput: function(),
          showPosition: function(),
          test_match: function(regex_match_array, rule_index),
          next: function(),
          lex: function(),
          begin: function(condition),
          popState: function(),
          _currentRules: function(),
          topState: function(),
          pushState: function(condition),

          options: {
              ranges: boolean           (optional: true ==> token location info will include a .range[] member)
              flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
              backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
          },

          performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
          rules: [...],
          conditions: {associative list: name ==> set},
      }
    }


    token location info (@$, _$, etc.): {
      first_line: n,
      last_line: n,
      first_column: n,
      last_column: n,
      range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
    }


    the parseError function receives a 'hash' object with these members for lexer and parser errors: {
      text:        (matched text)
      token:       (the produced terminal token, if any)
      line:        (yylineno)
    }
    while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
      loc:         (yylloc)
      expected:    (string describing the set of expected tokens)
      recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
    }
  */
  var parser = function () {
    var o = function o(k, v, _o, l) {
      for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {
      }

      return _o;
    },
        $V0 = [1, 6],
        $V1 = [1, 14],
        $V2 = [1, 9],
        $V3 = [1, 12],
        $V4 = [1, 25],
        $V5 = [1, 30],
        $V6 = [1, 18],
        $V7 = [1, 21],
        $V8 = [1, 22],
        $V9 = [1, 31],
        $Va = [1, 26],
        $Vb = [1, 27],
        $Vc = [1, 29],
        $Vd = [1, 28],
        $Ve = [1, 5],
        $Vf = [1, 5, 13, 21, 22, 34, 46],
        $Vg = [1, 52],
        $Vh = [1, 53],
        $Vi = [1, 41],
        $Vj = [1, 47],
        $Vk = [1, 54],
        $Vl = [1, 36],
        $Vm = [1, 37],
        $Vn = [1, 38],
        $Vo = [1, 39],
        $Vp = [1, 40],
        $Vq = [1, 42],
        $Vr = [1, 44],
        $Vs = [1, 45],
        $Vt = [1, 50],
        $Vu = [1, 51],
        $Vv = [1, 5, 13, 21, 22, 34, 46, 49],
        $Vw = [1, 5, 13, 21, 22, 24, 25, 26, 27, 34, 46, 49],
        $Vx = [1, 5, 13, 21, 22, 24, 25, 26, 27, 31, 33, 34, 46, 49],
        $Vy = [1, 5, 13, 21, 22, 24, 25, 26, 27, 31, 33, 34, 46, 49, 55],
        $Vz = [1, 5, 13, 21, 22, 34, 46, 55],
        $VA = [1, 84],
        $VB = [1, 89],
        $VC = [1, 99],
        $VD = [1, 102],
        $VE = [21, 34],
        $VF = [21, 46],
        $VG = [1, 112],
        $VH = [21, 22, 34],
        $VI = [21, 22, 34, 55],
        $VJ = [21, 46, 55],
        $VK = [21, 22],
        $VL = [1, 132];

    var parser = {
      trace: function trace() {},
      yy: {},
      symbols_: {
        "error": 2,
        "program": 3,
        "statements": 4,
        ";": 5,
        "statement": 6,
        "assignment": 7,
        "transformSequence": 8,
        "LET": 9,
        "IDENTIFIER": 10,
        "=": 11,
        "steps": 12,
        "|>": 13,
        "step": 14,
        "=~": 15,
        "pattern": 16,
        "expression": 17,
        "mathExpression": 18,
        "MAP": 19,
        "(": 20,
        ",": 21,
        ")": 22,
        "callExpression": 23,
        "+": 24,
        "-": 25,
        "*": 26,
        "/": 27,
        "argumentList": 28,
        "memberExpression": 29,
        "primaryExpression": 30,
        ".": 31,
        "integer": 32,
        "[": 33,
        "]": 34,
        "boolean": 35,
        "NULL_TYPE": 36,
        "float": 37,
        "string": 38,
        "UNDEFINED_TYPE": 39,
        "$": 40,
        "arrayExpression": 41,
        "objectExpression": 42,
        "expressionElements": 43,
        "expressionElement": 44,
        "{": 45,
        "}": 46,
        "expressionProperties": 47,
        "expressionProperty": 48,
        ":": 49,
        "argument": 50,
        "...": 51,
        "patterns": 52,
        "|": 53,
        "namedPattern": 54,
        "AS": 55,
        "ANY_TYPE": 56,
        "ARRAY_TYPE": 57,
        "BOOLEAN_TYPE": 58,
        "TRUE": 59,
        "FALSE": 60,
        "NUMBER_TYPE": 61,
        "OBJECT_TYPE": 62,
        "STRING_TYPE": 63,
        "arrayPattern": 64,
        "objectPattern": 65,
        "PATTERN": 66,
        "ENUMERATION": 67,
        "patternElements": 68,
        "namedPatternElement": 69,
        "patternElement": 70,
        "range": 71,
        "..": 72,
        "patternProperties": 73,
        "namedPatternProperty": 74,
        "namedProperty": 75,
        "STRING": 76,
        "NUMBER": 77,
        "stringOrIdentifier": 78,
        "identifiers": 79,
        "$accept": 0,
        "$end": 1
      },
      terminals_: {
        2: "error",
        5: ";",
        9: "LET",
        10: "IDENTIFIER",
        11: "=",
        13: "|>",
        15: "=~",
        19: "MAP",
        20: "(",
        21: ",",
        22: ")",
        24: "+",
        25: "-",
        26: "*",
        27: "/",
        31: ".",
        33: "[",
        34: "]",
        36: "NULL_TYPE",
        39: "UNDEFINED_TYPE",
        40: "$",
        45: "{",
        46: "}",
        49: ":",
        51: "...",
        53: "|",
        55: "AS",
        56: "ANY_TYPE",
        57: "ARRAY_TYPE",
        58: "BOOLEAN_TYPE",
        59: "TRUE",
        60: "FALSE",
        61: "NUMBER_TYPE",
        62: "OBJECT_TYPE",
        63: "STRING_TYPE",
        66: "PATTERN",
        67: "ENUMERATION",
        72: "..",
        76: "STRING",
        77: "NUMBER"
      },
      productions_: [0, [3, 1], [4, 3], [4, 1], [6, 1], [6, 1], [7, 4], [8, 1], [12, 3], [12, 1], [14, 2], [14, 1], [17, 1], [17, 6], [18, 1], [18, 3], [18, 3], [18, 3], [18, 3], [23, 3], [23, 4], [23, 1], [29, 1], [29, 3], [29, 3], [29, 4], [30, 1], [30, 1], [30, 1], [30, 1], [30, 1], [30, 1], [30, 1], [30, 1], [30, 1], [30, 3], [41, 2], [41, 3], [43, 3], [43, 1], [44, 1], [44, 1], [42, 2], [42, 3], [47, 3], [47, 1], [48, 3], [48, 1], [48, 1], [28, 3], [28, 1], [50, 1], [50, 2], [52, 3], [52, 1], [54, 1], [54, 3], [16, 1], [16, 1], [16, 1], [16, 1], [16, 1], [16, 1], [16, 1], [16, 1], [16, 1], [16, 1], [16, 1], [16, 1], [16, 1], [16, 1], [16, 2], [16, 2], [16, 1], [64, 2], [64, 3], [68, 3], [68, 1], [69, 1], [69, 3], [70, 1], [70, 3], [70, 3], [70, 5], [71, 3], [71, 2], [71, 2], [71, 1], [65, 2], [65, 3], [73, 3], [73, 1], [74, 1], [74, 3], [75, 3], [75, 1], [35, 1], [35, 1], [38, 1], [32, 1], [37, 1], [78, 1], [78, 1], [79, 3], [79, 1]],
      performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate
      /* action[1] */
      , $$
      /* vstack */
      , _$
      /* lstack */
      ) {
        /* this == yyval */
        var $0 = $$.length - 1;

        switch (yystate) {
          case 1:
            return $$[$0];
            break;

          case 2:
          case 8:
          case 38:
          case 44:
          case 49:
          case 53:
          case 76:
          case 90:
          case 103:
            $$[$0 - 2].push($$[$0]);
            this.$ = $$[$0 - 2];
            break;

          case 3:
          case 9:
          case 39:
          case 45:
          case 50:
          case 54:
          case 77:
          case 91:
          case 104:
            this.$ = [$$[$0]];
            break;

          case 4:
          case 5:
          case 10:
          case 11:
          case 12:
          case 14:
          case 21:
          case 22:
          case 33:
          case 34:
          case 40:
          case 41:
          case 48:
          case 51:
          case 92:
          case 101:
            this.$ = $$[$0];
            break;

          case 6:
            this.$ = {
              type: 'assignment',
              name: $$[$0 - 2],
              value: $$[$0]
            };
            break;

          case 7:
            this.$ = {
              type: 'sequence',
              steps: $$[$0]
            };
            break;

          case 13:
            this.$ = {
              type: 'map',
              value: [$$[$0 - 3], $$[$0 - 1]]
            };
            break;

          case 15:
            this.$ = {
              type: 'add',
              left: $$[$0 - 2],
              right: $$[$0]
            };
            break;

          case 16:
            this.$ = {
              type: 'subtract',
              left: $$[$0 - 2],
              right: $$[$0]
            };
            break;

          case 17:
            this.$ = {
              type: 'multiply',
              left: $$[$0 - 2],
              right: $$[$0]
            };
            break;

          case 18:
            this.$ = {
              type: 'divide',
              left: $$[$0 - 2],
              right: $$[$0]
            };
            break;

          case 19:
            this.$ = {
              type: 'invoke',
              name: $$[$0 - 2],
              args: []
            };
            break;

          case 20:
            this.$ = {
              type: 'invoke',
              name: $$[$0 - 3],
              args: $$[$0 - 1]
            };
            break;

          case 23:
            this.$ = {
              type: 'get-property',
              left: $$[$0 - 2],
              right: $$[$0]
            };
            break;

          case 24:
            this.$ = {
              type: 'get-index',
              left: $$[$0 - 2],
              right: $$[$0]
            };
            break;

          case 25:
            this.$ = {
              type: 'get-index',
              left: $$[$0 - 3],
              right: $$[$0 - 1]
            };
            break;

          case 26:
            this.$ = {
              type: 'boolean',
              value: $$[$0]
            };
            break;

          case 27:
            this.$ = {
              type: 'boolean',
              value: null
            };
            break;

          case 28:
            this.$ = {
              type: 'number',
              value: $$[$0]
            };
            break;

          case 29:
            this.$ = {
              type: 'string',
              value: $$[$0]
            };
            break;

          case 30:
            this.$ = {
              type: 'undefined',
              value: undefined
            };
            break;

          case 31:
            this.$ = {
              type: 'get-value',
              name: $$[$0]
            };
            break;

          case 32:
            this.$ = {
              type: 'get-structure'
            };
            break;

          case 35:
            this.$ = $$[$0 - 1];
            break;

          case 36:
            this.$ = {
              type: 'array',
              value: []
            };
            break;

          case 37:
            this.$ = {
              type: 'array',
              value: $$[$0 - 1]
            };
            break;

          case 42:
            this.$ = {
              type: 'object',
              value: []
            };
            break;

          case 43:
            this.$ = {
              type: 'object',
              value: $$[$0 - 1]
            };
            break;

          case 46:
            this.$ = {
              type: 'property',
              name: $$[$0 - 2],
              value: $$[$0]
            };
            break;

          case 47:
            this.$ = {
              type: 'property',
              name: $$[$0],
              value: null
            };
            break;

          case 52:
            this.$ = {
              type: 'spread',
              expression: $$[$0]
            };
            break;

          case 55:
          case 78:
            $$[$0].assignTo = null;
            this.$ = $$[$0];
            break;

          case 56:
          case 79:
          case 93:
            $$[$0 - 2].assignTo = $$[$0];
            this.$ = $$[$0 - 2];
            break;

          case 57:
            this.$ = {
              type: 'pattern',
              patternType: 'any',
              value: null
            };
            break;

          case 58:
            this.$ = {
              type: 'pattern',
              patternType: 'array',
              value: null
            };
            break;

          case 59:
            this.$ = {
              type: 'pattern',
              patternType: 'boolean',
              value: null
            };
            break;

          case 60:
            this.$ = {
              type: 'pattern',
              patternType: 'boolean',
              value: true
            };
            break;

          case 61:
            this.$ = {
              type: 'pattern',
              patternType: 'boolean',
              value: false
            };
            break;

          case 62:
            this.$ = {
              type: 'pattern',
              patternType: 'null',
              value: null
            };
            break;

          case 63:
            this.$ = {
              type: 'pattern',
              patternType: 'number',
              value: null
            };
            break;

          case 64:
            this.$ = {
              type: 'pattern',
              patternType: 'number',
              value: $$[$0]
            };
            break;

          case 65:
            this.$ = {
              type: 'pattern',
              patternType: 'object',
              value: null
            };
            break;

          case 66:
            this.$ = {
              type: 'pattern',
              patternType: 'string',
              value: null
            };
            break;

          case 67:
            this.$ = {
              type: 'pattern',
              patternType: 'string',
              value: $$[$0]
            };
            break;

          case 68:
            this.$ = {
              type: 'pattern',
              patternType: 'undefined',
              value: null
            };
            break;

          case 69:
          case 70:
            this.$ = $$[$0];
            break;

          case 71:
            this.$ = {
              type: 'pattern-reference',
              name: $$[$0]
            };
            break;

          case 72:
            this.$ = {
              type: 'enumeration-reference',
              name: $$[$0]
            };
            break;

          case 73:
            this.$ = {
              type: 'pattern',
              patternType: 'reference',
              value: $$[$0]
            };
            break;

          case 74:
            this.$ = {
              type: 'pattern',
              patternType: 'array-pattern',
              value: []
            };
            break;

          case 75:
            this.$ = {
              type: 'pattern',
              patternType: 'array-pattern',
              value: $$[$0 - 1]
            };
            break;

          case 80:
            this.$ = {
              type: 'element',
              pattern: $$[$0],
              range: {
                type: 'range',
                start: 1,
                stop: 1
              }
            };
            break;

          case 81:
            this.$ = {
              type: 'element',
              pattern: $$[$0 - 2],
              range: $$[$0]
            };
            break;

          case 82:
            this.$ = {
              type: 'element-group',
              elements: $$[$0 - 1],
              range: {
                type: 'range',
                start: 1,
                stop: 1
              }
            };
            break;

          case 83:
            this.$ = {
              type: 'element-group',
              elements: $$[$0 - 3],
              range: $$[$0]
            };
            break;

          case 84:
            this.$ = {
              type: 'range',
              start: $$[$0 - 2],
              stop: $$[$0]
            };
            break;

          case 85:
            this.$ = {
              type: 'range',
              start: 0,
              stop: $$[$0]
            };
            break;

          case 86:
            this.$ = {
              type: 'range',
              start: $$[$0 - 1],
              stop: Infinity
            };
            break;

          case 87:
            this.$ = {
              type: 'range',
              start: $$[$0],
              stop: $$[$0]
            };
            break;

          case 88:
            this.$ = {
              type: 'pattern',
              patternType: 'object',
              value: null
            };
            break;

          case 89:
            this.$ = {
              type: 'pattern',
              patternType: 'object-pattern',
              value: $$[$0 - 1]
            };
            break;

          case 94:
            this.$ = {
              type: 'property',
              name: $$[$0 - 2],
              pattern: $$[$0]
            };
            break;

          case 95:
            this.$ = {
              type: 'property',
              name: $$[$0],
              pattern: {
                type: 'pattern',
                patternType: 'any',
                value: null
              }
            };
            break;

          case 96:
            this.$ = true;
            break;

          case 97:
            this.$ = false;
            break;

          case 98:
          case 102:
            this.$ = $$[$0].substring(1, $$[$0].length - 1);
            break;

          case 99:
            this.$ = parseInt($$[$0]);
            break;

          case 100:
            this.$ = parseFloat($$[$0]);
            break;
        }
      },
      table: [{
        3: 1,
        4: 2,
        6: 3,
        7: 4,
        8: 5,
        9: $V0,
        10: $V1,
        12: 7,
        14: 8,
        15: $V2,
        17: 10,
        18: 11,
        19: $V3,
        20: $V4,
        23: 13,
        29: 15,
        30: 16,
        33: $V5,
        35: 17,
        36: $V6,
        37: 19,
        38: 20,
        39: $V7,
        40: $V8,
        41: 23,
        42: 24,
        45: $V9,
        59: $Va,
        60: $Vb,
        76: $Vc,
        77: $Vd
      }, {
        1: [3]
      }, {
        1: [2, 1],
        5: [1, 32]
      }, o($Ve, [2, 3]), o($Ve, [2, 4]), o($Ve, [2, 5]), {
        10: [1, 33]
      }, o([1, 5, 21, 22, 34, 46], [2, 7], {
        13: [1, 34]
      }), o($Vf, [2, 9]), {
        10: $Vg,
        16: 35,
        33: $Vh,
        36: $Vi,
        37: 43,
        38: 46,
        39: $Vj,
        45: $Vk,
        56: $Vl,
        57: $Vm,
        58: $Vn,
        59: $Vo,
        60: $Vp,
        61: $Vq,
        62: $Vr,
        63: $Vs,
        64: 48,
        65: 49,
        66: $Vt,
        67: $Vu,
        76: $Vc,
        77: $Vd
      }, o($Vf, [2, 11]), o($Vv, [2, 12], {
        24: [1, 55],
        25: [1, 56],
        26: [1, 57],
        27: [1, 58]
      }), {
        20: [1, 59]
      }, o($Vw, [2, 14]), o($Vx, [2, 31], {
        20: [1, 60]
      }), o($Vw, [2, 21], {
        31: [1, 61],
        33: [1, 62]
      }), o($Vx, [2, 22]), o($Vx, [2, 26]), o($Vx, [2, 27]), o($Vx, [2, 28]), o($Vx, [2, 29]), o($Vx, [2, 30]), o($Vx, [2, 32]), o($Vx, [2, 33]), o($Vx, [2, 34]), {
        10: $V1,
        17: 63,
        18: 11,
        19: $V3,
        20: $V4,
        23: 13,
        29: 15,
        30: 16,
        33: $V5,
        35: 17,
        36: $V6,
        37: 19,
        38: 20,
        39: $V7,
        40: $V8,
        41: 23,
        42: 24,
        45: $V9,
        59: $Va,
        60: $Vb,
        76: $Vc,
        77: $Vd
      }, o($Vx, [2, 96]), o($Vx, [2, 97]), o($Vy, [2, 100]), o($Vy, [2, 98]), {
        7: 68,
        9: $V0,
        10: $V1,
        17: 67,
        18: 11,
        19: $V3,
        20: $V4,
        23: 13,
        29: 15,
        30: 16,
        33: $V5,
        34: [1, 64],
        35: 17,
        36: $V6,
        37: 19,
        38: 20,
        39: $V7,
        40: $V8,
        41: 23,
        42: 24,
        43: 65,
        44: 66,
        45: $V9,
        59: $Va,
        60: $Vb,
        76: $Vc,
        77: $Vd
      }, {
        7: 73,
        9: $V0,
        10: $V1,
        17: 72,
        18: 11,
        19: $V3,
        20: $V4,
        23: 13,
        29: 15,
        30: 16,
        33: $V5,
        35: 17,
        36: $V6,
        37: 19,
        38: 20,
        39: $V7,
        40: $V8,
        41: 23,
        42: 24,
        45: $V9,
        46: [1, 69],
        47: 70,
        48: 71,
        59: $Va,
        60: $Vb,
        76: $Vc,
        77: $Vd
      }, {
        6: 74,
        7: 4,
        8: 5,
        9: $V0,
        10: $V1,
        12: 7,
        14: 8,
        15: $V2,
        17: 10,
        18: 11,
        19: $V3,
        20: $V4,
        23: 13,
        29: 15,
        30: 16,
        33: $V5,
        35: 17,
        36: $V6,
        37: 19,
        38: 20,
        39: $V7,
        40: $V8,
        41: 23,
        42: 24,
        45: $V9,
        59: $Va,
        60: $Vb,
        76: $Vc,
        77: $Vd
      }, {
        11: [1, 75]
      }, {
        10: $V1,
        14: 76,
        15: $V2,
        17: 10,
        18: 11,
        19: $V3,
        20: $V4,
        23: 13,
        29: 15,
        30: 16,
        33: $V5,
        35: 17,
        36: $V6,
        37: 19,
        38: 20,
        39: $V7,
        40: $V8,
        41: 23,
        42: 24,
        45: $V9,
        59: $Va,
        60: $Vb,
        76: $Vc,
        77: $Vd
      }, o($Vf, [2, 10]), o($Vz, [2, 57]), o($Vz, [2, 58]), o($Vz, [2, 59]), o($Vz, [2, 60]), o($Vz, [2, 61]), o($Vz, [2, 62]), o($Vz, [2, 63]), o($Vz, [2, 64]), o($Vz, [2, 65]), o($Vz, [2, 66]), o($Vz, [2, 67]), o($Vz, [2, 68]), o($Vz, [2, 69]), o($Vz, [2, 70]), {
        10: [1, 77]
      }, {
        10: [1, 78]
      }, o($Vz, [2, 73]), {
        10: $Vg,
        16: 83,
        20: $VA,
        33: $Vh,
        34: [1, 79],
        36: $Vi,
        37: 43,
        38: 46,
        39: $Vj,
        45: $Vk,
        56: $Vl,
        57: $Vm,
        58: $Vn,
        59: $Vo,
        60: $Vp,
        61: $Vq,
        62: $Vr,
        63: $Vs,
        64: 48,
        65: 49,
        66: $Vt,
        67: $Vu,
        68: 80,
        69: 81,
        70: 82,
        76: $Vc,
        77: $Vd
      }, {
        10: $VB,
        46: [1, 85],
        73: 86,
        74: 87,
        75: 88
      }, {
        10: $V1,
        20: $V4,
        23: 90,
        29: 15,
        30: 16,
        33: $V5,
        35: 17,
        36: $V6,
        37: 19,
        38: 20,
        39: $V7,
        40: $V8,
        41: 23,
        42: 24,
        45: $V9,
        59: $Va,
        60: $Vb,
        76: $Vc,
        77: $Vd
      }, {
        10: $V1,
        20: $V4,
        23: 91,
        29: 15,
        30: 16,
        33: $V5,
        35: 17,
        36: $V6,
        37: 19,
        38: 20,
        39: $V7,
        40: $V8,
        41: 23,
        42: 24,
        45: $V9,
        59: $Va,
        60: $Vb,
        76: $Vc,
        77: $Vd
      }, {
        10: $V1,
        20: $V4,
        23: 92,
        29: 15,
        30: 16,
        33: $V5,
        35: 17,
        36: $V6,
        37: 19,
        38: 20,
        39: $V7,
        40: $V8,
        41: 23,
        42: 24,
        45: $V9,
        59: $Va,
        60: $Vb,
        76: $Vc,
        77: $Vd
      }, {
        10: $V1,
        20: $V4,
        23: 93,
        29: 15,
        30: 16,
        33: $V5,
        35: 17,
        36: $V6,
        37: 19,
        38: 20,
        39: $V7,
        40: $V8,
        41: 23,
        42: 24,
        45: $V9,
        59: $Va,
        60: $Vb,
        76: $Vc,
        77: $Vd
      }, {
        10: $V1,
        17: 94,
        18: 11,
        19: $V3,
        20: $V4,
        23: 13,
        29: 15,
        30: 16,
        33: $V5,
        35: 17,
        36: $V6,
        37: 19,
        38: 20,
        39: $V7,
        40: $V8,
        41: 23,
        42: 24,
        45: $V9,
        59: $Va,
        60: $Vb,
        76: $Vc,
        77: $Vd
      }, {
        10: $V1,
        17: 98,
        18: 11,
        19: $V3,
        20: $V4,
        22: [1, 95],
        23: 13,
        28: 96,
        29: 15,
        30: 16,
        33: $V5,
        35: 17,
        36: $V6,
        37: 19,
        38: 20,
        39: $V7,
        40: $V8,
        41: 23,
        42: 24,
        45: $V9,
        50: 97,
        51: $VC,
        59: $Va,
        60: $Vb,
        76: $Vc,
        77: $Vd
      }, {
        10: [1, 100],
        32: 101,
        77: $VD
      }, {
        32: 103,
        77: $VD
      }, {
        22: [1, 104]
      }, o($Vx, [2, 36]), {
        21: [1, 106],
        34: [1, 105]
      }, o($VE, [2, 39]), o($VE, [2, 40]), o($VE, [2, 41]), o($Vx, [2, 42]), {
        21: [1, 108],
        46: [1, 107]
      }, o($VF, [2, 45]), o($VF, [2, 47], {
        49: [1, 109]
      }), o($VF, [2, 48]), o($Ve, [2, 2]), {
        8: 110,
        10: $V1,
        12: 7,
        14: 8,
        15: $V2,
        17: 10,
        18: 11,
        19: $V3,
        20: $V4,
        23: 13,
        29: 15,
        30: 16,
        33: $V5,
        35: 17,
        36: $V6,
        37: 19,
        38: 20,
        39: $V7,
        40: $V8,
        41: 23,
        42: 24,
        45: $V9,
        59: $Va,
        60: $Vb,
        76: $Vc,
        77: $Vd
      }, o($Vf, [2, 8]), o($Vz, [2, 71]), o($Vz, [2, 72]), o($Vz, [2, 74]), {
        21: $VG,
        34: [1, 111]
      }, o($VH, [2, 77]), o($VH, [2, 78], {
        55: [1, 113]
      }), o($VI, [2, 80], {
        5: [1, 114]
      }), {
        10: $Vg,
        16: 83,
        20: $VA,
        33: $Vh,
        36: $Vi,
        37: 43,
        38: 46,
        39: $Vj,
        45: $Vk,
        56: $Vl,
        57: $Vm,
        58: $Vn,
        59: $Vo,
        60: $Vp,
        61: $Vq,
        62: $Vr,
        63: $Vs,
        64: 48,
        65: 49,
        66: $Vt,
        67: $Vu,
        68: 115,
        69: 81,
        70: 82,
        76: $Vc,
        77: $Vd
      }, o($Vz, [2, 88]), {
        21: [1, 117],
        46: [1, 116]
      }, o($VF, [2, 91]), o($VF, [2, 92], {
        55: [1, 118]
      }), o($VJ, [2, 95], {
        49: [1, 119]
      }), o($Vw, [2, 15]), o($Vw, [2, 16]), o($Vw, [2, 17]), o($Vw, [2, 18]), {
        21: [1, 120]
      }, o($Vw, [2, 19]), {
        21: [1, 122],
        22: [1, 121]
      }, o($VK, [2, 50]), o($VK, [2, 51]), {
        10: $V1,
        17: 123,
        18: 11,
        19: $V3,
        20: $V4,
        23: 13,
        29: 15,
        30: 16,
        33: $V5,
        35: 17,
        36: $V6,
        37: 19,
        38: 20,
        39: $V7,
        40: $V8,
        41: 23,
        42: 24,
        45: $V9,
        59: $Va,
        60: $Vb,
        76: $Vc,
        77: $Vd
      }, o($Vx, [2, 23]), o($Vx, [2, 24]), o([1, 5, 13, 21, 22, 24, 25, 26, 27, 31, 33, 34, 46, 49, 55, 72], [2, 99]), {
        34: [1, 124]
      }, o($Vx, [2, 35]), o($Vx, [2, 37]), {
        7: 68,
        9: $V0,
        10: $V1,
        17: 67,
        18: 11,
        19: $V3,
        20: $V4,
        23: 13,
        29: 15,
        30: 16,
        33: $V5,
        35: 17,
        36: $V6,
        37: 19,
        38: 20,
        39: $V7,
        40: $V8,
        41: 23,
        42: 24,
        44: 125,
        45: $V9,
        59: $Va,
        60: $Vb,
        76: $Vc,
        77: $Vd
      }, o($Vx, [2, 43]), {
        7: 73,
        9: $V0,
        10: $V1,
        17: 72,
        18: 11,
        19: $V3,
        20: $V4,
        23: 13,
        29: 15,
        30: 16,
        33: $V5,
        35: 17,
        36: $V6,
        37: 19,
        38: 20,
        39: $V7,
        40: $V8,
        41: 23,
        42: 24,
        45: $V9,
        48: 126,
        59: $Va,
        60: $Vb,
        76: $Vc,
        77: $Vd
      }, {
        10: $V1,
        17: 127,
        18: 11,
        19: $V3,
        20: $V4,
        23: 13,
        29: 15,
        30: 16,
        33: $V5,
        35: 17,
        36: $V6,
        37: 19,
        38: 20,
        39: $V7,
        40: $V8,
        41: 23,
        42: 24,
        45: $V9,
        59: $Va,
        60: $Vb,
        76: $Vc,
        77: $Vd
      }, o([1, 5, 21, 34, 46], [2, 6]), o($Vz, [2, 75]), {
        10: $Vg,
        16: 83,
        20: $VA,
        33: $Vh,
        36: $Vi,
        37: 43,
        38: 46,
        39: $Vj,
        45: $Vk,
        56: $Vl,
        57: $Vm,
        58: $Vn,
        59: $Vo,
        60: $Vp,
        61: $Vq,
        62: $Vr,
        63: $Vs,
        64: 48,
        65: 49,
        66: $Vt,
        67: $Vu,
        69: 128,
        70: 82,
        76: $Vc,
        77: $Vd
      }, {
        10: [1, 129]
      }, {
        32: 131,
        71: 130,
        72: $VL,
        77: $VD
      }, {
        21: $VG,
        22: [1, 133]
      }, o($Vz, [2, 89]), {
        10: $VB,
        74: 134,
        75: 88
      }, {
        10: [1, 135]
      }, {
        10: $Vg,
        16: 136,
        33: $Vh,
        36: $Vi,
        37: 43,
        38: 46,
        39: $Vj,
        45: $Vk,
        56: $Vl,
        57: $Vm,
        58: $Vn,
        59: $Vo,
        60: $Vp,
        61: $Vq,
        62: $Vr,
        63: $Vs,
        64: 48,
        65: 49,
        66: $Vt,
        67: $Vu,
        76: $Vc,
        77: $Vd
      }, {
        8: 137,
        10: $V1,
        12: 7,
        14: 8,
        15: $V2,
        17: 10,
        18: 11,
        19: $V3,
        20: $V4,
        23: 13,
        29: 15,
        30: 16,
        33: $V5,
        35: 17,
        36: $V6,
        37: 19,
        38: 20,
        39: $V7,
        40: $V8,
        41: 23,
        42: 24,
        45: $V9,
        59: $Va,
        60: $Vb,
        76: $Vc,
        77: $Vd
      }, o($Vw, [2, 20]), {
        10: $V1,
        17: 98,
        18: 11,
        19: $V3,
        20: $V4,
        23: 13,
        29: 15,
        30: 16,
        33: $V5,
        35: 17,
        36: $V6,
        37: 19,
        38: 20,
        39: $V7,
        40: $V8,
        41: 23,
        42: 24,
        45: $V9,
        50: 138,
        51: $VC,
        59: $Va,
        60: $Vb,
        76: $Vc,
        77: $Vd
      }, o($VK, [2, 52]), o($Vx, [2, 25]), o($VE, [2, 38]), o($VF, [2, 44]), o($VF, [2, 46]), o($VH, [2, 76]), o($VH, [2, 79]), o($VI, [2, 81]), o($VI, [2, 87], {
        72: [1, 139]
      }), {
        32: 140,
        77: $VD
      }, o($VI, [2, 82], {
        5: [1, 141]
      }), o($VF, [2, 90]), o($VF, [2, 93]), o($VJ, [2, 94]), {
        22: [1, 142]
      }, o($VK, [2, 49]), o($VI, [2, 86], {
        32: 143,
        77: $VD
      }), o($VI, [2, 85]), {
        32: 131,
        71: 144,
        72: $VL,
        77: $VD
      }, o($Vv, [2, 13]), o($VI, [2, 84]), o($VI, [2, 83])],
      defaultActions: {},
      parseError: function parseError(str, hash) {
        if (hash.recoverable) {
          this.trace(str);
        } else {
          var error = new Error(str);
          error.hash = hash;
          throw error;
        }
      },
      parse: function parse(input) {
        var self = this,
            stack = [0],
            vstack = [null],
            lstack = [],
            table = this.table,
            yytext = '',
            yylineno = 0,
            yyleng = 0,
            TERROR = 2,
            EOF = 1;
        var args = lstack.slice.call(arguments, 1);
        var lexer = Object.create(this.lexer);
        var sharedState = {
          yy: {}
        };

        for (var k in this.yy) {
          if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
          }
        }

        lexer.setInput(input, sharedState.yy);
        sharedState.yy.lexer = lexer;
        sharedState.yy.parser = this;

        if (typeof lexer.yylloc == 'undefined') {
          lexer.yylloc = {};
        }

        var yyloc = lexer.yylloc;
        lstack.push(yyloc);
        var ranges = lexer.options && lexer.options.ranges;

        if (typeof sharedState.yy.parseError === 'function') {
          this.parseError = sharedState.yy.parseError;
        } else {
          this.parseError = Object.getPrototypeOf(this).parseError;
        }

        _token_stack: var lex = function lex() {
          var token;
          token = lexer.lex() || EOF;

          if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
          }

          return token;
        };

        var symbol,
            preErrorSymbol,
            state,
            action,
            r,
            yyval = {},
            p,
            len,
            newState,
            expected;

        while (true) {
          state = stack[stack.length - 1];

          if (this.defaultActions[state]) {
            action = this.defaultActions[state];
          } else {
            if (symbol === null || typeof symbol == 'undefined') {
              symbol = lex();
            }

            action = table[state] && table[state][symbol];
          }

          if (typeof action === 'undefined' || !action.length || !action[0]) {
            var errStr = '';
            expected = [];

            for (p in table[state]) {
              if (this.terminals_[p] && p > TERROR) {
                expected.push('\'' + this.terminals_[p] + '\'');
              }
            }

            if (lexer.showPosition) {
              errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
            } else {
              errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
            }

            this.parseError(errStr, {
              text: lexer.match,
              token: this.terminals_[symbol] || symbol,
              line: lexer.yylineno,
              loc: yyloc,
              expected: expected
            });
          }

          if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
          }

          switch (action[0]) {
            case 1:
              stack.push(symbol);
              vstack.push(lexer.yytext);
              lstack.push(lexer.yylloc);
              stack.push(action[1]);
              symbol = null;

              if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
              } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
              }

              break;

            case 2:
              len = this.productions_[action[1]][1];
              yyval.$ = vstack[vstack.length - len];
              yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
              };

              if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
              }

              r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

              if (typeof r !== 'undefined') {
                return r;
              }

              if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
              }

              stack.push(this.productions_[action[1]][0]);
              vstack.push(yyval.$);
              lstack.push(yyval._$);
              newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
              stack.push(newState);
              break;

            case 3:
              return true;
          }
        }

        return true;
      }
    };
    /* generated by jison-lex 0.3.4 */

    var lexer = function () {
      var lexer = {
        EOF: 1,
        parseError: function parseError(str, hash) {
          if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
          } else {
            throw new Error(str);
          }
        },
        // resets the lexer, sets new input
        setInput: function setInput(input, yy) {
          this.yy = yy || this.yy || {};
          this._input = input;
          this._more = this._backtrack = this.done = false;
          this.yylineno = this.yyleng = 0;
          this.yytext = this.matched = this.match = '';
          this.conditionStack = ['INITIAL'];
          this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
          };

          if (this.options.ranges) {
            this.yylloc.range = [0, 0];
          }

          this.offset = 0;
          return this;
        },
        // consumes and returns one char from the input
        input: function input() {
          var ch = this._input[0];
          this.yytext += ch;
          this.yyleng++;
          this.offset++;
          this.match += ch;
          this.matched += ch;
          var lines = ch.match(/(?:\r\n?|\n).*/g);

          if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
          } else {
            this.yylloc.last_column++;
          }

          if (this.options.ranges) {
            this.yylloc.range[1]++;
          }

          this._input = this._input.slice(1);
          return ch;
        },
        // unshifts one char (or a string) into the input
        unput: function unput(ch) {
          var len = ch.length;
          var lines = ch.split(/(?:\r\n?|\n)/g);
          this._input = ch + this._input;
          this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;

          this.offset -= len;
          var oldLines = this.match.split(/(?:\r\n?|\n)/g);
          this.match = this.match.substr(0, this.match.length - 1);
          this.matched = this.matched.substr(0, this.matched.length - 1);

          if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
          }

          var r = this.yylloc.range;
          this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
          };

          if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
          }

          this.yyleng = this.yytext.length;
          return this;
        },
        // When called from action, caches matched text and appends it on next action
        more: function more() {
          this._more = true;
          return this;
        },
        // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
        reject: function reject() {
          if (this.options.backtrack_lexer) {
            this._backtrack = true;
          } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
              text: "",
              token: null,
              line: this.yylineno
            });
          }

          return this;
        },
        // retain first n characters of the match
        less: function less(n) {
          this.unput(this.match.slice(n));
        },
        // displays already matched input, i.e. for error messages
        pastInput: function pastInput() {
          var past = this.matched.substr(0, this.matched.length - this.match.length);
          return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
        },
        // displays upcoming input, i.e. for error messages
        upcomingInput: function upcomingInput() {
          var next = this.match;

          if (next.length < 20) {
            next += this._input.substr(0, 20 - next.length);
          }

          return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
        },
        // displays the character position where the lexing error occurred, i.e. for error messages
        showPosition: function showPosition() {
          var pre = this.pastInput();
          var c = new Array(pre.length + 1).join("-");
          return pre + this.upcomingInput() + "\n" + c + "^";
        },
        // test the lexed token: return FALSE when not a match, otherwise return token
        test_match: function test_match(match, indexed_rule) {
          var token, lines, backup;

          if (this.options.backtrack_lexer) {
            // save context
            backup = {
              yylineno: this.yylineno,
              yylloc: {
                first_line: this.yylloc.first_line,
                last_line: this.last_line,
                first_column: this.yylloc.first_column,
                last_column: this.yylloc.last_column
              },
              yytext: this.yytext,
              match: this.match,
              matches: this.matches,
              matched: this.matched,
              yyleng: this.yyleng,
              offset: this.offset,
              _more: this._more,
              _input: this._input,
              yy: this.yy,
              conditionStack: this.conditionStack.slice(0),
              done: this.done
            };

            if (this.options.ranges) {
              backup.yylloc.range = this.yylloc.range.slice(0);
            }
          }

          lines = match[0].match(/(?:\r\n?|\n).*/g);

          if (lines) {
            this.yylineno += lines.length;
          }

          this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
          };
          this.yytext += match[0];
          this.match += match[0];
          this.matches = match;
          this.yyleng = this.yytext.length;

          if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
          }

          this._more = false;
          this._backtrack = false;
          this._input = this._input.slice(match[0].length);
          this.matched += match[0];
          token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);

          if (this.done && this._input) {
            this.done = false;
          }

          if (token) {
            return token;
          } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
              this[k] = backup[k];
            }

            return false; // rule action called reject() implying the next rule should be tested instead.
          }

          return false;
        },
        // return next match in input
        next: function next() {
          if (this.done) {
            return this.EOF;
          }

          if (!this._input) {
            this.done = true;
          }

          var token, match, tempMatch, index;

          if (!this._more) {
            this.yytext = '';
            this.match = '';
          }

          var rules = this._currentRules();

          for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);

            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
              match = tempMatch;
              index = i;

              if (this.options.backtrack_lexer) {
                token = this.test_match(tempMatch, rules[i]);

                if (token !== false) {
                  return token;
                } else if (this._backtrack) {
                  match = false;
                  continue; // rule action called reject() implying a rule MISmatch.
                } else {
                  // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                  return false;
                }
              } else if (!this.options.flex) {
                break;
              }
            }
          }

          if (match) {
            token = this.test_match(match, rules[index]);

            if (token !== false) {
              return token;
            } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)


            return false;
          }

          if (this._input === "") {
            return this.EOF;
          } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
              text: "",
              token: null,
              line: this.yylineno
            });
          }
        },
        // return next match that has a token
        lex: function lex() {
          var r = this.next();

          if (r) {
            return r;
          } else {
            return this.lex();
          }
        },
        // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
        begin: function begin(condition) {
          this.conditionStack.push(condition);
        },
        // pop the previously active lexer condition state off the condition stack
        popState: function popState() {
          var n = this.conditionStack.length - 1;

          if (n > 0) {
            return this.conditionStack.pop();
          } else {
            return this.conditionStack[0];
          }
        },
        // produce the lexer rule set which is active for the currently active lexer condition state
        _currentRules: function _currentRules() {
          if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
          } else {
            return this.conditions["INITIAL"].rules;
          }
        },
        // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
        topState: function topState(n) {
          n = this.conditionStack.length - 1 - Math.abs(n || 0);

          if (n >= 0) {
            return this.conditionStack[n];
          } else {
            return "INITIAL";
          }
        },
        // alias for begin(condition)
        pushState: function pushState(condition) {
          this.begin(condition);
        },
        // return the number of states currently on the stack
        stateStackSize: function stateStackSize() {
          return this.conditionStack.length;
        },
        options: {},
        performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {

          switch ($avoiding_name_collisions) {
            case 0:
              /* skip whitespace */
              break;

            case 1:
              /* skip comment */
              break;

            case 2:
              return 56;
              break;

            case 3:
              return 57;
              break;

            case 4:
              return 55;
              break;

            case 5:
              return 58;
              break;

            case 6:
              return 67;
              break;

            case 7:
              return 60;
              break;

            case 8:
              return 9;
              break;

            case 9:
              return 19;
              break;

            case 10:
              return 36;
              break;

            case 11:
              return 61;
              break;

            case 12:
              return 62;
              break;

            case 13:
              return 63;
              break;

            case 14:
              return 59;
              break;

            case 15:
              return 39;
              break;

            case 16:
              return 77;
              break;

            case 17:
              return 76;
              break;

            case 18:
              return 20;
              break;

            case 19:
              return 22;
              break;

            case 20:
              return 45;
              break;

            case 21:
              return 46;
              break;

            case 22:
              return 33;
              break;

            case 23:
              return 34;
              break;

            case 24:
              return 13;
              break;

            case 25:
              return 53;
              break;

            case 26:
              return 21;
              break;

            case 27:
              return 49;
              break;

            case 28:
              return 5;
              break;

            case 29:
              return 15;
              break;

            case 30:
              return 11;
              break;

            case 31:
              return '<=';
              break;

            case 32:
              return 51;
              break;

            case 33:
              return 72;
              break;

            case 34:
              return 31;
              break;

            case 35:
              return '_';
              break;

            case 36:
              return 24;
              break;

            case 37:
              return 25;
              break;

            case 38:
              return 26;
              break;

            case 39:
              return 27;
              break;

            case 40:
              return 40;
              break;

            case 41:
              return 10;
              break;
          }
        },
        rules: [/^(?:\s+)/, /^(?:\/\/.*)/, /^(?:any\b)/, /^(?:array\b)/, /^(?:as\b)/, /^(?:boolean\b)/, /^(?:enum\b)/, /^(?:false\b)/, /^(?:let\b)/, /^(?:map\b)/, /^(?:null\b)/, /^(?:number\b)/, /^(?:object\b)/, /^(?:string\b)/, /^(?:true\b)/, /^(?:undefined\b)/, /^(?:[-+]?(0|[1-9]\d*)(\.\d+)?)/, /^(?:"[^"\r\n]*")/, /^(?:\()/, /^(?:\))/, /^(?:{)/, /^(?:})/, /^(?:\[)/, /^(?:\])/, /^(?:\|>)/, /^(?:\|)/, /^(?:,)/, /^(?::)/, /^(?:;)/, /^(?:=~)/, /^(?:=)/, /^(?:<=)/, /^(?:\.{3})/, /^(?:\.{2})/, /^(?:\.)/, /^(?:_)/, /^(?:\+)/, /^(?:-)/, /^(?:\*)/, /^(?:\/)/, /^(?:\$)/, /^(?:[a-zA-Z_][a-zA-Z0-9_]*)/],
        conditions: {
          "INITIAL": {
            "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41],
            "inclusive": true
          }
        }
      };
      return lexer;
    }();

    parser.lexer = lexer;

    function Parser() {
      this.yy = {};
    }

    Parser.prototype = parser;
    parser.Parser = Parser;
    return new Parser();
  }();

  // General functions

  /**
   * Return the type name of the specified item
   *
   * @param {*} item
   * @returns {string}
   */
  function typeName(item) {
    switch (item) {
      case null:
        return "null";

      case undefined:
        return "undefined";

      default:
        if (Array.isArray(item)) {
          return "array";
        }

        return _typeof(item);
    }
  }
  /**
   * If all items are objects, a new object with all the properties of all objects will be merged. If the same property
   * exists on multiple objects, the last object with that property wins.
   *
   * If the first item is an array, a new array will be created by appending all non-array items and concatenating all
   * array items.
   *
   * @param {Object|Array} items
   * @returns {Object|Array|undefined}
   */

  function merge() {
    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {
      items[_key] = arguments[_key];
    }

    if (items.length > 0 && Array.isArray(items[0])) {
      var _items$;

      return (_items$ = items[0]).concat.apply(_items$, _toConsumableArray(items.slice(1)));
    } else if (items.every(function (item) {
      return isObject(item);
    })) {
      return Object.assign.apply(Object, [{}].concat(items));
    }

    return undefined;
  } // Array related functions

  /**
   * Return the length of an array
   *
   * @param {Array} list
   * @returns {number}
   */

  function length(list) {
    /* eslint-disable-line no-shadow */
    return Array.isArray(list) ? list.length : 0;
  }
  /**
   * Combine multiple arrays into a single array
   *
   * @param {Array<Array>} lists
   * @param {*} [missing=undefined]
   * @returns {Array}
   */

  function zip(lists) {
    var missing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
    var result = [];

    if (Array.isArray(lists) && lists.length > 0 && lists.every(function (l) {
      return Array.isArray(l);
    })) {
      var maxLength = Math.max.apply(Math, _toConsumableArray(lists.map(function (l) {
        return l.length;
      })));

      for (var i = 0; i < maxLength; i++) {
        var part = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = lists[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var list = _step.value;
            part.push(i < list.length ? list[i] : missing);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        result.push(part);
      }
    }

    return result;
  }
  /**
   * Partition an array into multiple arrays
   *
   * @param {Array} items
   * @param {number} count
   * @param {number} advance
   * @param {*} [missing=undefined]
   */

  function partition(items, count, advance) {
    var missing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;

    /* eslint-disable-next-line no-shadow */
    var length = items.length;
    var result = []; // default advance to count, if its not defined

    advance = advance === undefined ? count : advance; // we can't advance backwards and we always need to advance

    count = Math.max(1, count);
    advance = Math.max(1, advance);

    for (var i = 0; i < length; i += advance) {
      var part = [];
      var index = i;

      for (var j = 0; j < count; j++, index++) {
        part.push(index < length ? items[index] : missing);
      }

      result.push(part);
    }

    return result;
  }
  /**
   * Return a new array with the original array's content reversed
   *
   * @param {Array} items
   * @returns {Array|undefined}
   */

  function reverse(items) {
    return Array.isArray(items) ? items.slice().reverse() : undefined;
  } // Object related functions

  /**
   * Predicate to determine if an item is an object
   *
   * @param {*} item
   * @returns {boolean}
   */

  function isObject(item) {
    return item !== null && _typeof(item) === "object";
  }
  /**
   * Return a list of keys from an object
   *
   * @param {Object} item
   * @returns {string[]}
   */


  function keys(item) {
    /* eslint-disable-next-line compat/compat */
    return isObject(item) ? Object.keys(item) : [];
  }
  /**
   * Return a list of values from an object
   *
   * @param {Object} item
   * @returns {any[]}
   */

  function values(item) {
    /* eslint-disable-next-line compat/compat */
    return isObject(item) ? Object.values(item) : [];
  }
  /**
   * Return a list of key/value pairs from an object. Each element in the result is a 2-element array
   * where the first element is the key and the second element is the value
   *
   * @param {Object} item
   * @returns {Array<Array>}
   */

  function pairs(item) {
    /* eslint-disable-next-line compat/compat */
    return isObject(item) ? Object.entries(item) : [];
  }
  /**
   * Convert a list of key/value pairs into an object. This is the reverse of pairs
   *
   * @param {Array<Array>} pairs
   * @returns {Object}
   */

  function fromPairs(pairs) {
    /* eslint-disable-line no-shadow */
    var result = {};

    if (Array.isArray(pairs)) {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = pairs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var pair = _step2.value;

          if (pair.length >= 2) {
            var _pair = _slicedToArray(pair, 2),
                key = _pair[0],
                value = _pair[1];

            result[key] = value;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }

    return result;
  }

  var StdLib = /*#__PURE__*/Object.freeze({
    typeName: typeName,
    merge: merge,
    length: length,
    zip: zip,
    partition: partition,
    reverse: reverse,
    keys: keys,
    values: values,
    pairs: pairs,
    fromPairs: fromPairs
  });

  var FAILURE_VALUE = {};
  /**
   * Determine if object is something that can have properties
   *
   * @param {*} obj
   * @returns {boolean}
   */

  function isObject$1(obj) {
    return obj !== null && _typeof(obj) === "object";
  }
  /**
   * Transformer
   */


  var Transformer =
  /*#__PURE__*/
  function () {
    /**
     * Create a new empty Transformer. Normalizers can be used to validate and transform data. However, when a new
     * Transformer has been created, it needs to be populated with one or more type descriptions. The easiest way to do
     * this is with the static method fromSource.
     */
    function Transformer() {
      _classCallCheck(this, Transformer);

      this.functions = {};
      this.messages = [];
      this.verbose = false; // add standard library

      /* eslint-disable-next-line guard-for-in */

      for (var name in StdLib) {
        /* eslint-disable-next-line import/namespace */
        this.functions[name] = StdLib[name];
      }
    }
    /**
     * Add function
     *
     * @param {string} name
     * @param {Function} reference
     */


    _createClass(Transformer, [{
      key: "addFunction",
      value: function addFunction(name, reference) {
        // TODO: type check
        this.functions[name] = reference;
      }
      /**
       * Add information
       *
       * @param {string} message
       */

    }, {
      key: "addInfo",
      value: function addInfo(message) {
        if (this.verbose) {
          this.messages.push({
            type: "message",
            level: "info",
            message: message
          });
        }
      }
      /**
       * Add a warning
       *
       * @param {string} message
       */

    }, {
      key: "addWarning",
      value: function addWarning(message) {
        this.messages.push({
          type: "message",
          level: "warning",
          message: message
        });
      }
      /**
       * Add an error
       *
       * @param {string} message
       */

    }, {
      key: "addError",
      value: function addError(message) {
        this.messages.push({
          type: "message",
          level: "error",
          message: message
        });
      }
      /**
       * Compile and execute the source against the specfied structure
       *
       * @param {string} source
       * @param {*} structure
       * @returns {*}
       */

    }, {
      key: "execute",
      value: function execute(source, structure) {
        var statements = parser.parse(source);
        var symbolTable = Array.isArray(structure) || isObject$1(structure) === false ? {} : Object.create(structure);
        var result;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = statements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var statement = _step.value;

            switch (statement.type) {
              case "assignment":
              case "sequence":
                {
                  result = this.executeExpression(statement, structure, symbolTable);
                  break;
                }

              default:
                this.addError("unknown statement type: ".concat(statement.type));
                return FAILURE_VALUE;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return result;
      }
      /*
       * Execute a method and return its value
       *
       * @param {object} expression
       * @param {object} symbolTable
       * @returns {*}
       */

    }, {
      key: "executeExpression",
      value: function executeExpression(expression, structure, symbolTable) {
        var _this = this;

        var getNumbers = function getNumbers(operation) {
          var left = _this.executeExpression(expression.left, structure, symbolTable);

          if (left !== FAILURE_VALUE && typeof left === "number") {
            var right = _this.executeExpression(expression.right, structure, symbolTable);

            if (right !== FAILURE_VALUE && typeof right === "number") {
              return operation(left, right);
            }
          }

          return FAILURE_VALUE;
        };

        switch (expression.type) {
          case "assignment":
            {
              var value = this.executeExpression(expression.value, structure, symbolTable);

              if (value === FAILURE_VALUE) {
                return FAILURE_VALUE;
              }

              symbolTable[expression.name] = value;
              return value;
            }

          case "get-value":
            return symbolTable[expression.name];

          case "get-property":
            {
              var object = this.executeExpression(expression.left, structure, symbolTable);
              return isObject$1(object) ? object[expression.right] : FAILURE_VALUE;
            }

          case "get-index":
            {
              var left = expression.left,
                  right = expression.right;
              var array = this.executeExpression(left, structure, symbolTable);

              if (Array.isArray(array)) {
                var index = right < 0 ? array.length + right : right;
                return 0 <= index && index < array.length ? array[index] : FAILURE_VALUE;
              }

              return FAILURE_VALUE;
            }

          case "get-structure":
            return structure;

          case "sequence":
            {
              var currentObject = structure;
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (var _iterator2 = expression.steps[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var step = _step2.value;

                  if (step.type === "pattern") {
                    currentObject = this.executePattern(step, currentObject, symbolTable);
                  } else {
                    currentObject = this.executeExpression(step, currentObject, symbolTable);
                  }

                  if (currentObject === FAILURE_VALUE) {
                    return FAILURE_VALUE;
                  }
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                    _iterator2["return"]();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }

              return currentObject;
            }

          case "add":
            return getNumbers(function (a, b) {
              return a + b;
            });

          case "map":
            {
              var _expression$value = _slicedToArray(expression.value, 2),
                  valueGenerator = _expression$value[0],
                  transform = _expression$value[1];

              var values = this.executeExpression(valueGenerator, structure, symbolTable);

              if (values !== FAILURE_VALUE) {
                if (Array.isArray(values) === false) {
                  this.addError("First argument of map must evaluate to an array");
                  return FAILURE_VALUE;
                }

                var mapSymbolTable = Object.create(symbolTable);
                return values.map(function (value) {
                  return _this.executeExpression(transform, value, mapSymbolTable);
                });
              }

              return FAILURE_VALUE;
            }

          case "subtract":
            return getNumbers(function (a, b) {
              return a - b;
            });

          case "multiply":
            return getNumbers(function (a, b) {
              return a * b;
            });

          case "divide":
            return getNumbers(function (a, b) {
              return a / b;
            });

          case "invoke":
            {
              var args = expression.args.reduce(function (accum, arg) {
                if (arg.type === "spread") {
                  var _value = _this.executeExpression(arg.expression, structure, symbolTable); // const value = arg.name !== null ? symbolTable[arg.name] : structure;


                  if (Array.isArray(_value)) {
                    accum = accum.concat(_value);
                  } else {
                    accum.push(_value);
                  }
                } else {
                  accum.push(_this.executeExpression(arg, structure, symbolTable));
                }

                return accum;
              }, []);
              return this.invokeFunction(expression.name, args);
            }

          case "array":
            {
              var results = [];
              var _iteratorNormalCompletion3 = true;
              var _didIteratorError3 = false;
              var _iteratorError3 = undefined;

              try {
                for (var _iterator3 = expression.value[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                  var element = _step3.value;

                  if (element.type === "assignment") {
                    this.executeExpression(element, structure, symbolTable);
                  } else {
                    var _value2 = this.executeExpression(element, structure, symbolTable);

                    if (_value2 === FAILURE_VALUE) {
                      return FAILURE_VALUE;
                    }

                    results.push(_value2);
                  }
                }
              } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                    _iterator3["return"]();
                  }
                } finally {
                  if (_didIteratorError3) {
                    throw _iteratorError3;
                  }
                }
              }

              return results;
            }

          case "boolean":
          case "null":
          case "number":
          case "string":
          case "undefined":
            return expression.value;

          case "object":
            return this.executeObjectExpression(expression, structure, symbolTable);

          default:
            this.addError("Unrecognized expression type: '".concat(expression.type, "'"));
            return FAILURE_VALUE;
        }
      }
      /**
       * Execute an object pattern
       *
       * @param {Object} pattern
       * @param {*} structure
       * @param {Object} symbolTable
       * @returns {*}
       */

    }, {
      key: "executeObjectExpression",
      value: function executeObjectExpression(pattern, structure, symbolTable) {
        var objectSymbolTable = Object.create(symbolTable);
        var result = {};
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = pattern.value[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var element = _step4.value;

            switch (element.type) {
              case "property":
                {
                  var name = this.executeExpression(element.name, structure, objectSymbolTable);

                  if (name === FAILURE_VALUE) {
                    return FAILURE_VALUE;
                  } else if (typeof name !== "string") {
                    this.addError("Property names must be string types");
                    return FAILURE_VALUE;
                  }

                  var value = element.value !== null ? this.executeExpression(element.value, structure, objectSymbolTable) : symbolTable[name];

                  if (value === FAILURE_VALUE) {
                    return FAILURE_VALUE;
                  }

                  result[name] = value;
                  break;
                }

              case "assignment":
                this.executeExpression(element, structure, objectSymbolTable);
                break;

              default:
                this.addError("Unrecognized object expression element type: ".concat(element.type));
                return FAILURE_VALUE;
            }
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
              _iterator4["return"]();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }

        return result;
      }
      /*
       * Acquire the value of a type pattern from the specified structure. Any named entities will be populated in the
       * specified symbolTable
       *
       * @param {object} pattern
       * @param {*} structure
       * @param {object} symbolTable
       * @returns {*}
       */

    }, {
      key: "executePattern",
      value: function executePattern(pattern, structure, symbolTable) {
        switch (pattern.patternType) {
          case "any":
            this.assign(symbolTable, pattern.assignTo, structure);
            return structure;

          case "array":
            if (Array.isArray(structure)) {
              this.assign(symbolTable, pattern.assignTo, structure);
              return structure;
            }

            return FAILURE_VALUE;

          case "array-pattern":
            {
              var result = this.executeArrayPattern(pattern, structure, symbolTable);
              return result === FAILURE_VALUE ? FAILURE_VALUE : symbolTable;
            }

          case "boolean":
            if (typeof structure === "boolean") {
              if (pattern.value === null || pattern.value === structure) {
                this.assign(symbolTable, pattern.assignTo, structure);
                return structure;
              }
            }

            return FAILURE_VALUE;

          case "null":
            if (structure === null) {
              this.assign(symbolTable, pattern.assignTo, structure);
              return structure;
            }

            return FAILURE_VALUE;

          case "number":
            if (typeof structure === "number") {
              if (pattern.value === null || pattern.value === structure) {
                this.assign(symbolTable, pattern.assignTo, structure);
                return structure;
              }
            }

            return FAILURE_VALUE;

          case "object":
            if (isObject$1(structure)) {
              this.assign(symbolTable, pattern.assignTo, structure);
              return structure;
            }

            return FAILURE_VALUE;

          case "object-pattern":
            {
              if (isObject$1(structure) === false) {
                return FAILURE_VALUE;
              }

              var _result = {};
              var _iteratorNormalCompletion5 = true;
              var _didIteratorError5 = false;
              var _iteratorError5 = undefined;

              try {
                for (var _iterator5 = pattern.value[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                  var property = _step5.value;
                  var name = property.name,
                      propertyPattern = property.pattern,
                      assignTo = property.assignTo;

                  if (name in structure) {
                    var value = this.executePattern(propertyPattern, structure[name], symbolTable);

                    if (value === FAILURE_VALUE) {
                      return FAILURE_VALUE;
                    }

                    this.assign(symbolTable, assignTo, structure[name]);
                    this.assign(_result, assignTo, value);
                  } else {
                    return FAILURE_VALUE;
                  }
                }
              } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                    _iterator5["return"]();
                  }
                } finally {
                  if (_didIteratorError5) {
                    throw _iteratorError5;
                  }
                }
              }

              this.assign(symbolTable, pattern.assignTo, structure);
              return _result;
            }

          case "reference":
            if (pattern.value in this.patterns) {
              var referencedPattern = this.patterns[pattern.value];

              var _result2 = this.executePattern(referencedPattern, structure, symbolTable);

              if (_result2 !== FAILURE_VALUE) {
                this.assign(symbolTable, pattern.assignTo, _result2);
              }

              return _result2;
            }

            return FAILURE_VALUE;

          case "string":
            if (typeof structure === "string") {
              if (pattern.value === null || pattern.value === structure) {
                this.assign(symbolTable, pattern.assignTo, structure);
                return structure;
              }
            }

            return FAILURE_VALUE;

          case "undefined":
            // NOTE: Our current failure value is undefined, so this will be treated as an error. I can change
            // FAILURE_VALUE to be a sigil. I'll just have to be careful to return undefined at the top-most level.
            // I'm leaving this for now as this is probably not going to be used much
            if (structure === undefined) {
              this.assign(symbolTable, pattern.assignTo, structure);
              return structure;
            }

            return FAILURE_VALUE;

          default:
            throw new TypeError("unrecognized pattern type: '".concat(pattern.type, "'"));
        }
      }
      /*
       * Execute an array pattern
       *
       * @param {Object} pattern
       * @param {*} structure
       * @param {Object} symbolTable
       * @returns {*}
       */

    }, {
      key: "executeArrayPattern",
      value: function executeArrayPattern(pattern, structure, symbolTable) {
        if (Array.isArray(structure) === false) {
          return FAILURE_VALUE;
        }

        var result = [];
        var index = 0;
        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;

        try {
          for (var _iterator6 = pattern.value[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
            var element = _step6.value;
            var results = this.executeArrayPatternElement(element, index, structure, symbolTable);

            if (results === FAILURE_VALUE) {
              return FAILURE_VALUE;
            }

            result = result.concat(results);
            index += results.length;
          }
        } catch (err) {
          _didIteratorError6 = true;
          _iteratorError6 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
              _iterator6["return"]();
            }
          } finally {
            if (_didIteratorError6) {
              throw _iteratorError6;
            }
          }
        }

        if (index === structure.length) {
          this.assign(symbolTable, pattern.assignTo, structure);
          return result;
        }

        return FAILURE_VALUE;
      }
      /*
       * Execute an element from an array pattern
       *
       * @param {Object} element
       * @param {number} index
       * @param {*} structure
       * @param {Object} symbolTable
       * @returns {Array|undefined}
       */

    }, {
      key: "executeArrayPatternElement",
      value: function executeArrayPatternElement(element, index, structure, symbolTable) {
        var result = [];

        switch (element.type) {
          case "element":
            {
              var results = this.executeArrayElementPattern(element, index, structure, symbolTable);

              if (results === FAILURE_VALUE) {
                return FAILURE_VALUE;
              }

              result = result.concat(results);
              index += results.length;
              break;
            }

          case "element-group":
            {
              var _results = this.executeArrayElementGroupPattern(element, index, structure, symbolTable);

              if (_results === FAILURE_VALUE) {
                return FAILURE_VALUE;
              }

              result = result.concat(_results);
              index += _results.length;
              break;
            }

          default:
            this.addError("Unrecognized array pattern element type: '".concat(element.type, "'"));
            return FAILURE_VALUE;
        }

        return result;
      }
      /*
       * Execute array element pattern
       *
       * @param {Object} element
       * @param {number} index
       * @param {*} structure
       * @param {Object} symbolTable
       * @returns {Array|undefined}
       */

    }, {
      key: "executeArrayElementPattern",
      value: function executeArrayElementPattern(element, index, structure, symbolTable) {
        var pattern = element.pattern,
            _element$range = element.range,
            start = _element$range.start,
            stop = _element$range.stop;
        var result = [];

        for (var i = 0; i < stop; i++) {
          var actualIndex = index + i; // treat out-of-bounds like a failure

          var value = actualIndex < structure.length ? this.executePattern(pattern, structure[actualIndex], symbolTable) : FAILURE_VALUE; // if we processed enough, continue, else failure

          if (value === FAILURE_VALUE) {
            if (i >= start) {
              break;
            }

            return FAILURE_VALUE;
          } // save result


          if (stop > 1) {
            this.pushAssign(symbolTable, element.assignTo, value);
          } else {
            this.assign(symbolTable, element.assignTo, value);
          }

          result.push(value);
        }

        return result;
      }
      /*
       * Execute array element group pattern
       *
       * @param {Object} element
       * @param {number} index
       * @param {*} structure
       * @param {Object} symbolTable
       * @returns {Array|undefined}
       */

    }, {
      key: "executeArrayElementGroupPattern",
      value: function executeArrayElementGroupPattern(group, index, structure, symbolTable) {
        var elements = group.elements,
            _group$range = group.range,
            start = _group$range.start,
            stop = _group$range.stop;
        var result = [];

        for (var i = 0; i < stop; i++) {
          var groupResults = []; // all elements must be successful

          var _iteratorNormalCompletion7 = true;
          var _didIteratorError7 = false;
          var _iteratorError7 = undefined;

          try {
            for (var _iterator7 = elements[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
              var _element = _step7.value;
              var elementSymbolTable = Object.create(symbolTable);
              var results = this.executeArrayPatternElement(_element, index, structure, elementSymbolTable);

              if (results === FAILURE_VALUE) {
                groupResults = FAILURE_VALUE;
                break;
              } // copy result into main symbol table


              if (_element.assignTo !== null && _element.assignTo !== undefined && _element.assignTo in elementSymbolTable) {
                if (stop > 1) {
                  // this.pushAssign(symbolTable, element.assignTo, results);
                  this.pushAssign(symbolTable, _element.assignTo, elementSymbolTable[_element.assignTo]);
                } else {
                  // this.assign(symbolTable, element.assignTo, results);
                  this.assign(symbolTable, _element.assignTo, elementSymbolTable[_element.assignTo]);
                }
              } // collect everything that matched and advance to the next item to match


              result = result.concat(results);
              index += results.length; // collect what we've matched in this group so far

              groupResults = groupResults.concat(results);
            }
          } catch (err) {
            _didIteratorError7 = true;
            _iteratorError7 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                _iterator7["return"]();
              }
            } finally {
              if (_didIteratorError7) {
                throw _iteratorError7;
              }
            }
          }

          if (groupResults === FAILURE_VALUE) {
            // make sure we met our lower bounds criteria
            if (i >= start) {
              // if we didn't process any elements, then we haven't created arrays in the symbol table for this
              // group or its elements.
              if (i === 0) {
                this.assign(symbolTable, group.assignTo, []);
                var _iteratorNormalCompletion8 = true;
                var _didIteratorError8 = false;
                var _iteratorError8 = undefined;

                try {
                  for (var _iterator8 = elements[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                    var element = _step8.value;
                    this.assign(symbolTable, element.assignTo, []);
                  }
                } catch (err) {
                  _didIteratorError8 = true;
                  _iteratorError8 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                      _iterator8["return"]();
                    }
                  } finally {
                    if (_didIteratorError8) {
                      throw _iteratorError8;
                    }
                  }
                }
              }

              return result;
            }

            return FAILURE_VALUE;
          }

          if (stop > 1) {
            this.pushAssign(symbolTable, group.assignTo, groupResults);
          } else {
            this.assign(symbolTable, group.assignTo, groupResults);
          }
        }

        return result;
      }
      /*
       * Invoke a user-defined method and return its value
       *
       * @param {string} type
       * @param {Array} args
       * @returns {*}
       */

    }, {
      key: "invokeFunction",
      value: function invokeFunction(type, args) {
        if (type in this.functions) {
          var _this$functions;

          return (_this$functions = this.functions)[type].apply(_this$functions, _toConsumableArray(args));
        }

        return FAILURE_VALUE;
      }
      /**
       * Add a symbol/value to the symbol table, warning if an overwrite is occurring
       *
       * @param {Object} symbolTable
       * @param {string} name
       * @param {*} value
       */

    }, {
      key: "assign",
      value: function assign(symbolTable, name, value) {
        if (name !== null && name !== undefined) {
          /* eslint-disable-next-line no-prototype-builtins */
          if (symbolTable.hasOwnProperty(name)) {
            this.addWarning("Overwriting ".concat(name, " with value: ").concat(value));
          }

          symbolTable[name] = value;
        }
      }
      /**
       * Push a value onto the array at the name in the symbol table. If the name is not in the table already, an array will
       * be created and then the value will be pushed to it. This is used for grouped elements.
       *
       * @param {Object} symbolTable
       * @param {string} name
       * @param {*} value
       */

    }, {
      key: "pushAssign",
      value: function pushAssign(symbolTable, name, value) {
        if (name !== null && name !== undefined) {
          /* eslint-disable-next-line no-prototype-builtins */
          var items = symbolTable.hasOwnProperty(name) ? symbolTable[name] : [];

          if (Array.isArray(items)) {
            items.push(value);
            symbolTable[name] = items;
          } else {
            this.addWarning("Unable to push to ".concat(name, " because it is not an array: ").concat(items));
          }
        }
      }
    }]);

    return Transformer;
  }();

  /**
   * @module kld-data-transformer
   */

  exports.FAILURE_VALUE = FAILURE_VALUE;
  exports.Parser = parser;
  exports.Transformer = Transformer;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
