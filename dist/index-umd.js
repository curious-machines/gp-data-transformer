(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.KldDataTransformer = {}));
}(this, function (exports) { 'use strict';

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  /* parser generated by jison 0.4.18 */

  /*
    Returns a Parser object of the following structure:

    Parser: {
      yy: {}
    }

    Parser.prototype: {
      yy: {},
      trace: function(),
      symbols_: {associative list: name ==> number},
      terminals_: {associative list: number ==> name},
      productions_: [...],
      performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
      table: [...],
      defaultActions: {...},
      parseError: function(str, hash),
      parse: function(input),

      lexer: {
          EOF: 1,
          parseError: function(str, hash),
          setInput: function(input),
          input: function(),
          unput: function(str),
          more: function(),
          less: function(n),
          pastInput: function(),
          upcomingInput: function(),
          showPosition: function(),
          test_match: function(regex_match_array, rule_index),
          next: function(),
          lex: function(),
          begin: function(condition),
          popState: function(),
          _currentRules: function(),
          topState: function(),
          pushState: function(condition),

          options: {
              ranges: boolean           (optional: true ==> token location info will include a .range[] member)
              flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
              backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
          },

          performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
          rules: [...],
          conditions: {associative list: name ==> set},
      }
    }


    token location info (@$, _$, etc.): {
      first_line: n,
      last_line: n,
      first_column: n,
      last_column: n,
      range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
    }


    the parseError function receives a 'hash' object with these members for lexer and parser errors: {
      text:        (matched text)
      token:       (the produced terminal token, if any)
      line:        (yylineno)
    }
    while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
      loc:         (yylloc)
      expected:    (string describing the set of expected tokens)
      recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
    }
  */
  var parser = function () {
    var o = function o(k, v, _o, l) {
      for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {
      }

      return _o;
    },
        $V0 = [1, 5],
        $V1 = [1, 11],
        $V2 = [1, 6],
        $V3 = [1, 7],
        $V4 = [1, 8],
        $V5 = [1, 10],
        $V6 = [1, 20],
        $V7 = [1, 21],
        $V8 = [1, 24],
        $V9 = [1, 14],
        $Va = [1, 18],
        $Vb = [1, 19],
        $Vc = [1, 23],
        $Vd = [1, 22],
        $Ve = [1, 7, 8, 11, 13, 14, 17, 23, 24, 26, 29, 36, 37, 77, 78],
        $Vf = [1, 7, 8, 11, 13, 14, 17, 23, 24, 26, 28, 29, 36, 37, 38, 41, 42, 77, 78],
        $Vg = [1, 31],
        $Vh = [1, 32],
        $Vi = [1, 33],
        $Vj = [1, 34],
        $Vk = [1, 7, 8, 11, 13, 14, 16, 17, 23, 24, 26, 28, 29, 36, 37, 38, 41, 42, 56, 57, 58, 59, 77, 78],
        $Vl = [2, 48],
        $Vm = [1, 36],
        $Vn = [1, 37],
        $Vo = [1, 7, 8, 11, 13, 14, 16, 17, 23, 24, 26, 28, 29, 36, 37, 38, 41, 42, 48, 50, 56, 57, 58, 59, 64, 77, 78],
        $Vp = [1, 45],
        $Vq = [2, 13],
        $Vr = [2, 14],
        $Vs = [2, 15],
        $Vt = [1, 70],
        $Vu = [1, 68],
        $Vv = [1, 54],
        $Vw = [1, 55],
        $Vx = [1, 56],
        $Vy = [1, 57],
        $Vz = [1, 58],
        $VA = [1, 69],
        $VB = [1, 72],
        $VC = [1, 59],
        $VD = [1, 60],
        $VE = [1, 62],
        $VF = [1, 63],
        $VG = [1, 65],
        $VH = [1, 71],
        $VI = [38, 42],
        $VJ = [28, 42],
        $VK = [1, 90],
        $VL = [1, 91],
        $VM = [1, 92],
        $VN = [1, 111],
        $VO = [1, 7, 8, 11, 13, 14, 17, 23, 24, 26, 28, 29, 36, 37, 38, 41, 42, 64, 77, 78],
        $VP = [1, 7, 8, 11, 13, 14, 17, 23, 24, 26, 28, 29, 36, 37, 38, 41, 42, 48, 50, 64, 77, 78],
        $VQ = [1, 120],
        $VR = [1, 125],
        $VS = [1, 7, 8, 11, 13, 14, 16, 17, 23, 24, 26, 28, 29, 36, 37, 38, 41, 42, 56, 57, 77, 78],
        $VT = [42, 50],
        $VU = [1, 149],
        $VV = [38, 42, 50],
        $VW = [38, 42, 48, 50],
        $VX = [28, 42, 48],
        $VY = [1, 160],
        $VZ = [1, 161],
        $V_ = [1, 163],
        $V$ = [1, 165],
        $V01 = [41, 42],
        $V11 = [1, 166],
        $V21 = [1, 168],
        $V31 = [2, 42],
        $V41 = [1, 170],
        $V51 = [1, 175],
        $V61 = [1, 176],
        $V71 = [1, 189];

    var parser = {
      trace: function trace() {},
      yy: {},
      symbols_: {
        "error": 2,
        "program": 3,
        "statements": 4,
        "statement": 5,
        "transform": 6,
        "GENERATOR": 7,
        "IDENTIFIER": 8,
        "=": 9,
        "generator": 10,
        "PATTERN": 11,
        "namedTypePattern": 12,
        "TRANSFORM": 13,
        "TYPE": 14,
        "typeDefinition": 15,
        "<=": 16,
        "_": 17,
        "typePatterns": 18,
        "ANY_TYPE": 19,
        "ARRAY_TYPE": 20,
        "arrayTypeDefinition": 21,
        "BOOLEAN_TYPE": 22,
        "TRUE": 23,
        "FALSE": 24,
        "ENUMERATION": 25,
        "{": 26,
        "identifiers": 27,
        "}": 28,
        "NULL_TYPE": 29,
        "NUMBER_TYPE": 30,
        "float": 31,
        "OBJECT_TYPE": 32,
        "objectTypeDefinition": 33,
        "STRING_TYPE": 34,
        "string": 35,
        "UNDEFINED_TYPE": 36,
        "[": 37,
        "]": 38,
        "transformElements": 39,
        "assignments": 40,
        ";": 41,
        ",": 42,
        "transformProperties": 43,
        "transformProperty": 44,
        ":": 45,
        "assignment": 46,
        "namedGenerator": 47,
        "AS": 48,
        "(": 49,
        ")": 50,
        "parameterList": 51,
        "arrayExpression": 52,
        "boolean": 53,
        "objectExpression": 54,
        ".": 55,
        "+": 56,
        "-": 57,
        "*": 58,
        "/": 59,
        "expressionElements": 60,
        "expressionElement": 61,
        "expressionProperties": 62,
        "expressionProperty": 63,
        "|": 64,
        "typePattern": 65,
        "arrayPattern": 66,
        "objectPattern": 67,
        "patternElements": 68,
        "namedPatternElement": 69,
        "patternElement": 70,
        "range": 71,
        "integer": 72,
        "..": 73,
        "patternProperties": 74,
        "namedPatternProperty": 75,
        "namedProperty": 76,
        "STRING": 77,
        "NUMBER": 78,
        "stringOrIdentifier": 79,
        "$accept": 0,
        "$end": 1
      },
      terminals_: {
        2: "error",
        7: "GENERATOR",
        8: "IDENTIFIER",
        9: "=",
        11: "PATTERN",
        13: "TRANSFORM",
        14: "TYPE",
        16: "<=",
        17: "_",
        19: "ANY_TYPE",
        20: "ARRAY_TYPE",
        22: "BOOLEAN_TYPE",
        23: "TRUE",
        24: "FALSE",
        25: "ENUMERATION",
        26: "{",
        28: "}",
        29: "NULL_TYPE",
        30: "NUMBER_TYPE",
        32: "OBJECT_TYPE",
        34: "STRING_TYPE",
        36: "UNDEFINED_TYPE",
        37: "[",
        38: "]",
        41: ";",
        42: ",",
        45: ":",
        48: "AS",
        49: "(",
        50: ")",
        55: ".",
        56: "+",
        57: "-",
        58: "*",
        59: "/",
        64: "|",
        73: "..",
        77: "STRING",
        78: "NUMBER"
      },
      productions_: [0, [3, 1], [4, 2], [4, 1], [5, 1], [5, 4], [5, 4], [5, 4], [5, 4], [6, 1], [6, 3], [6, 3], [6, 3], [6, 2], [6, 2], [6, 2], [15, 1], [15, 1], [15, 1], [15, 1], [15, 1], [15, 1], [15, 4], [15, 1], [15, 1], [15, 1], [15, 1], [15, 1], [15, 1], [15, 1], [15, 1], [21, 2], [21, 3], [21, 5], [39, 3], [39, 1], [33, 2], [33, 3], [33, 5], [43, 3], [43, 1], [44, 3], [44, 1], [40, 3], [40, 1], [46, 3], [47, 1], [47, 3], [10, 1], [10, 3], [10, 4], [10, 1], [10, 1], [10, 1], [10, 1], [10, 1], [10, 1], [10, 1], [10, 3], [10, 3], [10, 3], [10, 3], [10, 3], [52, 2], [52, 3], [60, 3], [60, 1], [61, 1], [54, 2], [54, 3], [62, 3], [62, 1], [63, 3], [63, 1], [51, 3], [51, 1], [18, 3], [18, 1], [12, 1], [12, 3], [65, 1], [65, 1], [65, 1], [65, 1], [65, 1], [65, 1], [65, 1], [65, 1], [65, 1], [65, 1], [65, 1], [65, 1], [65, 1], [65, 1], [65, 2], [65, 2], [65, 1], [66, 2], [66, 3], [68, 3], [68, 1], [69, 1], [69, 3], [70, 1], [70, 3], [70, 3], [70, 5], [71, 3], [71, 2], [71, 2], [71, 1], [67, 2], [67, 3], [74, 3], [74, 1], [75, 1], [75, 3], [76, 3], [76, 1], [53, 1], [53, 1], [35, 1], [72, 1], [31, 1], [79, 1], [79, 1], [27, 3], [27, 1]],
      performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate
      /* action[1] */
      , $$
      /* vstack */
      , _$
      /* lstack */
      ) {
        /* this == yyval */
        var $0 = $$.length - 1;

        switch (yystate) {
          case 1:
            return $$[$0];
            break;

          case 2:
            $$[$0 - 1].push($$[$0]);
            this.$ = $$[$0 - 1];
            break;

          case 3:
          case 35:
          case 40:
          case 44:
          case 66:
          case 71:
          case 75:
          case 77:
          case 100:
          case 114:
          case 127:
            this.$ = [$$[$0]];
            break;

          case 4:
          case 18:
          case 27:
          case 92:
          case 93:
            this.$ = $$[$0];
            break;

          case 5:
            this.$ = {
              type: 'generator-assignment',
              name: $$[$0 - 2],
              value: $$[$0]
            };
            break;

          case 6:
            this.$ = {
              type: 'pattern-assignment',
              name: $$[$0 - 2],
              value: $$[$0]
            };
            break;

          case 7:
            this.$ = {
              type: 'transform-assignment',
              name: $$[$0 - 2],
              value: $$[$0]
            };
            break;

          case 8:
            this.$ = {
              type: 'type-assignment',
              name: $$[$0 - 2],
              value: $$[$0]
            };
            break;

          case 9:
            this.$ = {
              type: 'transform',
              patterns: [{
                type: 'pattern',
                patternType: 'any',
                value: null
              }],
              returnValue: $$[$0]
            };
            break;

          case 10:
            this.$ = {
              type: 'transform',
              patterns: null,
              returnValue: $$[$0 - 2]
            };
            break;

          case 11:
            this.$ = {
              type: 'transform',
              patterns: $$[$0],
              returnValue: $$[$0 - 2]
            };
            break;

          case 12:
            this.$ = {
              type: 'transform',
              patterns: $$[$0],
              returnValue: null
            };
            break;

          case 13:
            this.$ = {
              type: 'generator-reference',
              name: $$[$0]
            };
            break;

          case 14:
            this.$ = {
              type: 'transform-reference',
              name: $$[$0]
            };
            break;

          case 15:
            this.$ = {
              type: 'type-reference',
              name: $$[$0]
            };
            break;

          case 16:
            this.$ = {
              type: 'type-definition',
              definition: 'any',
              value: null
            };
            break;

          case 17:
            this.$ = {
              type: 'type-definition',
              definition: 'array',
              value: null
            };
            break;

          case 19:
            this.$ = {
              type: 'type-definition',
              definition: 'boolean',
              value: null
            };
            break;

          case 20:
            this.$ = {
              type: 'type-definition',
              definition: 'boolean',
              value: true
            };
            break;

          case 21:
            this.$ = {
              type: 'type-definition',
              definition: 'boolean',
              value: false
            };
            break;

          case 22:
            this.$ = {
              type: 'type-definition',
              definition: 'enumeration',
              value: $$[$0 - 1]
            };
            break;

          case 23:
            this.$ = {
              type: 'type-definition',
              definition: 'null',
              value: null
            };
            break;

          case 24:
            this.$ = {
              type: 'type-definition',
              definition: 'number',
              value: null
            };
            break;

          case 25:
            this.$ = {
              type: 'type-definition',
              definition: 'number',
              value: $$[$0]
            };
            break;

          case 26:
            this.$ = {
              type: 'type-definition',
              definition: 'object',
              value: null
            };
            break;

          case 28:
            this.$ = {
              type: 'type-definition',
              definition: 'string',
              value: null
            };
            break;

          case 29:
            this.$ = {
              type: 'type-definition',
              definition: 'string',
              value: $$[$0]
            };
            break;

          case 30:
            this.$ = {
              type: 'type-definition',
              definition: 'undefined',
              value: null
            };
            break;

          case 31:
            this.$ = {
              type: 'type-definition',
              definition: 'array',
              value: []
            };
            break;

          case 32:
            this.$ = {
              type: 'type-definition',
              definition: 'array',
              value: $$[$0 - 1]
            };
            break;

          case 33:
            this.$ = {
              type: 'type-definition',
              definition: 'array',
              value: $$[$0 - 3].concat($$[$0 - 1])
            };
            break;

          case 34:
          case 39:
          case 43:
          case 65:
          case 70:
          case 74:
          case 76:
          case 99:
          case 113:
          case 126:
            $$[$0 - 2].push($$[$0]);
            this.$ = $$[$0 - 2];
            break;

          case 36:
            this.$ = {
              type: 'type-definition',
              definition: 'object',
              value: []
            };
            break;

          case 37:
            this.$ = {
              type: 'type-definition',
              definition: 'object',
              value: $$[$0 - 1]
            };
            break;

          case 38:
            this.$ = {
              type: 'type-definition',
              definition: 'object',
              value: $$[$0 - 3].concat($$[$0 - 1])
            };
            break;

          case 41:
            this.$ = {
              type: 'type-property',
              name: $$[$0 - 2],
              value: $$[$0]
            };
            break;

          case 42:
            this.$ = {
              type: 'type-property',
              name: $$[$0],
              value: null
            };
            break;

          case 45:
            this.$ = {
              type: 'assignment',
              name: $$[$0 - 2],
              value: $$[$0]
            };
            break;

          case 46:
          case 78:
          case 101:
            $$[$0].assignTo = null;
            this.$ = $$[$0];
            break;

          case 47:
          case 79:
          case 102:
          case 116:
            $$[$0 - 2].assignTo = $$[$0];
            this.$ = $$[$0 - 2];
            break;

          case 48:
            this.$ = {
              type: 'generator',
              expression: {
                type: 'get-value',
                name: $$[$0]
              }
            };
            break;

          case 49:
            this.$ = {
              type: 'generator',
              expression: {
                type: 'invoke',
                name: $$[$0 - 2],
                args: []
              }
            };
            break;

          case 50:
            this.$ = {
              type: 'generator',
              expression: {
                type: 'invoke',
                name: $$[$0 - 3],
                args: $$[$0 - 1]
              }
            };
            break;

          case 51:
          case 56:
            this.$ = {
              type: 'generator',
              expression: $$[$0]
            };
            break;

          case 52:
            this.$ = {
              type: 'generator',
              expression: {
                type: 'boolean',
                value: $$[$0]
              }
            };
            break;

          case 53:
            this.$ = {
              type: 'generator',
              expression: {
                type: 'boolean',
                value: null
              }
            };
            break;

          case 54:
            this.$ = {
              type: 'generator',
              expression: {
                type: 'number',
                value: $$[$0]
              }
            };
            break;

          case 55:
            this.$ = {
              type: 'generator',
              expression: {
                type: 'string',
                value: $$[$0]
              }
            };
            break;

          case 57:
            this.$ = {
              type: 'generator',
              expression: {
                type: 'string',
                value: undefined
              }
            };
            break;

          case 58:
            this.$ = {
              type: 'generator',
              expression: {
                type: 'get-property',
                left: {
                  type: 'get-value',
                  name: $$[$0 - 2]
                },
                right: $$[$0]
              }
            };
            break;

          case 59:
            this.$ = {
              type: 'generator',
              expression: {
                type: 'add',
                left: $$[$0 - 2],
                right: $$[$0]
              }
            };
            break;

          case 60:
            this.$ = {
              type: 'generator',
              expression: {
                type: 'subtract',
                left: $$[$0 - 2],
                right: $$[$0]
              }
            };
            break;

          case 61:
            this.$ = {
              type: 'generator',
              expression: {
                type: 'multiply',
                left: $$[$0 - 2],
                right: $$[$0]
              }
            };
            break;

          case 62:
            this.$ = {
              type: 'generator',
              expression: {
                type: 'divide',
                left: $$[$0 - 2],
                right: $$[$0]
              }
            };
            break;

          case 63:
            this.$ = {
              type: 'array',
              value: []
            };
            break;

          case 64:
            this.$ = {
              type: 'array',
              value: $$[$0 - 1]
            };
            break;

          case 67:
          case 115:
          case 124:
            this.$ = $$[$0];
            break;

          case 68:
            this.$ = {
              type: 'object',
              value: []
            };
            break;

          case 69:
            this.$ = {
              type: 'object',
              value: $$[$0 - 1]
            };
            break;

          case 72:
            $$[$0].name = $$[$0 - 2];
            this.$ = $$[$0];
            break;

          case 73:
            this.$ = {
              type: 'generator',
              name: $$[$0],
              expression: {
                type: 'get-value',
                name: $$[$0]
              }
            };
            break;

          case 80:
            this.$ = {
              type: 'pattern',
              patternType: 'any',
              value: null
            };
            break;

          case 81:
            this.$ = {
              type: 'pattern',
              patternType: 'array',
              value: null
            };
            break;

          case 82:
            this.$ = {
              type: 'pattern',
              patternType: 'boolean',
              value: null
            };
            break;

          case 83:
            this.$ = {
              type: 'pattern',
              patternType: 'boolean',
              value: true
            };
            break;

          case 84:
            this.$ = {
              type: 'pattern',
              patternType: 'boolean',
              value: false
            };
            break;

          case 85:
            this.$ = {
              type: 'pattern',
              patternType: 'null',
              value: null
            };
            break;

          case 86:
            this.$ = {
              type: 'pattern',
              patternType: 'number',
              value: null
            };
            break;

          case 87:
            this.$ = {
              type: 'pattern',
              patternType: 'number',
              value: $$[$0]
            };
            break;

          case 88:
            this.$ = {
              type: 'pattern',
              patternType: 'object',
              value: null
            };
            break;

          case 89:
            this.$ = {
              type: 'pattern',
              patternType: 'string',
              value: null
            };
            break;

          case 90:
            this.$ = {
              type: 'pattern',
              patternType: 'string',
              value: $$[$0]
            };
            break;

          case 91:
            this.$ = {
              type: 'pattern',
              patternType: 'undefined',
              value: null
            };
            break;

          case 94:
            this.$ = {
              type: 'pattern-reference',
              name: $$[$0]
            };
            break;

          case 95:
            this.$ = {
              type: 'enumeration-reference',
              name: $$[$0]
            };
            break;

          case 96:
            this.$ = {
              type: 'pattern',
              patternType: 'reference',
              value: $$[$0]
            };
            break;

          case 97:
            this.$ = {
              type: 'pattern',
              patternType: 'array-pattern',
              value: []
            };
            break;

          case 98:
            this.$ = {
              type: 'pattern',
              patternType: 'array-pattern',
              value: $$[$0 - 1]
            };
            break;

          case 103:
            this.$ = {
              type: 'element',
              pattern: $$[$0],
              range: {
                type: 'range',
                start: 1,
                stop: 1
              }
            };
            break;

          case 104:
            this.$ = {
              type: 'element',
              pattern: $$[$0 - 2],
              range: $$[$0]
            };
            break;

          case 105:
            this.$ = {
              type: 'element-group',
              elements: $$[$0 - 1],
              range: {
                type: 'range',
                start: 1,
                stop: 1
              }
            };
            break;

          case 106:
            this.$ = {
              type: 'element-group',
              elements: $$[$0 - 3],
              range: $$[$0]
            };
            break;

          case 107:
            this.$ = {
              type: 'range',
              start: $$[$0 - 2],
              stop: $$[$0]
            };
            break;

          case 108:
            this.$ = {
              type: 'range',
              start: 0,
              stop: $$[$0]
            };
            break;

          case 109:
            this.$ = {
              type: 'range',
              start: $$[$0 - 1],
              stop: Infinity
            };
            break;

          case 110:
            this.$ = {
              type: 'range',
              start: $$[$0],
              stop: $$[$0]
            };
            break;

          case 111:
            this.$ = {
              type: 'pattern',
              patternType: 'object',
              value: null
            };
            break;

          case 112:
            this.$ = {
              type: 'pattern',
              patternType: 'object-pattern',
              value: $$[$0 - 1]
            };
            break;

          case 117:
            this.$ = {
              type: 'property',
              name: $$[$0 - 2],
              pattern: $$[$0]
            };
            break;

          case 118:
            this.$ = {
              type: 'property',
              name: $$[$0],
              pattern: {
                type: 'pattern',
                patternType: 'any',
                value: null
              }
            };
            break;

          case 119:
            this.$ = true;
            break;

          case 120:
            this.$ = false;
            break;

          case 121:
          case 125:
            this.$ = $$[$0].substring(1, $$[$0].length - 1);
            break;

          case 122:
            this.$ = parseInt($$[$0]);
            break;

          case 123:
            this.$ = parseFloat($$[$0]);
            break;
        }
      },
      table: [{
        3: 1,
        4: 2,
        5: 3,
        6: 4,
        7: $V0,
        8: $V1,
        10: 9,
        11: $V2,
        13: $V3,
        14: $V4,
        17: $V5,
        23: $V6,
        24: $V7,
        26: $V8,
        29: $V9,
        31: 15,
        35: 16,
        36: $Va,
        37: $Vb,
        52: 12,
        53: 13,
        54: 17,
        77: $Vc,
        78: $Vd
      }, {
        1: [3]
      }, {
        1: [2, 1],
        5: 25,
        6: 4,
        7: $V0,
        8: $V1,
        10: 9,
        11: $V2,
        13: $V3,
        14: $V4,
        17: $V5,
        23: $V6,
        24: $V7,
        26: $V8,
        29: $V9,
        31: 15,
        35: 16,
        36: $Va,
        37: $Vb,
        52: 12,
        53: 13,
        54: 17,
        77: $Vc,
        78: $Vd
      }, o($Ve, [2, 3]), o($Ve, [2, 4]), {
        8: [1, 26]
      }, {
        8: [1, 27]
      }, {
        8: [1, 28]
      }, {
        8: [1, 29]
      }, o($Vf, [2, 9], {
        16: [1, 30],
        56: $Vg,
        57: $Vh,
        58: $Vi,
        59: $Vj
      }), {
        16: [1, 35]
      }, o($Vk, $Vl, {
        49: $Vm,
        55: $Vn
      }), o($Vk, [2, 51]), o($Vk, [2, 52]), o($Vk, [2, 53]), o($Vk, [2, 54]), o($Vk, [2, 55]), o($Vk, [2, 56]), o($Vk, [2, 57]), {
        8: $V1,
        10: 41,
        23: $V6,
        24: $V7,
        26: $V8,
        29: $V9,
        31: 15,
        35: 16,
        36: $Va,
        37: $Vb,
        38: [1, 38],
        52: 12,
        53: 13,
        54: 17,
        60: 39,
        61: 40,
        77: $Vc,
        78: $Vd
      }, o($Vk, [2, 119]), o($Vk, [2, 120]), o($Vo, [2, 123]), o($Vo, [2, 121]), {
        8: $Vp,
        28: [1, 42],
        62: 43,
        63: 44
      }, o($Ve, [2, 2]), o($Ve, $Vq, {
        9: [1, 46]
      }), {
        9: [1, 47]
      }, o($Ve, $Vr, {
        9: [1, 48]
      }), o($Ve, $Vs, {
        9: [1, 49]
      }), {
        8: $Vt,
        11: $Vu,
        12: 52,
        17: [1, 50],
        18: 51,
        19: $Vv,
        20: $Vw,
        22: $Vx,
        23: $Vy,
        24: $Vz,
        25: $VA,
        26: $VB,
        29: $VC,
        30: $VD,
        31: 61,
        32: $VE,
        34: $VF,
        35: 64,
        36: $VG,
        37: $VH,
        65: 53,
        66: 66,
        67: 67,
        77: $Vc,
        78: $Vd
      }, {
        8: $V1,
        10: 73,
        23: $V6,
        24: $V7,
        26: $V8,
        29: $V9,
        31: 15,
        35: 16,
        36: $Va,
        37: $Vb,
        52: 12,
        53: 13,
        54: 17,
        77: $Vc,
        78: $Vd
      }, {
        8: $V1,
        10: 74,
        23: $V6,
        24: $V7,
        26: $V8,
        29: $V9,
        31: 15,
        35: 16,
        36: $Va,
        37: $Vb,
        52: 12,
        53: 13,
        54: 17,
        77: $Vc,
        78: $Vd
      }, {
        8: $V1,
        10: 75,
        23: $V6,
        24: $V7,
        26: $V8,
        29: $V9,
        31: 15,
        35: 16,
        36: $Va,
        37: $Vb,
        52: 12,
        53: 13,
        54: 17,
        77: $Vc,
        78: $Vd
      }, {
        8: $V1,
        10: 76,
        23: $V6,
        24: $V7,
        26: $V8,
        29: $V9,
        31: 15,
        35: 16,
        36: $Va,
        37: $Vb,
        52: 12,
        53: 13,
        54: 17,
        77: $Vc,
        78: $Vd
      }, {
        8: $Vt,
        11: $Vu,
        12: 52,
        18: 77,
        19: $Vv,
        20: $Vw,
        22: $Vx,
        23: $Vy,
        24: $Vz,
        25: $VA,
        26: $VB,
        29: $VC,
        30: $VD,
        31: 61,
        32: $VE,
        34: $VF,
        35: 64,
        36: $VG,
        37: $VH,
        65: 53,
        66: 66,
        67: 67,
        77: $Vc,
        78: $Vd
      }, {
        8: [1, 80],
        50: [1, 78],
        51: 79
      }, {
        8: [1, 81]
      }, o($Vk, [2, 63]), {
        38: [1, 82],
        42: [1, 83]
      }, o($VI, [2, 66]), o($VI, [2, 67], {
        56: $Vg,
        57: $Vh,
        58: $Vi,
        59: $Vj
      }), o($Vk, [2, 68]), {
        28: [1, 84],
        42: [1, 85]
      }, o($VJ, [2, 71]), o($VJ, [2, 73], {
        45: [1, 86]
      }), {
        8: $V1,
        10: 87,
        23: $V6,
        24: $V7,
        26: $V8,
        29: $V9,
        31: 15,
        35: 16,
        36: $Va,
        37: $Vb,
        52: 12,
        53: 13,
        54: 17,
        77: $Vc,
        78: $Vd
      }, {
        8: $Vt,
        11: $Vu,
        12: 88,
        19: $Vv,
        20: $Vw,
        22: $Vx,
        23: $Vy,
        24: $Vz,
        25: $VA,
        26: $VB,
        29: $VC,
        30: $VD,
        31: 61,
        32: $VE,
        34: $VF,
        35: 64,
        36: $VG,
        37: $VH,
        65: 53,
        66: 66,
        67: 67,
        77: $Vc,
        78: $Vd
      }, {
        6: 89,
        7: $VK,
        8: $V1,
        10: 9,
        13: $VL,
        14: $VM,
        17: $V5,
        23: $V6,
        24: $V7,
        26: $V8,
        29: $V9,
        31: 15,
        35: 16,
        36: $Va,
        37: $Vb,
        52: 12,
        53: 13,
        54: 17,
        77: $Vc,
        78: $Vd
      }, {
        15: 93,
        19: [1, 94],
        20: [1, 95],
        21: 96,
        22: [1, 97],
        23: [1, 98],
        24: [1, 99],
        25: [1, 100],
        26: [1, 110],
        29: [1, 101],
        30: [1, 102],
        31: 103,
        32: [1, 104],
        33: 105,
        34: [1, 106],
        35: 107,
        36: [1, 108],
        37: [1, 109],
        77: $Vc,
        78: $Vd
      }, o($Vf, [2, 10]), o($Vf, [2, 11], {
        64: $VN
      }), o($VO, [2, 77]), o($VO, [2, 78], {
        48: [1, 112]
      }), o($VP, [2, 80]), o($VP, [2, 81]), o($VP, [2, 82]), o($VP, [2, 83]), o($VP, [2, 84]), o($VP, [2, 85]), o($VP, [2, 86]), o($VP, [2, 87]), o($VP, [2, 88]), o($VP, [2, 89]), o($VP, [2, 90]), o($VP, [2, 91]), o($VP, [2, 92]), o($VP, [2, 93]), {
        8: [1, 113]
      }, {
        8: [1, 114]
      }, o($VP, [2, 96]), {
        8: $Vt,
        11: $Vu,
        19: $Vv,
        20: $Vw,
        22: $Vx,
        23: $Vy,
        24: $Vz,
        25: $VA,
        26: $VB,
        29: $VC,
        30: $VD,
        31: 61,
        32: $VE,
        34: $VF,
        35: 64,
        36: $VG,
        37: $VH,
        38: [1, 115],
        49: $VQ,
        65: 119,
        66: 66,
        67: 67,
        68: 116,
        69: 117,
        70: 118,
        77: $Vc,
        78: $Vd
      }, {
        8: $VR,
        28: [1, 121],
        74: 122,
        75: 123,
        76: 124
      }, o($VS, [2, 59], {
        58: $Vi,
        59: $Vj
      }), o($VS, [2, 60], {
        58: $Vi,
        59: $Vj
      }), o($Vk, [2, 61]), o($Vk, [2, 62]), o($Vf, [2, 12], {
        64: $VN
      }), o($Vk, [2, 49]), {
        42: [1, 127],
        50: [1, 126]
      }, o($VT, [2, 75]), o($Vk, [2, 58]), o($Vk, [2, 64]), {
        8: $V1,
        10: 41,
        23: $V6,
        24: $V7,
        26: $V8,
        29: $V9,
        31: 15,
        35: 16,
        36: $Va,
        37: $Vb,
        52: 12,
        53: 13,
        54: 17,
        61: 128,
        77: $Vc,
        78: $Vd
      }, o($Vk, [2, 69]), {
        8: $Vp,
        63: 129
      }, {
        8: $V1,
        10: 130,
        23: $V6,
        24: $V7,
        26: $V8,
        29: $V9,
        31: 15,
        35: 16,
        36: $Va,
        37: $Vb,
        52: 12,
        53: 13,
        54: 17,
        77: $Vc,
        78: $Vd
      }, o($Ve, [2, 5], {
        56: $Vg,
        57: $Vh,
        58: $Vi,
        59: $Vj
      }), o($Ve, [2, 6]), o($Ve, [2, 7]), {
        8: [1, 131]
      }, {
        8: [1, 132]
      }, {
        8: [1, 133]
      }, o($Ve, [2, 8]), o($Ve, [2, 16]), o($Ve, [2, 17]), o($Ve, [2, 18]), o($Ve, [2, 19]), o($Ve, [2, 20]), o($Ve, [2, 21]), {
        26: [1, 134]
      }, o($Ve, [2, 23]), o($Ve, [2, 24]), o($Ve, [2, 25]), o($Ve, [2, 26]), o($Ve, [2, 27]), o($Ve, [2, 28]), o($Ve, [2, 29]), o($Ve, [2, 30]), {
        6: 138,
        7: $VK,
        8: [1, 140],
        10: 9,
        13: $VL,
        14: $VM,
        17: $V5,
        23: $V6,
        24: $V7,
        26: $V8,
        29: $V9,
        31: 15,
        35: 16,
        36: $Va,
        37: $Vb,
        38: [1, 135],
        39: 136,
        40: 137,
        46: 139,
        52: 12,
        53: 13,
        54: 17,
        77: $Vc,
        78: $Vd
      }, {
        8: [1, 145],
        28: [1, 141],
        40: 143,
        43: 142,
        44: 144,
        46: 139
      }, {
        8: $Vt,
        11: $Vu,
        12: 146,
        19: $Vv,
        20: $Vw,
        22: $Vx,
        23: $Vy,
        24: $Vz,
        25: $VA,
        26: $VB,
        29: $VC,
        30: $VD,
        31: 61,
        32: $VE,
        34: $VF,
        35: 64,
        36: $VG,
        37: $VH,
        65: 53,
        66: 66,
        67: 67,
        77: $Vc,
        78: $Vd
      }, {
        8: [1, 147]
      }, o($VP, [2, 94]), o($VP, [2, 95]), o($VP, [2, 97]), {
        38: [1, 148],
        42: $VU
      }, o($VV, [2, 100]), o($VV, [2, 101], {
        48: [1, 150]
      }), o($VW, [2, 103], {
        41: [1, 151]
      }), {
        8: $Vt,
        11: $Vu,
        19: $Vv,
        20: $Vw,
        22: $Vx,
        23: $Vy,
        24: $Vz,
        25: $VA,
        26: $VB,
        29: $VC,
        30: $VD,
        31: 61,
        32: $VE,
        34: $VF,
        35: 64,
        36: $VG,
        37: $VH,
        49: $VQ,
        65: 119,
        66: 66,
        67: 67,
        68: 152,
        69: 117,
        70: 118,
        77: $Vc,
        78: $Vd
      }, o($VP, [2, 111]), {
        28: [1, 153],
        42: [1, 154]
      }, o($VJ, [2, 114]), o($VJ, [2, 115], {
        48: [1, 155]
      }), o($VX, [2, 118], {
        45: [1, 156]
      }), o($Vk, [2, 50]), {
        8: [1, 157]
      }, o($VI, [2, 65]), o($VJ, [2, 70]), o($VJ, [2, 72], {
        56: $Vg,
        57: $Vh,
        58: $Vi,
        59: $Vj
      }), o($Vf, $Vq), o($Vf, $Vr), o($Vf, $Vs), {
        8: $VY,
        27: 158,
        77: $VZ,
        79: 159
      }, o($Ve, [2, 31]), {
        38: [1, 162],
        42: $V_
      }, {
        41: [1, 164],
        42: $V$
      }, o($VI, [2, 35]), o($V01, [2, 44]), o([16, 38, 42, 56, 57, 58, 59], $Vl, {
        9: $V11,
        49: $Vm,
        55: $Vn
      }), o($Ve, [2, 36]), {
        28: [1, 167],
        42: $V21
      }, {
        41: [1, 169],
        42: $V$
      }, o($VJ, [2, 40]), o($VJ, $V31, {
        9: $V11,
        45: $V41
      }), o($VO, [2, 76]), o($VO, [2, 79]), o($VP, [2, 98]), {
        8: $Vt,
        11: $Vu,
        19: $Vv,
        20: $Vw,
        22: $Vx,
        23: $Vy,
        24: $Vz,
        25: $VA,
        26: $VB,
        29: $VC,
        30: $VD,
        31: 61,
        32: $VE,
        34: $VF,
        35: 64,
        36: $VG,
        37: $VH,
        49: $VQ,
        65: 119,
        66: 66,
        67: 67,
        69: 171,
        70: 118,
        77: $Vc,
        78: $Vd
      }, {
        8: [1, 172]
      }, {
        71: 173,
        72: 174,
        73: $V51,
        78: $V61
      }, {
        42: $VU,
        50: [1, 177]
      }, o($VP, [2, 112]), {
        8: $VR,
        75: 178,
        76: 124
      }, {
        8: [1, 179]
      }, {
        8: $Vt,
        11: $Vu,
        19: $Vv,
        20: $Vw,
        22: $Vx,
        23: $Vy,
        24: $Vz,
        25: $VA,
        26: $VB,
        29: $VC,
        30: $VD,
        31: 61,
        32: $VE,
        34: $VF,
        35: 64,
        36: $VG,
        37: $VH,
        65: 180,
        66: 66,
        67: 67,
        77: $Vc,
        78: $Vd
      }, o($VT, [2, 74]), {
        28: [1, 181],
        42: [1, 182]
      }, o($VJ, [2, 127]), o($VJ, [2, 124]), o($VJ, [2, 125]), o($Ve, [2, 32]), {
        6: 183,
        7: $VK,
        8: $V1,
        10: 9,
        13: $VL,
        14: $VM,
        17: $V5,
        23: $V6,
        24: $V7,
        26: $V8,
        29: $V9,
        31: 15,
        35: 16,
        36: $Va,
        37: $Vb,
        52: 12,
        53: 13,
        54: 17,
        77: $Vc,
        78: $Vd
      }, {
        6: 138,
        7: $VK,
        8: $V1,
        10: 9,
        13: $VL,
        14: $VM,
        17: $V5,
        23: $V6,
        24: $V7,
        26: $V8,
        29: $V9,
        31: 15,
        35: 16,
        36: $Va,
        37: $Vb,
        39: 184,
        52: 12,
        53: 13,
        54: 17,
        77: $Vc,
        78: $Vd
      }, {
        8: [1, 186],
        46: 185
      }, {
        6: 187,
        7: $VK,
        8: $V1,
        10: 9,
        13: $VL,
        14: $VM,
        17: $V5,
        23: $V6,
        24: $V7,
        26: $V8,
        29: $V9,
        31: 15,
        35: 16,
        36: $Va,
        37: $Vb,
        52: 12,
        53: 13,
        54: 17,
        77: $Vc,
        78: $Vd
      }, o($Ve, [2, 37]), {
        8: $V71,
        44: 188
      }, {
        8: $V71,
        43: 190,
        44: 144
      }, {
        6: 191,
        7: $VK,
        8: $V1,
        10: 9,
        13: $VL,
        14: $VM,
        17: $V5,
        23: $V6,
        24: $V7,
        26: $V8,
        29: $V9,
        31: 15,
        35: 16,
        36: $Va,
        37: $Vb,
        52: 12,
        53: 13,
        54: 17,
        77: $Vc,
        78: $Vd
      }, o($VV, [2, 99]), o($VV, [2, 102]), o($VW, [2, 104]), o($VW, [2, 110], {
        73: [1, 192]
      }), {
        72: 193,
        78: $V61
      }, o([38, 42, 48, 50, 73], [2, 122]), o($VW, [2, 105], {
        41: [1, 194]
      }), o($VJ, [2, 113]), o($VJ, [2, 116]), o($VX, [2, 117]), o($Ve, [2, 22]), {
        8: $VY,
        77: $VZ,
        79: 195
      }, o($VI, [2, 34]), {
        38: [1, 196],
        42: $V_
      }, o($V01, [2, 43]), {
        9: $V11
      }, o($V01, [2, 45]), o($VJ, [2, 39]), o($VJ, $V31, {
        45: $V41
      }), {
        28: [1, 197],
        42: $V21
      }, o($VJ, [2, 41]), o($VW, [2, 109], {
        72: 198,
        78: $V61
      }), o($VW, [2, 108]), {
        71: 199,
        72: 174,
        73: $V51,
        78: $V61
      }, o($VJ, [2, 126]), o($Ve, [2, 33]), o($Ve, [2, 38]), o($VW, [2, 107]), o($VW, [2, 106])],
      defaultActions: {},
      parseError: function parseError(str, hash) {
        if (hash.recoverable) {
          this.trace(str);
        } else {
          var error = new Error(str);
          error.hash = hash;
          throw error;
        }
      },
      parse: function parse(input) {
        var self = this,
            stack = [0],
            vstack = [null],
            lstack = [],
            table = this.table,
            yytext = '',
            yylineno = 0,
            yyleng = 0,
            TERROR = 2,
            EOF = 1;
        var args = lstack.slice.call(arguments, 1);
        var lexer = Object.create(this.lexer);
        var sharedState = {
          yy: {}
        };

        for (var k in this.yy) {
          if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
          }
        }

        lexer.setInput(input, sharedState.yy);
        sharedState.yy.lexer = lexer;
        sharedState.yy.parser = this;

        if (typeof lexer.yylloc == 'undefined') {
          lexer.yylloc = {};
        }

        var yyloc = lexer.yylloc;
        lstack.push(yyloc);
        var ranges = lexer.options && lexer.options.ranges;

        if (typeof sharedState.yy.parseError === 'function') {
          this.parseError = sharedState.yy.parseError;
        } else {
          this.parseError = Object.getPrototypeOf(this).parseError;
        }

        _token_stack: var lex = function lex() {
          var token;
          token = lexer.lex() || EOF;

          if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
          }

          return token;
        };

        var symbol,
            preErrorSymbol,
            state,
            action,
            r,
            yyval = {},
            p,
            len,
            newState,
            expected;

        while (true) {
          state = stack[stack.length - 1];

          if (this.defaultActions[state]) {
            action = this.defaultActions[state];
          } else {
            if (symbol === null || typeof symbol == 'undefined') {
              symbol = lex();
            }

            action = table[state] && table[state][symbol];
          }

          if (typeof action === 'undefined' || !action.length || !action[0]) {
            var errStr = '';
            expected = [];

            for (p in table[state]) {
              if (this.terminals_[p] && p > TERROR) {
                expected.push('\'' + this.terminals_[p] + '\'');
              }
            }

            if (lexer.showPosition) {
              errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
            } else {
              errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
            }

            this.parseError(errStr, {
              text: lexer.match,
              token: this.terminals_[symbol] || symbol,
              line: lexer.yylineno,
              loc: yyloc,
              expected: expected
            });
          }

          if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
          }

          switch (action[0]) {
            case 1:
              stack.push(symbol);
              vstack.push(lexer.yytext);
              lstack.push(lexer.yylloc);
              stack.push(action[1]);
              symbol = null;

              if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
              } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
              }

              break;

            case 2:
              len = this.productions_[action[1]][1];
              yyval.$ = vstack[vstack.length - len];
              yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
              };

              if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
              }

              r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

              if (typeof r !== 'undefined') {
                return r;
              }

              if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
              }

              stack.push(this.productions_[action[1]][0]);
              vstack.push(yyval.$);
              lstack.push(yyval._$);
              newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
              stack.push(newState);
              break;

            case 3:
              return true;
          }
        }

        return true;
      }
    };
    /* generated by jison-lex 0.3.4 */

    var lexer = function () {
      var lexer = {
        EOF: 1,
        parseError: function parseError(str, hash) {
          if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
          } else {
            throw new Error(str);
          }
        },
        // resets the lexer, sets new input
        setInput: function setInput(input, yy) {
          this.yy = yy || this.yy || {};
          this._input = input;
          this._more = this._backtrack = this.done = false;
          this.yylineno = this.yyleng = 0;
          this.yytext = this.matched = this.match = '';
          this.conditionStack = ['INITIAL'];
          this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
          };

          if (this.options.ranges) {
            this.yylloc.range = [0, 0];
          }

          this.offset = 0;
          return this;
        },
        // consumes and returns one char from the input
        input: function input() {
          var ch = this._input[0];
          this.yytext += ch;
          this.yyleng++;
          this.offset++;
          this.match += ch;
          this.matched += ch;
          var lines = ch.match(/(?:\r\n?|\n).*/g);

          if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
          } else {
            this.yylloc.last_column++;
          }

          if (this.options.ranges) {
            this.yylloc.range[1]++;
          }

          this._input = this._input.slice(1);
          return ch;
        },
        // unshifts one char (or a string) into the input
        unput: function unput(ch) {
          var len = ch.length;
          var lines = ch.split(/(?:\r\n?|\n)/g);
          this._input = ch + this._input;
          this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;

          this.offset -= len;
          var oldLines = this.match.split(/(?:\r\n?|\n)/g);
          this.match = this.match.substr(0, this.match.length - 1);
          this.matched = this.matched.substr(0, this.matched.length - 1);

          if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
          }

          var r = this.yylloc.range;
          this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
          };

          if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
          }

          this.yyleng = this.yytext.length;
          return this;
        },
        // When called from action, caches matched text and appends it on next action
        more: function more() {
          this._more = true;
          return this;
        },
        // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
        reject: function reject() {
          if (this.options.backtrack_lexer) {
            this._backtrack = true;
          } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
              text: "",
              token: null,
              line: this.yylineno
            });
          }

          return this;
        },
        // retain first n characters of the match
        less: function less(n) {
          this.unput(this.match.slice(n));
        },
        // displays already matched input, i.e. for error messages
        pastInput: function pastInput() {
          var past = this.matched.substr(0, this.matched.length - this.match.length);
          return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
        },
        // displays upcoming input, i.e. for error messages
        upcomingInput: function upcomingInput() {
          var next = this.match;

          if (next.length < 20) {
            next += this._input.substr(0, 20 - next.length);
          }

          return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
        },
        // displays the character position where the lexing error occurred, i.e. for error messages
        showPosition: function showPosition() {
          var pre = this.pastInput();
          var c = new Array(pre.length + 1).join("-");
          return pre + this.upcomingInput() + "\n" + c + "^";
        },
        // test the lexed token: return FALSE when not a match, otherwise return token
        test_match: function test_match(match, indexed_rule) {
          var token, lines, backup;

          if (this.options.backtrack_lexer) {
            // save context
            backup = {
              yylineno: this.yylineno,
              yylloc: {
                first_line: this.yylloc.first_line,
                last_line: this.last_line,
                first_column: this.yylloc.first_column,
                last_column: this.yylloc.last_column
              },
              yytext: this.yytext,
              match: this.match,
              matches: this.matches,
              matched: this.matched,
              yyleng: this.yyleng,
              offset: this.offset,
              _more: this._more,
              _input: this._input,
              yy: this.yy,
              conditionStack: this.conditionStack.slice(0),
              done: this.done
            };

            if (this.options.ranges) {
              backup.yylloc.range = this.yylloc.range.slice(0);
            }
          }

          lines = match[0].match(/(?:\r\n?|\n).*/g);

          if (lines) {
            this.yylineno += lines.length;
          }

          this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
          };
          this.yytext += match[0];
          this.match += match[0];
          this.matches = match;
          this.yyleng = this.yytext.length;

          if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
          }

          this._more = false;
          this._backtrack = false;
          this._input = this._input.slice(match[0].length);
          this.matched += match[0];
          token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);

          if (this.done && this._input) {
            this.done = false;
          }

          if (token) {
            return token;
          } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
              this[k] = backup[k];
            }

            return false; // rule action called reject() implying the next rule should be tested instead.
          }

          return false;
        },
        // return next match in input
        next: function next() {
          if (this.done) {
            return this.EOF;
          }

          if (!this._input) {
            this.done = true;
          }

          var token, match, tempMatch, index;

          if (!this._more) {
            this.yytext = '';
            this.match = '';
          }

          var rules = this._currentRules();

          for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);

            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
              match = tempMatch;
              index = i;

              if (this.options.backtrack_lexer) {
                token = this.test_match(tempMatch, rules[i]);

                if (token !== false) {
                  return token;
                } else if (this._backtrack) {
                  match = false;
                  continue; // rule action called reject() implying a rule MISmatch.
                } else {
                  // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                  return false;
                }
              } else if (!this.options.flex) {
                break;
              }
            }
          }

          if (match) {
            token = this.test_match(match, rules[index]);

            if (token !== false) {
              return token;
            } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)


            return false;
          }

          if (this._input === "") {
            return this.EOF;
          } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
              text: "",
              token: null,
              line: this.yylineno
            });
          }
        },
        // return next match that has a token
        lex: function lex() {
          var r = this.next();

          if (r) {
            return r;
          } else {
            return this.lex();
          }
        },
        // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
        begin: function begin(condition) {
          this.conditionStack.push(condition);
        },
        // pop the previously active lexer condition state off the condition stack
        popState: function popState() {
          var n = this.conditionStack.length - 1;

          if (n > 0) {
            return this.conditionStack.pop();
          } else {
            return this.conditionStack[0];
          }
        },
        // produce the lexer rule set which is active for the currently active lexer condition state
        _currentRules: function _currentRules() {
          if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
          } else {
            return this.conditions["INITIAL"].rules;
          }
        },
        // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
        topState: function topState(n) {
          n = this.conditionStack.length - 1 - Math.abs(n || 0);

          if (n >= 0) {
            return this.conditionStack[n];
          } else {
            return "INITIAL";
          }
        },
        // alias for begin(condition)
        pushState: function pushState(condition) {
          this.begin(condition);
        },
        // return the number of states currently on the stack
        stateStackSize: function stateStackSize() {
          return this.conditionStack.length;
        },
        options: {},
        performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {

          switch ($avoiding_name_collisions) {
            case 0:
              /* skip whitespace */
              break;

            case 1:
              /* skip comment */
              break;

            case 2:
              return 19;
              break;

            case 3:
              return 20;
              break;

            case 4:
              return 48;
              break;

            case 5:
              return 22;
              break;

            case 6:
              return 25;
              break;

            case 7:
              return 24;
              break;

            case 8:
              return 7;
              break;

            case 9:
              return 29;
              break;

            case 10:
              return 30;
              break;

            case 11:
              return 32;
              break;

            case 12:
              return 11;
              break;

            case 13:
              return 34;
              break;

            case 14:
              return 13;
              break;

            case 15:
              return 23;
              break;

            case 16:
              return 14;
              break;

            case 17:
              return 36;
              break;

            case 18:
              return 49;
              break;

            case 19:
              return 50;
              break;

            case 20:
              return 26;
              break;

            case 21:
              return 28;
              break;

            case 22:
              return 37;
              break;

            case 23:
              return 38;
              break;

            case 24:
              return 64;
              break;

            case 25:
              return 42;
              break;

            case 26:
              return 45;
              break;

            case 27:
              return 41;
              break;

            case 28:
              return 9;
              break;

            case 29:
              return 16;
              break;

            case 30:
              return 73;
              break;

            case 31:
              return 55;
              break;

            case 32:
              return 17;
              break;

            case 33:
              return 56;
              break;

            case 34:
              return 57;
              break;

            case 35:
              return 58;
              break;

            case 36:
              return 59;
              break;

            case 37:
              return 8;
              break;

            case 38:
              return 78;
              break;

            case 39:
              return 77;
              break;
          }
        },
        rules: [/^(?:\s+)/, /^(?:\/\/.*)/, /^(?:any)/, /^(?:array)/, /^(?:as)/, /^(?:boolean)/, /^(?:enum)/, /^(?:false)/, /^(?:generator)/, /^(?:null)/, /^(?:number)/, /^(?:object)/, /^(?:pattern)/, /^(?:string)/, /^(?:transform)/, /^(?:true)/, /^(?:type)/, /^(?:undefined)/, /^(?:\()/, /^(?:\))/, /^(?:{)/, /^(?:})/, /^(?:\[)/, /^(?:\])/, /^(?:\|)/, /^(?:,)/, /^(?::)/, /^(?:;)/, /^(?:=)/, /^(?:<=)/, /^(?:\.\.)/, /^(?:\.)/, /^(?:_)/, /^(?:\+)/, /^(?:-)/, /^(?:\*)/, /^(?:\/)/, /^(?:[a-zA-Z_][a-zA-Z0-9_]*)/, /^(?:[-+]?(0|[1-9]\d*)(\.\d+)?)/, /^(?:"[^"\r\n]*")/],
        conditions: {
          "INITIAL": {
            "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
            "inclusive": true
          }
        }
      };
      return lexer;
    }();

    parser.lexer = lexer;

    function Parser() {
      this.yy = {};
    }

    Parser.prototype = parser;
    parser.Parser = Parser;
    return new Parser();
  }();

  var FAILURE_VALUE = undefined;
  /**
   * Determine if object is something that can have properties
   *
   * @param {*} obj
   * @returns {boolean}
   */

  function isObject(obj) {
    return obj !== null && _typeof(obj) === "object";
  }
  /**
   * Transformer
   */


  var Transformer =
  /*#__PURE__*/
  function () {
    /**
     * Create a new empty Transformer. Normalizers can be used to validate and transform data. However, when a new
     * Transformer has been created, it needs to be populated with one or more type descriptions. The easiest way to do
     * this is with the static method fromSource.
     */
    function Transformer() {
      _classCallCheck(this, Transformer);

      this.types = {};
      this.transforms = {};
      this.patterns = {};
      this.generators = {}; // this.typeCheckers = {};

      this.typeCreators = {};
      this.messages = [];
      this.verbose = false;
    }
    /**
     * Create a new instance of a Transformer with its type table initially populated from the specified normalizer
     * source code.
     *
     * @param {string} source
     * @returns {Transformer}
     */


    _createClass(Transformer, [{
      key: "addDefinitionsFromSource",

      /**
       * Add all type definitions from the specified normalization source code to this Transformer instance. This will
       * amend the current types with those specified in the code. Note that any type that has been redefined in the
       * source code will replace any pre-existing version of that type.
       *
       * @param {string} source
       */
      value: function addDefinitionsFromSource(source) {
        var table = parser.parse(source);
        this.addDefinitionsFromTable(table);
      }
      /**
       * Add all type definitions from the specified serialization table to this Transformer instance. This will amend the
       * current types with those specified in the table. Note that any type that has been redefined in the table will
       * replace any pre-existing version of that type.
       *
       * @param {Array} table
       */

    }, {
      key: "addDefinitionsFromTable",
      value: function addDefinitionsFromTable(table) {
        var _this = this;

        table.forEach(function (description) {
          switch (description.type) {
            case "type-assignment":
              _this.types[description.name] = description.value;
              break;

            case "transform-assignment":
              _this.transforms[description.name] = description.value;
              break;

            case "generator-assignment":
              _this.generators[description.name] = description.value;
              break;

            case "pattern-assignment":
              _this.patterns[description.name] = description.value;
              break;

            default: // ignore all other top-level statements

          }
        });
      }
      /**
       * Add information
       *
       * @param {string} message
       */

    }, {
      key: "addInfo",
      value: function addInfo(message) {
        if (this.verbose) {
          this.messages.push({
            type: "message",
            level: "info",
            message: message
          });
        }
      }
      /**
       * Add a warning
       *
       * @param {string} message
       */

    }, {
      key: "addWarning",
      value: function addWarning(message) {
        this.messages.push({
          type: "message",
          level: "warning",
          message: message
        });
      }
      /**
       * Add an error
       *
       * @param {string} message
       */

    }, {
      key: "addError",
      value: function addError(message) {
        this.messages.push({
          type: "message",
          level: "error",
          message: message
        });
      }
      /**
       * Compile and execute the source against the specfied structure
       *
       * @param {string} source
       * @param {*} structure
       * @returns {*}
       */

    }, {
      key: "execute",
      value: function execute(source, structure) {
        var statements = parser.parse(source);
        var result;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = statements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var statement = _step.value;

            switch (statement.type) {
              case "transform":
                result = this.executeTransform(statement, structure);

                if (result === FAILURE_VALUE) {
                  break;
                }

                break;

              case "type-reference":
                if (statement.name in this.types) {
                  var type = this.types[statement.name];
                  var value = this.executeType(type, structure);

                  if (value === FAILURE_VALUE) {
                    this.addError("type ".concat(statement.name, " was unable to transform successfully"));
                    return FAILURE_VALUE;
                  }

                  return value;
                }

                this.addError("type is not defined: ".concat(statement.name));
                return FAILURE_VALUE;

              case "generator-assignment":
                this.generators[statement.name] = statement.value;
                break;

              case "pattern-assignment":
                this.patterns[statement.name] = statement.value;
                break;

              case "transform-assignment":
                this.transforms[statement.name] = statement.value;
                break;

              case "type-assignment":
                this.types[statement.name] = statement.value;
                break;

              default:
                this.addError("unknown statement type: ".concat(statement.type));
                return FAILURE_VALUE;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return result;
      }
    }, {
      key: "executeTransform",
      value: function executeTransform(transform, structure) {
        var symbolTable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var currentObject = structure;

        if (transform.type === "transform-reference") {
          if (transform.name in this.transforms) {
            transform = this.transforms[transform.name];
          } else {
            this.addError("undefined transform reference: '".concat(transform.name, "'"));
            return FAILURE_VALUE;
          }
        }

        if (transform.patterns !== null) {
          // try all patterns until one succeeds, else report as failure
          var result = FAILURE_VALUE;
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = transform.patterns[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var pattern = _step2.value;
              symbolTable = Object.create(symbolTable);
              result = this.executePattern(pattern, currentObject, symbolTable);

              if (result !== FAILURE_VALUE) {
                // pattern matched, so we can stop
                if (transform.returnValue !== null) {
                  currentObject = this.executeGenerator(transform.returnValue.expression, symbolTable);
                } else {
                  // if we're not messaging the result, then return all captured values (the symbol table)s
                  currentObject = symbolTable;
                }

                break;
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }

          if (result === FAILURE_VALUE) {
            this.addError("Unable to match any type patterns");
            return FAILURE_VALUE;
          }
        } else {
          // if currentObject is not an object, then it can't be used as a symbol table
          if (isObject(currentObject)) {
            symbolTable = Object.create(Object.assign(symbolTable, currentObject));
          } // NOTE: assumes we have to have a generator if we don't have a pattern. This is currently
          // enforced in the parser


          var value = this.executeGenerator(transform.returnValue.expression, symbolTable);

          if (value === FAILURE_VALUE) {
            this.addError("Unable to apply generator to current object");
            return FAILURE_VALUE;
          }

          currentObject = value;
        }

        return currentObject;
      }
    }, {
      key: "executeType",
      value: function executeType(type, structure) {
        switch (type.definition) {
          case "any":
            return structure;

          case "array":
            return this.executeArrayType(type, structure);

          case "boolean":
            if (typeof structure === "boolean") {
              if (type.value === null || type.value === structure) {
                return structure;
              }
            }

            return FAILURE_VALUE;

          case "enumeration":
            if (typeof structure === "string") {
              if (type.value.includes(structure)) {
                return structure;
              }
            }

            return FAILURE_VALUE;

          case "null":
            if (structure === null) {
              return structure;
            }

            return FAILURE_VALUE;

          case "number":
            if (typeof structure === "number") {
              if (type.value === null || type.value === structure) {
                return structure;
              }
            }

            return FAILURE_VALUE;

          case "object":
            return this.executeObjectType(type, structure);

          case "string":
            if (typeof structure === "string") {
              if (type.value === null || type.value === structure) {
                return structure;
              }
            }

            return FAILURE_VALUE;

          case "undefined":
            if (structure === undefined) {
              return structure;
            }

            return FAILURE_VALUE;

          default:
            this.addError("Unrecognized type definition value: '".concat(type.definition, "'"));
            return FAILURE_VALUE;
        }
      }
      /*
       * Execute an array type definition
       *
       * @param {object} type
       * @param {*} structure
       * @returns {*}
       */

    }, {
      key: "executeArrayType",
      value: function executeArrayType(type, structure) {
        if (type.value === null) {
          if (Array.isArray(structure)) {
            return structure;
          }

          return FAILURE_VALUE;
        }

        var result = [];
        var symbolTable = {};
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = type.value[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var element = _step3.value;

            switch (element.type) {
              case "transform":
                {
                  var elementValue = this.executeTransform(element, structure, symbolTable);

                  if (elementValue === FAILURE_VALUE) {
                    return FAILURE_VALUE;
                  }

                  result.push(elementValue);
                  break;
                }

              case "assignment":
                if (this.executeAssignment(element, structure, symbolTable) === FAILURE_VALUE) {
                  return FAILURE_VALUE;
                }

                break;

              default:
                this.addError("Unknown element of array type: '".concat(element.type, "'"));
                return FAILURE_VALUE;
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
              _iterator3["return"]();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        return result;
      }
      /*
       * Execute an object type definition
       *
       * @param {object} type
       * @param {*} structure
       * @returns {*}
       */

    }, {
      key: "executeObjectType",
      value: function executeObjectType(type, structure) {
        if (type.value === null) {
          if (isObject(structure)) {
            return structure;
          }

          return FAILURE_VALUE;
        }

        var result = {};
        var symbolTable = {};
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = type.value[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var property = _step4.value;

            switch (property.type) {
              case "type-property":
                {
                  var propertyValue = FAILURE_VALUE;

                  if (property.value === null) {
                    if (isObject(structure) && property.name in structure) {
                      propertyValue = structure[property.name];
                    }
                  } else {
                    propertyValue = this.executeTransform(property.value, structure, symbolTable);
                  }

                  if (propertyValue === FAILURE_VALUE) {
                    return FAILURE_VALUE;
                  }

                  result[property.name] = propertyValue;
                  break;
                }

              case "assignment":
                if (this.executeAssignment(property, structure, symbolTable) === FAILURE_VALUE) {
                  return FAILURE_VALUE;
                }

                break;

              default:
                this.addError("Unknown element of object type: '".concat(property.type, "'"));
                return FAILURE_VALUE;
            }
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
              _iterator4["return"]();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }

        return result;
      }
      /*
       * execute an assignment
       *
       * @param {object} assignment
       * @param {*} structure
       * @param {object} symbolTable
       * @returns {*}
       */

    }, {
      key: "executeAssignment",
      value: function executeAssignment(assignment, structure, symbolTable) {
        var value = this.executeTransform(assignment.value, structure, symbolTable);

        if (value === FAILURE_VALUE) {
          return FAILURE_VALUE;
        }

        symbolTable[assignment.name] = value;
        return value;
      }
      /*
       * Acquire the value of a type pattern from the specified structure. Any named entities will be populated in the
       * specified symbolTable
       *
       * @param {object} pattern
       * @param {*} structure
       * @param {object} symbolTable
       * @returns {*}
       */

    }, {
      key: "executePattern",
      value: function executePattern(pattern, structure, symbolTable) {
        var assign = function assign(name, value) {
          if (name !== null && name !== undefined) {
            if (name in symbolTable) {
              console.log("warning: overwriting ".concat(name, " in symbol table"));
            }

            symbolTable[name] = value;
          }
        };

        switch (pattern.patternType) {
          case "any":
            assign(pattern.assignTo, structure);
            return structure;

          case "array":
            if (Array.isArray(structure)) {
              assign(pattern.assignTo, structure);
              return structure;
            }

            return FAILURE_VALUE;

          case "array-pattern":
            {
              if (Array.isArray(structure) === false) {
                return FAILURE_VALUE;
              }

              var result = [];
              var index = 0;
              var _iteratorNormalCompletion5 = true;
              var _didIteratorError5 = false;
              var _iteratorError5 = undefined;

              try {
                for (var _iterator5 = pattern.value[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                  var element = _step5.value;
                  var elementPattern = element.pattern,
                      _element$range = element.range,
                      start = _element$range.start,
                      stop = _element$range.stop;
                  var i = void 0;

                  for (i = 0; i < stop; i++) {
                    var actualIndex = index + i; // treat out-of-bounds like a failure

                    var value = actualIndex < structure.length ? this.executePattern(elementPattern, structure[index + i], symbolTable) : FAILURE_VALUE; // if we processed enough, continue, else failure

                    if (value === FAILURE_VALUE) {
                      if (i >= start) {
                        break;
                      }

                      return FAILURE_VALUE;
                    } // save result


                    assign(element.assignTo, value);
                    result.push(value);
                  } // advance global index by processed amount


                  index += i;
                }
              } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                    _iterator5["return"]();
                  }
                } finally {
                  if (_didIteratorError5) {
                    throw _iteratorError5;
                  }
                }
              }

              if (index === structure.length) {
                assign(pattern.assignTo, structure);
                return result;
              }

              return FAILURE_VALUE;
            }

          case "boolean":
            if (typeof structure === "boolean") {
              if (pattern.value === null || pattern.value === structure) {
                assign(pattern.assignTo, structure);
                return structure;
              }
            }

            return FAILURE_VALUE;

          case "null":
            if (structure === null) {
              assign(pattern.assignTo, structure);
              return structure;
            }

            return FAILURE_VALUE;

          case "number":
            if (typeof structure === "number") {
              if (pattern.value === null || pattern.value === structure) {
                assign(pattern.assignTo, structure);
                return structure;
              }
            }

            return FAILURE_VALUE;

          case "object":
            if (isObject(structure)) {
              assign(pattern.assignTo, structure);
              return structure;
            }

            return FAILURE_VALUE;

          case "object-pattern":
            {
              if (isObject(structure) === false) {
                return FAILURE_VALUE;
              }

              var _result = {};
              var _iteratorNormalCompletion6 = true;
              var _didIteratorError6 = false;
              var _iteratorError6 = undefined;

              try {
                for (var _iterator6 = pattern.value[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                  var property = _step6.value;
                  var name = property.name,
                      propertyPattern = property.pattern,
                      assignTo = property.assignTo;

                  if (name in structure) {
                    var _value = this.executePattern(propertyPattern, structure[name], symbolTable);

                    if (_value === FAILURE_VALUE) {
                      return FAILURE_VALUE;
                    }

                    assign(property.assignTo, _value);
                    _result[assignTo] = _value;
                  } else {
                    return FAILURE_VALUE;
                  }
                }
              } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                    _iterator6["return"]();
                  }
                } finally {
                  if (_didIteratorError6) {
                    throw _iteratorError6;
                  }
                }
              }

              assign(pattern.assignTo, structure);
              return _result;
            }

          case "reference":
            if (pattern.value in this.patterns) {
              var referencedPattern = this.patterns[pattern.value];

              var _result2 = this.executePattern(referencedPattern, structure, symbolTable);

              if (_result2 !== FAILURE_VALUE) {
                assign(pattern.assignTo, _result2);
              }

              return _result2;
            }

            return FAILURE_VALUE;

          case "string":
            if (typeof structure === "string") {
              if (pattern.value === null || pattern.value === structure) {
                assign(pattern.assignTo, structure);
                return structure;
              }
            }

            return FAILURE_VALUE;

          case "undefined":
            // NOTE: Our current failure value is undefined, so this will be treated as an error. I can change
            // FAILURE_VALUE to be a sigil. I'll just have to be careful to return undefined at the top-most level.
            // I'm leaving this for now as this is probably not going to be used much
            if (structure === undefined) {
              assign(pattern.assignTo, structure);
              return structure;
            }

            return FAILURE_VALUE;

          default:
            throw new TypeError("unrecognized pattern type: '".concat(pattern.type, "'"));
        }
      }
      /*
       * Execute a method and return its value
       *
       * @param {object} expression
       * @param {object} symbolTable
       * @returns {*}
       */

    }, {
      key: "executeGenerator",
      value: function executeGenerator(expression, symbolTable) {
        var _this2 = this;

        var getNumbers = function getNumbers(operation) {
          var left = _this2.executeGenerator(expression.left.expression, symbolTable);

          if (left !== FAILURE_VALUE && typeof left === "number") {
            var right = _this2.executeGenerator(expression.right.expression, symbolTable);

            if (right !== FAILURE_VALUE && typeof right === "number") {
              return operation(left, right);
            }
          }

          return FAILURE_VALUE;
        };

        switch (expression.type) {
          case "get-value":
            return symbolTable[expression.name];

          case "get-property":
            {
              var object = this.executeGenerator(expression.left, symbolTable);
              return isObject(object) ? object[expression.right] : FAILURE_VALUE;
            }

          case "add":
            {
              return getNumbers(function (a, b) {
                return a + b;
              });
            }

          case "subtract":
            {
              return getNumbers(function (a, b) {
                return a - b;
              });
            }

          case "multiply":
            {
              return getNumbers(function (a, b) {
                return a * b;
              });
            }

          case "divide":
            {
              return getNumbers(function (a, b) {
                return a / b;
              });
            }

          case "invoke":
            {
              var args = expression.args.map(function (arg) {
                return symbolTable[arg];
              });
              return this.createType(expression.name, args);
            }

          case "array":
            return expression.value.map(function (elementExpression) {
              return _this2.executeGenerator(elementExpression.expression, symbolTable);
            });

          case "boolean":
          case "null":
          case "number":
          case "string":
          case "undefined":
            return expression.value;

          case "object":
            {
              var result = {};
              var _iteratorNormalCompletion7 = true;
              var _didIteratorError7 = false;
              var _iteratorError7 = undefined;

              try {
                for (var _iterator7 = expression.value[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                  var propertyExpression = _step7.value;
                  result[propertyExpression.name] = this.executeGenerator(propertyExpression.expression, symbolTable);
                }
              } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                    _iterator7["return"]();
                  }
                } finally {
                  if (_didIteratorError7) {
                    throw _iteratorError7;
                  }
                }
              }

              return result;
            }

          default:
            this.addError("Unrecognized generator expression type: '".concat(expression.type, "'"));
            return FAILURE_VALUE;
        }
      }
      /*
       * Invoke a user-defined method and return its value
       *
       * @param {string} type
       * @param {Array} args
       * @returns {*}
       */

    }, {
      key: "createType",
      value: function createType(type, args) {
        if (type in this.typeCreators) {
          var _this$typeCreators;

          return (_this$typeCreators = this.typeCreators)[type].apply(_this$typeCreators, _toConsumableArray(args));
        } else if ("*" in this.typeCreators) {
          return this.typeCreators["*"](type, args);
        }

        return FAILURE_VALUE;
      }
    }], [{
      key: "fromSource",
      value: function fromSource(source) {
        var result = new Transformer();
        result.addDefinitionsFromSource(source);
        return result;
      }
      /**
       * Create a new instance of a Transformer with its type table initially populated from the specified serialization
       * table. This table can be used to cache a parse normalized file and is the output of Parser.parse()
       *
       * @param {Array} table
       * @returns {Transformer}
       */

    }, {
      key: "fromTable",
      value: function fromTable(table) {
        var result = new Transformer();
        result.addDefinitionsFromTable(table);
        return result;
      }
    }]);

    return Transformer;
  }();

  /**
   * @module kld-data-transformer
   */

  exports.Parser = parser;
  exports.Transformer = Transformer;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
