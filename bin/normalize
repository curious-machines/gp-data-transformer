import util from "util";
import fs from "fs";
import path from "path";
import Normalizer from "../lib/Normalizer.js";
import {argv} from "yargs";

function usage() {
    console.log(`
normalizer [-r <type-creator-module>] [-v] <norm-source> <data-source>
    <norm-source> = (-e <expression> | -n <norm-file>)
    <data-source> = (-j <json-file> | <json-string>)

  r      - load anode module. All exports will be added as type creators
  v      - turn on verbose mode
  n      - the .norm file to execute. n runs before e
  e      - the expression to execute. e runs after n
  j      - the JSON file to test
  a      - data is an array of objects to test
  <json> - the raw JSON strings to process

`);
}

function prettify(object) {
    const options = {depth: Infinity, colors: true};

    return util.inspect(object, options);
}

function say(message) {
    if (verbose) {
        console.log(message);
    }
}

function main(module) {
    // creator interpreter
    const normalizer = new Normalizer();

    // load type creators from module
    if (module !== null) {
        for (const name in module) {
            normalizer.typeCreators[name] = module[name];
        }
    }

    // get data
    if ("j" in argv === false && argv._.length === 0) {
        console.error("Must specify data with -j or a raw JSON string");
        usage();
        process.exit();
    }

    const dataSource = ("j" in argv)
        ? fs.readFileSync(path.resolve(argv.j))
        : argv._[0];
    let structures = JSON.parse(dataSource);

    if (Array.isArray(structures) === false) {
        structures = [structures];
    }

    // execute norm file and/or user-entered source
    if ("n" in argv === false && "e" in argv === false) {
        console.error("Must have -e or -n option");
        usage();
        process.exit(1);
    }

    let source;

    if ("n" in argv) {
        source = fs.readFileSync(path.resolve(argv.n), "utf-8");

        normalizer.run(source, null);
    }

    for (const structure of structures) {
        const result = normalizer.run(argv.e, structure);

        console.log(`  data: ${prettify(structure)}`);

        // process result
        if (result !== undefined) {
            console.log(`result: ${prettify(result)}`);
        }
        else {
            console.error("The following error(s) occurred");

            for (const message of normalizer.messages) {
                console.error(`  ${message.level}: ${message.message}`);
            }
        }

        console.log();
    }
}


const verbose = "v" in argv;

if ("r" in argv) {
    import(path.resolve(argv.r)).then(main)
}
else {
    main(null);
}
