#!/usr/bin/env node -r esm

import util from "util";
import fs from "fs";
import path from "path";
import Normalizer from "../lib/Normalizer.js";
import {argv} from "yargs";

let verbose = "v" in argv;

function usage() {
    console.log("normalizer [-r <type-creator-module>] [-v] -n <norm-file> -t type <input-file>+");
    console.log("  r       - load anode module. All exports will be added as type creators");
    console.log("  v       - turn on verbose mode");
    console.log("  n       - the .norm file to use for normalization");
    console.log("  t       - the type to use for normalization");
    console.log("  <files> - The JSON files to process");
}

function prettify(object) {
    const options = {depth: Infinity, colors: true};

    return util.inspect(object, options);
}

function say(message) {
    if (verbose) {
        console.log(message);
    }
}

function main(module) {
    if ("n" in argv && "t" in argv && argv._.length > 0) {
        say(`loading ${argv.n}`);

        const source = fs.readFileSync(path.join(__dirname, argv.n), "utf-8");
        const normalizer = new Normalizer();

        normalizer.addDefinitionsFromSource(source);

        if (module !== null) {
            for (const name in module) {
                normalizer.typeCreators[name] = module[name];
            }
        }

        for (const file of argv._) {
            say(`processing ${file}`);

            const dataSource = fs.readFileSync(path.join(__dirname, file), "utf-8");
            const data = JSON.parse(dataSource);
            const structures = Array.isArray(data) ? data : [data];

            for (const structure of structures) {
                const result = normalizer.normalize(structure, argv.t);

                if (result !== undefined) {
                    console.log(util.inspect(result, {depth: Infinity, colors: true}));
                }
                else {
                    console.error();
                    console.error("The following failed validation");
                    console.error(prettify(structure));

                    for (const message of normalizer.messages) {
                        console.error(`  ${message.level}: ${message.message}`);
                    }
                }
            }
        }
    }
    else {
        usage();
        process.exit(1);
    }
}

if ("r" in argv) {
    import(argv.r).then(main)
}
else {
    main(null);
}
