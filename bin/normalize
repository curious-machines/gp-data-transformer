import util from "util";
import path from "path";
import Normalizer from "../lib/Normalizer.js";
import {argv} from "yargs";

function usage() {
    console.log("normalizer [-r <type-creator-module>] [-v] -e <expression> <json>+");
    console.log("  r      - load anode module. All exports will be added as type creators");
    console.log("  v      - turn on verbose mode");
    console.log("  e      - the expression to use for normalization");
    console.log("  <json> - The JSON files to process");
}

function prettify(object) {
    const options = {depth: Infinity, colors: true};

    return util.inspect(object, options);
}

function say(message) {
    if (verbose) {
        console.log(message);
    }
}

function main(module) {
    if ("e" in argv && argv._.length > 0) {
        say(`loading ${argv.n}`);

        const source = argv.e;
        const normalizer = new Normalizer();

        if (module !== null) {
            for (const name in module) {
                normalizer.typeCreators[name] = module[name];
            }
        }

        const dataSource = argv._[0];
        const structure = JSON.parse(dataSource);
        const result = normalizer.run(source, structure);

        if (result !== undefined) {
            console.log(prettify(result));
        }
        else {
            console.error();
            console.error("The following failed normalization");
            console.error(prettify(structure));

            for (const message of normalizer.messages) {
                console.error(`  ${message.level}: ${message.message}`);
            }
        }
    }
    else {
        usage();
        process.exit(1);
    }
}


const verbose = "v" in argv;

if ("r" in argv) {
    import(path.resolve(argv.r)).then(main)
}
else {
    main(null);
}
